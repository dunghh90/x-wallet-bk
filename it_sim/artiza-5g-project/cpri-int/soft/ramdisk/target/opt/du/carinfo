@global_logcounter = "entry"	# -> log history mask
Rrh.require("./verbose")
Rrh.require("./define_5glls")
Rrh.require("./comfunc_5glls")

device_type = Rrh.get_shmcm("device_type")
if device_type != "00000013" && device_type != "00000014" then
	puts DuCode::ERR_DESCRIPTION[3]
	Rrh.exit(1)
end


get_vid_reg = Rrh.regread("a1000300")
dl = Rrh.calc(get_vid_reg,"&","00000FFF")
get_vid_reg = Rrh.regread("a1000494")
ul = Rrh.calc(get_vid_reg,"&","00000FFF")
puts "Port1:DL_Vid=0x#{dl[5..7]}(#{dl.to_i(16)}) / UL_Vid=0x#{ul[5..7]}(#{ul.to_i(16)})"
	
pcp = Rrh.regread("a1000494")
pcp_reg = Rrh.calc(pcp,"&","00070000")
ul = Rrh.calc(pcp_reg,">","00000010")
puts "Port1:PCP=0x#{ul[7..7]}(#{ul.to_i(16)})"


mask = ["00000001","00000002","00000004","00000008","00000010","00000020","00000040","00000080"]
ant_name = ["A","B","C","D","E","F","G","H"]
ant = ["a","b","c","d","e","f","g","h"]

for cnt in 0..3 do
	ANT_no = ant[cnt] + "_endp"

	#ANT#n Tx EndPoint Information
	#       Acell_ID   CC_ID   Port_ID   ST
	#Cr#0 :   0x00       0x0    0x0      Enable
	#Cr#1 :   0x00       0x0    0x0      Disable
	if device_type == "00000013" then
		printf("ANT#%s Tx EndPoint Information\n",ant_name[cnt])
		printf("       Acell_ID   CC_ID   Port_ID   ST\n")

		for cntcr in 0..1 do
			CC_no = cntcr.to_s(10) + "_cc"
			endp_onoff	= Rrh.get_shmtx(CC_no,ANT_no,"onoff")
			endp_Acell_id	= Rrh.get_shmtx(CC_no,ANT_no,"Acell_id")
			endp_CC_id	= Rrh.get_shmtx(CC_no,ANT_no,"CC_id")
			endp_Port_id	= Rrh.get_shmtx(CC_no,ANT_no,"Port_id")

			if endp_onoff == "00000000" then
				endp_onoff = "Disable"
			else
				endp_onoff = "Enable"
			end
			printf("Cr#%s :   0x%02x       0x%x    0x%x      %s\n",cntcr.to_s(10),endp_Acell_id.to_i(16),endp_CC_id.to_i(16),endp_Port_id.to_i(16),endp_onoff)
			if endp_onoff == "Enable" then
				endp_Acell_id_ex	= Rrh.get_shmtx(CC_no,ANT_no,"Acell_id_ex")
				endp_CC_id_ex		= Rrh.get_shmtx(CC_no,ANT_no,"CC_id_ex")
				endp_Port_id_ex		= Rrh.get_shmtx(CC_no,ANT_no,"Port_id_ex")
				if endp_Acell_id_ex.to_i(16) != 0x3f then
			printf("Cr#%s :   0x%02x       0x%x    0x%x      %s\n",cntcr.to_s(10),endp_Acell_id_ex.to_i(16),endp_CC_id_ex.to_i(16),endp_Port_id_ex.to_i(16),endp_onoff)
				end
			end

		end
		printf("\n")
	else
		if cnt > 1 then
			break
		end
		printf("ANT#%s Tx EndPoint Information\n",ant_name[cnt])
		printf("       Acell_ID   CC_ID   Port_ID   ST\n")

		for cntcr in 0..3 do
			CC_no = cntcr.to_s(10) + "_cc"
			endp_onoff	= Rrh.get_shmtx(CC_no,ANT_no,"onoff")
			endp_Acell_id	= Rrh.get_shmtx(CC_no,ANT_no,"Acell_id")
			endp_CC_id	= Rrh.get_shmtx(CC_no,ANT_no,"CC_id")
			endp_Port_id	= Rrh.get_shmtx(CC_no,ANT_no,"Port_id")

			if endp_onoff == "00000000" then
				endp_onoff = "Disable"
			else
				endp_onoff = "Enable"
			end
			printf("Cr#%s :   0x%02x       0x%x    0x%x      %s\n",cntcr.to_s(10),endp_Acell_id.to_i(16),endp_CC_id.to_i(16),endp_Port_id.to_i(16),endp_onoff)
			if endp_onoff == "Enable" then
				endp_Acell_id_ex	= Rrh.get_shmtx(CC_no,ANT_no,"Acell_id_ex")
				endp_CC_id_ex		= Rrh.get_shmtx(CC_no,ANT_no,"CC_id_ex")
				endp_Port_id_ex		= Rrh.get_shmtx(CC_no,ANT_no,"Port_id_ex")
				if endp_Acell_id_ex.to_i(16) != 0x3f then
			printf("Cr#%s :   0x%02x       0x%x    0x%x      %s\n",cntcr.to_s(10),endp_Acell_id_ex.to_i(16),endp_CC_id_ex.to_i(16),endp_Port_id_ex.to_i(16),endp_onoff)
				end
			end
		end
		printf("\n")
	end
end

for cnt in 0..3 do
	ANT_no = ant[cnt] + "_endp"

	#ANT#n Tx EndPoint Information
	#       Acell_ID   CC_ID   Port_ID   ST
	#Cr#0 :   0x00       0x0    0x0      Enable
	#Cr#1 :   0x00       0x0    0x0      Disable
	if device_type == "00000013" then
		printf("ANT#%s Rx EndPoint Information\n",ant_name[cnt])
		printf("       Acell_ID   CC_ID   Port_ID   ST\n")

		for cntcr in 0..1 do
			CC_no = cntcr.to_s(10) + "_cc"
			endp_onoff	= Rrh.get_shmrx(CC_no,ANT_no,"onoff")
			endp_Acell_id	= Rrh.get_shmrx(CC_no,ANT_no,"Acell_id")
			endp_CC_id	= Rrh.get_shmrx(CC_no,ANT_no,"CC_id")
			endp_Port_id	= Rrh.get_shmrx(CC_no,ANT_no,"Port_id")

			if endp_onoff == "00000000" then
				endp_onoff = "Disable"
			else
				endp_onoff = "Enable"
				
			end
			printf("Cr#%s :   0x%02x       0x%x    0x%x      %s\n",cntcr.to_s(10),endp_Acell_id.to_i(16),endp_CC_id.to_i(16),endp_Port_id.to_i(16),endp_onoff)
			if endp_onoff == "Enable" then
				endp_Acell_id_ex	= Rrh.get_shmrx(CC_no,ANT_no,"Acell_id_ex")
				endp_CC_id_ex		= Rrh.get_shmrx(CC_no,ANT_no,"CC_id_ex")
				endp_Port_id_ex		= Rrh.get_shmrx(CC_no,ANT_no,"Port_id_ex")
				if endp_Acell_id_ex.to_i(16) != 0x3f then
			printf("Cr#%s :   0x%02x       0x%x    0x%x      %s\n",cntcr.to_s(10),endp_Acell_id_ex.to_i(16),endp_CC_id_ex.to_i(16),endp_Port_id_ex.to_i(16),endp_onoff)
				end
			end


		end
		printf("\n")
	else
		if cnt > 1 then
			break
		end
		printf("ANT#%s Rx EndPoint Information\n",ant_name[cnt])
		printf("       Acell_ID   CC_ID   Port_ID   ST\n")

		for cntcr in 0..3 do
			CC_no = cntcr.to_s(10) + "_cc"
			endp_onoff	= Rrh.get_shmrx(CC_no,ANT_no,"onoff")
			endp_Acell_id	= Rrh.get_shmrx(CC_no,ANT_no,"Acell_id")
			endp_CC_id	= Rrh.get_shmrx(CC_no,ANT_no,"CC_id")
			endp_Port_id	= Rrh.get_shmrx(CC_no,ANT_no,"Port_id")

			if endp_onoff == "00000000" then
				endp_onoff = "Disable"
			else
				endp_onoff = "Enable"
			end
			printf("Cr#%s :   0x%02x       0x%x    0x%x      %s\n",cntcr.to_s(10),endp_Acell_id.to_i(16),endp_CC_id.to_i(16),endp_Port_id.to_i(16),endp_onoff)
			if endp_onoff == "Enable" then
				endp_Acell_id_ex	= Rrh.get_shmrx(CC_no,ANT_no,"Acell_id_ex")
				endp_CC_id_ex		= Rrh.get_shmrx(CC_no,ANT_no,"CC_id_ex")
				endp_Port_id_ex		= Rrh.get_shmrx(CC_no,ANT_no,"Port_id_ex")
				if endp_Acell_id_ex.to_i(16) != 0x3f then
			printf("Cr#%s :   0x%02x       0x%x    0x%x      %s\n",cntcr.to_s(10),endp_Acell_id_ex.to_i(16),endp_CC_id_ex.to_i(16),endp_Port_id_ex.to_i(16),endp_onoff)
				end
			end
		end
		printf("\n")
	end
end

bwval = ["00000000","00000001","00000002","00000003","00000004","00000005","00000006","00000007","00000008","00000009","0000000a","0000000b"]
BW = ["10","20","30","40","50","60","70","80","90","100","200","400"]
SCS = ["15","30","60","120","240"]

if device_type == "00000013" then
	support_band = Rrh.get_shmcm("support_band")
	if support_band == "00000010" then
		x_tssi = 1878452.2
		y_tssi = 29.9
		z_tssi = -34.22
	else
		x_tssi = 1878452.2
		y_tssi = 28.5
		z_tssi = -34.22
	end

	# TSSILAT write
	Rrh.regwrite("B11001E4","00000001")
else
	x_tssi = 37820813.7
	y_tssi = 15.2
	z_tssi = -34.22

	# TSSILAT write
	Rrh.regwrite("B1100124","00000001")
end

for cnt in 0..3 do
	if device_type == "00000014" && cnt > 1 then
		break
	end
	ANT_no = ant[cnt] + "_array"

	#ANT#n Tx Information
	#       CarState      Frequency  Bandwidth  TxPower
	#Cr#0 : ON/TEST/OFF      *****      100      *****
	#Cr#1 : ON/TEST/OFF      *****      100      *****
	if device_type == "00000013" then
		offset = Rrh.calc(cnt.to_s(10), "*", "0x400")
		addr = Rrh.calc("B11001C0", "+", offset)
		for cntcr in 0..1 do
			CC_no		= cntcr.to_s(10) + "_cc"
			onoff		= Rrh.get_shmtx(CC_no,ANT_no,"onoff")
			testonoff	= Rrh.get_shmtx(CC_no,ANT_no,"test_onoff")
			bw		= Rrh.get_shmtx(CC_no,ANT_no,"nr_bandwidth")
			freq		= Rrh.get_shmtx(CC_no,ANT_no,"nr_freq")
			scs		= Rrh.get_shmtx(CC_no,ANT_no,"nr_scs")
			#scs		= 30

			offsetcr = Rrh.calc(cntcr.to_s(16), "*", "0x4")
			addr = Rrh.calc(addr, "+", offsetcr)
			power_val = Rrh.regread(addr)

			for cntbw in 0..11 do
				if bw == bwval[cntbw] then
					bw = BW[cntbw]
					break
				end
			end
			for cntscs in 0..4 do
				if scs == bwval[cntscs] then
					scs = SCS[cntscs]
					if cntscs == 0 then
						scs = "30"
					end
					break
				end
			end
			if onoff == "00000001" then
				state = "ON"
			elsif testonoff == "00000001" then
				state = "TEST"
			else
				state = "OFF"
			end
			if power_val == "00000000" then
				power = z_tssi
			else
				power = 10.0 * Math::log10( power_val.to_i(16) / x_tssi ) + y_tssi
			end

			if cntcr == 0 then
				printf("ANT#%s Tx Information\n",ant_name[cnt])
				printf("       CarState      Frequency  Bandwidth  TxPower    Scs\n")
			end
			if state == "OFF" then
				if freq == "00000000" then
					printf("Cr#%s : %04s           %07s    %03s      %7s    %03s\n",cntcr.to_s(10),state,"-","-","-","-")
				else
					printf("Cr#%s : %04s           %7d    %03s      %7s    %03s\n",cntcr.to_s(10),state,freq.to_i(16).to_i(10),bw,"-",scs)
				end
			else
				if freq == "00000000" then
					printf("Cr#%s : %04s           %07s    %03s      %7.1f    %03s\n",cntcr.to_s(10),state,"-","-",power.round(1),scs)
				else
					printf("Cr#%s : %04s           %7d    %03s      %7.1f    %03s\n",cntcr.to_s(10),state,freq.to_i(16).to_i(10),bw,power.round(1),scs)
				end
			end

		end
	else
		for cntcr in 0..3 do
			CC_no		= cntcr.to_s(10) + "_cc"
			onoff		= Rrh.get_shmtx(CC_no,ANT_no,"onoff")
			testonoff	= Rrh.get_shmtx(CC_no,ANT_no,"test_onoff")
			bw			= Rrh.get_shmtx(CC_no,ANT_no,"nr_bandwidth")
			freq		= Rrh.get_shmtx(CC_no,ANT_no,"nr_freq")
			scs			= Rrh.get_shmtx(CC_no,ANT_no,"nr_scs")

			offsetcr = Rrh.calc(cntcr.to_s(16), "*", "0x4")
			if cnt < 1 then
				addr = Rrh.calc("B1100100", "+", offsetcr)
			else
				addr = Rrh.calc("B1100500", "+", offsetcr)
			end
			power_val = Rrh.regread(addr)

			for cntbw in 0..11 do
				if bw == bwval[cntbw] then
					bw = BW[cntbw]
					break
				end
			end
			for cntscs in 0..4 do
				if scs == bwval[cntscs] then
					scs = SCS[cntscs]
					if cntscs == 0 then
						scs = "120"
					end
					break
				end
			end
			if onoff == "00000001" then
				state = "ON"
			elsif testonoff == "00000001" then
				state = "TEST"
			else
				state = "OFF"
			end
			if power_val == "00000000" then
				power = z_tssi
			else
				power = 10.0 * Math::log10( power_val.to_i(16) / x_tssi ) + y_tssi
			end

			if cntcr == 0 then
				printf("ANT#%s Tx Information\n",ant_name[cnt])
				printf("       CarState      Frequency  Bandwidth  TxPower    Scs\n")
			end
			if state == "OFF" then
				if freq == "00000000" then
					printf("Cr#%s : %04s           %08s    %03s      %7s    %03s\n",cntcr.to_s(10),state,"-","-","-","-")
				else
					printf("Cr#%s : %04s           %8d    %03s      %7s    %03s\n",cntcr.to_s(10),state,freq.to_i(16).to_i(10),bw,"-",scs)
				end
			else
				if freq == "00000000" then
					printf("Cr#%s : %04s           %08s    %03s      %7.1f    %03s\n",cntcr.to_s(10),state,"-","-",power.round(1),scs)
				else
					printf("Cr#%s : %04s           %8d    %03s      %7.1f    %03s\n",cntcr.to_s(10),state,freq.to_i(16).to_i(10),bw,power.round(1),scs)
				end
			end
		end
	end
end

support_band = Rrh.get_shmcm("support_band")
if support_band == "00000010" then
	# 装置	帯域(MHz)	X	Y
	# SUB6(4.5G)	100	1.12	17607552.25
	x_rtwp = -26.5
	y_rtwp = 508904767.1
	z_rtwp = -116.92 + x_rtwp
elsif support_band == "00000011" then
	# SUB6(3.7G)	100	1.12	17975110.84
	x_rtwp = -26.5
	y_rtwp = 508904767.1
	z_rtwp = -116.92 + x_rtwp
else
	#mmW	200	-10.88	22109216.31
	x_rtwp = -55.7
	y_rtwp = 3366585.938
	z_rtwp = -116.92 + x_rtwp
end

# RTWPLAT write
if device_type == "00000013" then
	for cnt in 0..3 do
		offset = Rrh.calc(cnt.to_s(10), "*", "0x400")
		addr = Rrh.calc("B1300174", "+", offset)
		Rrh.regwrite(addr,"00000001")
	end
else
	Rrh.regwrite("B1300174","00000001")
end

for cnt in 0..3 do
	if device_type == "00000014" && cnt > 1 then
		break
	end
	ANT_no = ant[cnt] + "_array"

	#ANT#n Rx Information
	#       CarState      Frequency  Bandwidth  RxPower
	#Cr#0 : ON/OFF      *****      100      *****
	#Cr#1 : ON/OFF      *****      100      *****
	if device_type == "00000013" then
		offset = Rrh.calc(cnt.to_s(10), "*", "0x400")
		addr = Rrh.calc("B1300150", "+", offset)
		for cntcr in 0..1 do
			CC_no		= cntcr.to_s(10) + "_cc"
			onoff		= Rrh.get_shmrx(CC_no,ANT_no,"onoff")
			bw		= Rrh.get_shmrx(CC_no,ANT_no,"nr_bandwidth")
			freq		= Rrh.get_shmrx(CC_no,ANT_no,"nr_freq")
			scs		= Rrh.get_shmrx(CC_no,ANT_no,"nr_scs")

			offsetcr = Rrh.calc(cntcr.to_s(16), "*", "0x4")
			addr = Rrh.calc(addr, "+", offsetcr)
			power_val = Rrh.regread(addr)

			for cntbw in 0..11 do
				if bw == bwval[cntbw] then
					bw = BW[cntbw]
					break
				end
			end
			for cntscs in 0..4 do
				if scs == bwval[cntscs] then
					scs = SCS[cntscs]
					if cntscs == 0 then
						scs = "30"
					end
					break
				end
			end
			if onoff == "00000001" then
				state = "ON"
			else
				state = "OFF"
			end

			if power_val == "00000000" then
				power = z_rtwp
			else
				power = 10.0 * Math::log10( power_val.to_i(16) / y_rtwp ) + x_rtwp
			end

			if cntcr == 0 then
				printf("ANT#%s Rx Information\n",ant_name[cnt])
				printf("       CarState      Frequency  Bandwidth  RxPower    Scs\n")
			end
			if state == "OFF" then
				if freq == "00000000" then
					printf("Cr#%s : %04s           %07s    %03s      %7s    %03s\n",cntcr.to_s(10),state,"-","-","-","-")
				else
					printf("Cr#%s : %04s           %7d    %03s      %7s    %03s\n",cntcr.to_s(10),state,freq.to_i(16).to_i(10),bw,"-",scs)
				end
			else
				if freq == "00000000" then
					printf("Cr#%s : %04s           %07s    %03s      %7.1f    %03s\n",cntcr.to_s(10),state,"-","-",power.round(1),scs)
				else
					printf("Cr#%s : %04s           %7d    %03s      %7.1f    %03s\n",cntcr.to_s(10),state,freq.to_i(16).to_i(10),bw,power.round(1),scs)
				end
			end

		end
	else
		offset = Rrh.calc(cnt.to_s(10), "*", "0x400")
		addr = Rrh.calc("B1300150", "+", offset)
		base = addr
		for cntcr in 0..3 do
			CC_no = cntcr.to_s(10) + "_cc"
			onoff		= Rrh.get_shmrx(CC_no,ANT_no,"onoff")
			bw		= Rrh.get_shmrx(CC_no,ANT_no,"nr_bandwidth")
			freq		= Rrh.get_shmrx(CC_no,ANT_no,"nr_freq")
			scs		= Rrh.get_shmrx(CC_no,ANT_no,"nr_scs")

			offsetcr = Rrh.calc(cntcr.to_s(16), "*", "0x4")
			addr = Rrh.calc(base, "+", offsetcr)
			power_val = Rrh.regread(addr)

			for cntbw in 0..11 do
				if bw == bwval[cntbw] then
					bw = BW[cntbw]
					break
				end
			end
			for cntscs in 0..4 do
				if scs == bwval[cntscs] then
					scs = SCS[cntscs]
					if cntscs == 0 then
						scs = "120"
					end
					break
				end
			end
			if onoff == "00000001" then
				state = "ON"
			else
				state = "OFF"
			end
			if power_val == "00000000" then
				power = z_rtwp
			else
				power = 10.0 * Math::log10( power_val.to_i(16) / y_rtwp ) + x_rtwp
			end

			if cntcr == 0 then
				printf("ANT#%s Rx Information\n",ant_name[cnt])
				printf("       CarState      Frequency  Bandwidth  RxPower    Scs\n")
			end
			if state == "OFF" then
				if freq == "00000000" then
					printf("Cr#%s : %04s           %08s    %03s      %7s    %03s\n",cntcr.to_s(10),state,"-","-","-","-")
				else
					printf("Cr#%s : %04s           %8d    %03s      %7s    %03s\n",cntcr.to_s(10),state,freq.to_i(16).to_i(10),bw,"-",scs)
				end
			else
				if freq == "00000000" then
					printf("Cr#%s : %04s           %08s    %03s      %7.1f    %03s\n",cntcr.to_s(10),state,"-","-",power.round(1),scs)
				else
					printf("Cr#%s : %04s           %8d    %03s      %7.1f    %03s\n",cntcr.to_s(10),state,freq.to_i(16).to_i(10),bw,power.round(1),scs)
				end
			end
		end
	end
end


