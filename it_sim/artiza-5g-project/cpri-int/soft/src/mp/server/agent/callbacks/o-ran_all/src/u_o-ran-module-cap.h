
#ifndef _H_u_o_ran_module_cap
#define _H_u_o_ran_module_cap
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-module-cap
    revision 2019-02-04
    namespace urn:o-ran:module-cap:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-module-cap.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Feature o-ran-module-cap:LAA
 * Comment out to disable */
//#define u_o_ran_module_cap_F_LAA 1

/* Feature o-ran-module-cap:TRANSPORT-FRAGMENTATION
 * Comment out to disable */
#define u_o_ran_module_cap_F_TRANSPORT_FRAGMENTATION 1



/* case /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format/no-compresison */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_no_compresison_ {
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_no_compresison;

/* case /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format/block-floating-point */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_block_floating_point_ {
    uint8 v_exponent;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_block_floating_point;

/* case /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format/block-scaling */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_block_scaling_ {
    uint8 v_block_scalar;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_block_scaling;

/* case /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format/u-law */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_u_law_ {
    uint8 v_comp_bit_width;
    uint8 v_comp_shift;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_u_law;

/* leaf-list /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format/beam-space-compression/active-beam-space-coeficient-mask */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_beam_space_compression_active_beam_space_coeficient_mask_ {
    dlq_hdr_t qhdr;
    uint8 v_active_beam_space_coeficient_mask;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_beam_space_compression_active_beam_space_coeficient_mask;

/* case /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format/beam-space-compression */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_beam_space_compression_ {
    dlq_hdr_t v_active_beam_space_coeficient_mask;
    uint8 v_block_scaler;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_beam_space_compression;

/* case /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format/modulation-compression */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_modulation_compression_ {
    uint8 v_csf;
    uint16 v_mod_comp_scaler;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_modulation_compression;

/* choice /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format */
typedef union y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_ {
    y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_no_compresison v_no_compresison;
    y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_block_floating_point v_block_floating_point;
    y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_block_scaling v_block_scaling;
    y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_u_law v_u_law;
    y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_beam_space_compression v_beam_space_compression;
    y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_modulation_compression v_modulation_compression;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format;

/* list /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_ {
    dlq_hdr_t qhdr;
    xmlChar *v_compression_type;
    uint8 v_bitwidth;
    y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format v_compression_format;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported;

/* container /module-capability/ru-capabilities/format-of-iq-sample */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample_ {
    boolean v_dynamic_compression_supported;
    boolean v_realtime_variable_bit_width_supported;
    dlq_hdr_t v_compression_method_supported;
    boolean v_variable_bit_width_per_channel_supported;
    boolean v_syminc_supported;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample;

/* list /module-capability/ru-capabilities/ul-mixed-num-required-guard-rbs */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_ul_mixed_num_required_guard_rbs_ {
    dlq_hdr_t qhdr;
    xmlChar *v_scs_a;
    xmlChar *v_scs_b;
    uint8 v_number_of_guard_rbs_ul;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_ul_mixed_num_required_guard_rbs;

/* list /module-capability/ru-capabilities/dl-mixed-num-required-guard-rbs */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_dl_mixed_num_required_guard_rbs_ {
    dlq_hdr_t qhdr;
    xmlChar *v_scs_a;
    xmlChar *v_scs_b;
    uint8 v_number_of_guard_rbs_dl;
} y_o_ran_module_cap_T_module_capability_ru_capabilities_dl_mixed_num_required_guard_rbs;

/* container /module-capability/ru-capabilities */
typedef struct y_o_ran_module_cap_T_module_capability_ru_capabilities_ {
    xmlChar *v_ru_supported_category;
    uint8 v_number_of_ru_ports;
    uint8 v_number_of_spatial_streams;
    int64 v_max_power_per_pa_antenna;
    int64 v_min_power_per_pa_antenna;
    uint8 v_fronthaul_split_option;
    y_o_ran_module_cap_T_module_capability_ru_capabilities_format_of_iq_sample v_format_of_iq_sample;
    dlq_hdr_t v_ul_mixed_num_required_guard_rbs;
    dlq_hdr_t v_dl_mixed_num_required_guard_rbs;
    boolean v_energy_saving_by_transmission_blanks;
    boolean v_dynamic_transport_delay_management_supported;
} y_o_ran_module_cap_T_module_capability_ru_capabilities;

/* list /module-capability/band-capabilities/sub-band-info/sub-band-frequency-ranges */
typedef struct y_o_ran_module_cap_T_module_capability_band_capabilities_sub_band_info_sub_band_frequency_ranges_ {
    dlq_hdr_t qhdr;
    xmlChar *v_sub_band;
    uint64 v_max_supported_frequency_dl;
    uint64 v_min_supported_frequency_dl;
} y_o_ran_module_cap_T_module_capability_band_capabilities_sub_band_info_sub_band_frequency_ranges;


#ifdef u_o_ran_module_cap_F_LAA
/* container /module-capability/band-capabilities/sub-band-info */
typedef struct y_o_ran_module_cap_T_module_capability_band_capabilities_sub_band_info_ {
    dlq_hdr_t v_sub_band_frequency_ranges;
    uint8 v_number_of_laa_scarriers;
    uint16 v_maximum_laa_buffer_size;
    uint16 v_maximum_processing_time;
    boolean v_self_configure;
} y_o_ran_module_cap_T_module_capability_band_capabilities_sub_band_info;
#endif /* u_o_ran_module_cap_F_LAA */

/* list /module-capability/band-capabilities */
typedef struct y_o_ran_module_cap_T_module_capability_band_capabilities_ {
    dlq_hdr_t qhdr;
    uint16 v_band_number;

#ifdef u_o_ran_module_cap_F_LAA
    y_o_ran_module_cap_T_module_capability_band_capabilities_sub_band_info v_sub_band_info;
#endif /* u_o_ran_module_cap_F_LAA */
    uint64 v_max_supported_frequency_dl;
    uint64 v_min_supported_frequency_dl;
    uint64 v_max_supported_bandwidth_dl;
    uint32 v_max_num_carriers_dl;
    uint64 v_max_carrier_bandwidth_dl;
    uint64 v_min_carrier_bandwidth_dl;
    uint64 v_max_supported_frequency_ul;
    uint64 v_min_supported_frequency_ul;
    uint64 v_max_supported_bandwidth_ul;
    uint32 v_max_num_carriers_ul;
    uint64 v_max_carrier_bandwidth_ul;
    uint64 v_min_carrier_bandwidth_ul;
    uint8 v_max_num_component_carriers;
    uint16 v_max_num_bands;
    uint8 v_max_num_sectors;
    int64 v_max_power_per_antenna;
    int64 v_min_power_per_antenna;
    uint8 v_codebook_configuration_ng;
    uint8 v_codebook_configuration_n1;
    uint8 v_codebook_configuration_n2;
} y_o_ran_module_cap_T_module_capability_band_capabilities;

/* container /module-capability */
typedef struct y_o_ran_module_cap_T_module_capability_ {
    y_o_ran_module_cap_T_module_capability_ru_capabilities v_ru_capabilities;
    dlq_hdr_t v_band_capabilities;
} y_o_ran_module_cap_T_module_capability;

/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_get
*
* Get database object callback for choice compression-format
* Path: /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported/compression-format
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_compression_format_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_get
*
* Get database object callback for list compression-method-supported
* Path: /module-capability/ru-capabilities/format-of-iq-sample/compression-method-supported
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_ru_capabilities_format_of_iq_sample_compression_method_supported_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_ru_capabilities_format_of_iq_sample_get
*
* Get database object callback for container format-of-iq-sample
* Path: /module-capability/ru-capabilities/format-of-iq-sample
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_ru_capabilities_format_of_iq_sample_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_ru_capabilities_ul_mixed_num_required_guard_rbs_get
*
* Get database object callback for list ul-mixed-num-required-guard-rbs
* Path: /module-capability/ru-capabilities/ul-mixed-num-required-guard-rbs
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_ru_capabilities_ul_mixed_num_required_guard_rbs_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_module_capability_ru_capabilities_ul_mixed_num_required_guard_rbs_scs_a,
    boolean scs_a_fixed,
    boolean scs_a_present,
    const xmlChar *k_module_capability_ru_capabilities_ul_mixed_num_required_guard_rbs_scs_b,
    boolean scs_b_fixed,
    boolean scs_b_present);

/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_ru_capabilities_dl_mixed_num_required_guard_rbs_get
*
* Get database object callback for list dl-mixed-num-required-guard-rbs
* Path: /module-capability/ru-capabilities/dl-mixed-num-required-guard-rbs
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_ru_capabilities_dl_mixed_num_required_guard_rbs_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_module_capability_ru_capabilities_dl_mixed_num_required_guard_rbs_scs_a,
    boolean scs_a_fixed,
    boolean scs_a_present,
    const xmlChar *k_module_capability_ru_capabilities_dl_mixed_num_required_guard_rbs_scs_b,
    boolean scs_b_fixed,
    boolean scs_b_present);

/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_ru_capabilities_get
*
* Get database object callback for container ru-capabilities
* Path: /module-capability/ru-capabilities
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_ru_capabilities_get (
    getcb_get2_t *get2cb);


#ifdef u_o_ran_module_cap_F_LAA
/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_band_capabilities_sub_band_info_sub_band_frequency_ranges_get
*
* Get database object callback for list sub-band-frequency-ranges
* Path: /module-capability/band-capabilities/sub-band-info/sub-band-frequency-ranges
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_band_capabilities_sub_band_info_sub_band_frequency_ranges_get (
    getcb_get2_t *get2cb,
    uint16 k_module_capability_band_capabilities_band_number,
    const xmlChar *k_module_capability_band_capabilities_sub_band_info_sub_band_frequency_ranges_sub_band,
    boolean sub_band_fixed,
    boolean sub_band_present);

/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_band_capabilities_sub_band_info_get
*
* Get database object callback for container sub-band-info
* Path: /module-capability/band-capabilities/sub-band-info
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_band_capabilities_sub_band_info_get (
    getcb_get2_t *get2cb,
    uint16 k_module_capability_band_capabilities_band_number);

#endif /* u_o_ran_module_cap_F_LAA */
/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_band_capabilities_get
*
* Get database object callback for list band-capabilities
* Path: /module-capability/band-capabilities
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_band_capabilities_get (
    getcb_get2_t *get2cb,
    uint16 k_module_capability_band_capabilities_band_number,
    boolean band_number_fixed,
    boolean band_number_present);

/********************************************************************
* FUNCTION u_o_ran_module_cap_module_capability_get
*
* Get database object callback for container module-capability
* Path: /module-capability
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_module_capability_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_module_cap_init
*
* initialize the o-ran-module-cap server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_module_cap_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_module_cap_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_module_cap_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_module_cap_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
