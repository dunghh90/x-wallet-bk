
#ifndef _H_u_o_ran_sync
#define _H_u_o_ran_sync
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-sync
    revision 2019-02-04
    namespace urn:o-ran:sync:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:30Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-sync.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Feature o-ran-sync:GNSS
 * Comment out to disable */
#define u_o_ran_sync_F_GNSS 1

/* Feature o-ran-sync:ANTI-JAM
 * Comment out to disable */
#define u_o_ran_sync_F_ANTI_JAM 1



/* list /sync/sync-status/supported-reference-types */
typedef struct y_o_ran_sync_T_sync_sync_status_supported_reference_types_ {
    dlq_hdr_t qhdr;
    xmlChar *v_item;
} y_o_ran_sync_T_sync_sync_status_supported_reference_types;

/* container /sync/sync-status */
typedef struct y_o_ran_sync_T_sync_sync_status_ {
    xmlChar *v_sync_state;
    dlq_hdr_t v_supported_reference_types;
} y_o_ran_sync_T_sync_sync_status;

/* container /sync/sync-capability */
typedef struct y_o_ran_sync_T_sync_sync_capability_ {
    xmlChar *v_sync_t_tsc;
} y_o_ran_sync_T_sync_sync_capability;

/* list /sync/ptp-config/accepted-clock-classes */
typedef struct y_o_ran_sync_T_sync_ptp_config_accepted_clock_classes_ {
    dlq_hdr_t qhdr;
    uint8 v_clock_classes;
} y_o_ran_sync_T_sync_ptp_config_accepted_clock_classes;

/* container /sync/ptp-config/g-8275-1-config */
typedef struct y_o_ran_sync_T_sync_ptp_config_g_8275_1_config_ {
    xmlChar *v_multicast_mac_address;
    int16 v_delay_asymmetry;
} y_o_ran_sync_T_sync_ptp_config_g_8275_1_config;

/* list /sync/ptp-config/g-8275-2-config/master-ip-configuration */
typedef struct y_o_ran_sync_T_sync_ptp_config_g_8275_2_config_master_ip_configuration_ {
    dlq_hdr_t qhdr;
    uint8 v_local_priority;
    xmlChar *v_ip_address;
} y_o_ran_sync_T_sync_ptp_config_g_8275_2_config_master_ip_configuration;

/* container /sync/ptp-config/g-8275-2-config */
typedef struct y_o_ran_sync_T_sync_ptp_config_g_8275_2_config_ {
    xmlChar *v_local_ip_port;
    dlq_hdr_t v_master_ip_configuration;
    int8 v_log_inter_sync_period;
    int8 v_log_inter_announce_period;
} y_o_ran_sync_T_sync_ptp_config_g_8275_2_config;

/* container /sync/ptp-config */
typedef struct y_o_ran_sync_T_sync_ptp_config_ {
    uint8 v_domain_number;
    dlq_hdr_t v_accepted_clock_classes;
    xmlChar *v_ptp_profile;
    y_o_ran_sync_T_sync_ptp_config_g_8275_1_config v_g_8275_1_config;
    y_o_ran_sync_T_sync_ptp_config_g_8275_2_config v_g_8275_2_config;
} y_o_ran_sync_T_sync_ptp_config;

/* list /sync/ptp-status/sources */
typedef struct y_o_ran_sync_T_sync_ptp_status_sources_ {
    dlq_hdr_t qhdr;
    xmlChar *v_local_port_number;
    xmlChar *v_state;
    boolean v_two_step_flag;
    boolean v_leap61;
    boolean v_leap59;
    boolean v_current_utc_offset_valid;
    boolean v_ptp_timescale;
    boolean v_time_traceable;
    boolean v_frequency_traceable;
    xmlChar *v_source_clock_identity;
    uint16 v_source_port_number;
    int16 v_current_utc_offset;
    uint8 v_priority1;
    uint8 v_clock_class;
    uint8 v_clock_accuracy;
    uint16 v_offset_scaled_log_variance;
    uint8 v_priority2;
    xmlChar *v_grandmaster_clock_identity;
    uint16 v_steps_removed;
    uint8 v_time_source;
} y_o_ran_sync_T_sync_ptp_status_sources;

/* container /sync/ptp-status */
typedef struct y_o_ran_sync_T_sync_ptp_status_ {
    uint8 v_reporting_period;
    xmlChar *v_lock_state;
    uint8 v_clock_class;
    xmlChar *v_clock_identity;
    boolean v_partial_timing_supported;
    dlq_hdr_t v_sources;
} y_o_ran_sync_T_sync_ptp_status;

/* leaf-list /sync/synce-config/acceptance-list-of-ssm */
typedef struct y_o_ran_sync_T_sync_synce_config_acceptance_list_of_ssm_ {
    dlq_hdr_t qhdr;
    xmlChar *v_acceptance_list_of_ssm;
} y_o_ran_sync_T_sync_synce_config_acceptance_list_of_ssm;

/* container /sync/synce-config */
typedef struct y_o_ran_sync_T_sync_synce_config_ {
    dlq_hdr_t v_acceptance_list_of_ssm;
    uint16 v_ssm_timeout;
} y_o_ran_sync_T_sync_synce_config;

/* list /sync/synce-status/sources */
typedef struct y_o_ran_sync_T_sync_synce_status_sources_ {
    dlq_hdr_t qhdr;
    xmlChar *v_local_port_number;
    xmlChar *v_state;
    uint8 v_quality_level;
} y_o_ran_sync_T_sync_synce_status_sources;

/* container /sync/synce-status */
typedef struct y_o_ran_sync_T_sync_synce_status_ {
    uint8 v_reporting_period;
    xmlChar *v_lock_state;
    dlq_hdr_t v_sources;
} y_o_ran_sync_T_sync_synce_status;

/* leaf-list /sync/gnss-config/satellite-constelation-list */
typedef struct y_o_ran_sync_T_sync_gnss_config_satellite_constelation_list_ {
    dlq_hdr_t qhdr;
    xmlChar *v_satellite_constelation_list;
} y_o_ran_sync_T_sync_gnss_config_satellite_constelation_list;


#ifdef u_o_ran_sync_F_GNSS
/* container /sync/gnss-config */
typedef struct y_o_ran_sync_T_sync_gnss_config_ {
    boolean v_enable;
    dlq_hdr_t v_satellite_constelation_list;
    xmlChar *v_polarity;
    uint16 v_cable_delay;

#ifdef u_o_ran_sync_F_ANTI_JAM
    boolean v_anti_jam_enable;
#endif /* u_o_ran_sync_F_ANTI_JAM */
} y_o_ran_sync_T_sync_gnss_config;
#endif /* u_o_ran_sync_F_GNSS */

/* container /sync/gnss-status/gnss-data/location */
typedef struct y_o_ran_sync_T_sync_gnss_status_gnss_data_location_ {
    int64 v_altitude;
    int64 v_latitude;
    int64 v_longitude;
} y_o_ran_sync_T_sync_gnss_status_gnss_data_location;

/* container /sync/gnss-status/gnss-data */
typedef struct y_o_ran_sync_T_sync_gnss_status_gnss_data_ {
    uint8 v_satellites_tracked;
    y_o_ran_sync_T_sync_gnss_status_gnss_data_location v_location;
} y_o_ran_sync_T_sync_gnss_status_gnss_data;


#ifdef u_o_ran_sync_F_GNSS
/* container /sync/gnss-status */
typedef struct y_o_ran_sync_T_sync_gnss_status_ {
    uint8 v_reporting_period;
    xmlChar *v_name;
    xmlChar *v_gnss_sync_status;
    y_o_ran_sync_T_sync_gnss_status_gnss_data v_gnss_data;
} y_o_ran_sync_T_sync_gnss_status;
#endif /* u_o_ran_sync_F_GNSS */

/* container /sync */
typedef struct y_o_ran_sync_T_sync_ {
    y_o_ran_sync_T_sync_sync_status v_sync_status;
    y_o_ran_sync_T_sync_sync_capability v_sync_capability;
    y_o_ran_sync_T_sync_ptp_config v_ptp_config;
    y_o_ran_sync_T_sync_ptp_status v_ptp_status;
    y_o_ran_sync_T_sync_synce_config v_synce_config;
    y_o_ran_sync_T_sync_synce_status v_synce_status;

#ifdef u_o_ran_sync_F_GNSS
    y_o_ran_sync_T_sync_gnss_config v_gnss_config;
#endif /* u_o_ran_sync_F_GNSS */

#ifdef u_o_ran_sync_F_GNSS
    y_o_ran_sync_T_sync_gnss_status v_gnss_status;
#endif /* u_o_ran_sync_F_GNSS */
} y_o_ran_sync_T_sync;

/* notification /synchronization-state-change */
typedef struct y_o_ran_sync_T_synchronization_state_change_ {
    xmlChar *v_sync_state;
} y_o_ran_sync_T_synchronization_state_change;

/* notification /ptp-state-change */
typedef struct y_o_ran_sync_T_ptp_state_change_ {
    xmlChar *v_ptp_state;
} y_o_ran_sync_T_ptp_state_change;

/* notification /synce-state-change */
typedef struct y_o_ran_sync_T_synce_state_change_ {
    xmlChar *v_synce_state;
} y_o_ran_sync_T_synce_state_change;


#ifdef u_o_ran_sync_F_GNSS
/* notification /gnss-state-change */
typedef struct y_o_ran_sync_T_gnss_state_change_ {
    xmlChar *v_gnss_state;
} y_o_ran_sync_T_gnss_state_change;
#endif /* u_o_ran_sync_F_GNSS */

/********************************************************************
* FUNCTION u_o_ran_sync_sync_sync_status_supported_reference_types_get
*
* Get database object callback for list supported-reference-types
* Path: /sync/sync-status/supported-reference-types
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_sync_status_supported_reference_types_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_sync_sync_status_supported_reference_types_item,
    boolean item_fixed,
    boolean item_present);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_sync_status_get
*
* Get database object callback for container sync-status
* Path: /sync/sync-status
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_sync_status_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_sync_capability_get
*
* Get database object callback for container sync-capability
* Path: /sync/sync-capability
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_sync_capability_get (
    getcb_get2_t *get2cb);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_domain_number_edit
*
* Edit database object callback
* Path: /sync/ptp-config/domain-number
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_domain_number_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_accepted_clock_classes_edit
*
* Edit database object callback
* Path: /sync/ptp-config/accepted-clock-classes
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_accepted_clock_classes_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint8 k_sync_ptp_config_accepted_clock_classes_clock_classes);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_ptp_profile_edit
*
* Edit database object callback
* Path: /sync/ptp-config/ptp-profile
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_ptp_profile_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_1_config_multicast_mac_address_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-1-config/multicast-mac-address
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_1_config_multicast_mac_address_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_1_config_delay_asymmetry_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-1-config/delay-asymmetry
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_1_config_delay_asymmetry_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_1_config_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-1-config
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_1_config_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_2_config_local_ip_port_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-2-config/local-ip-port
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_2_config_local_ip_port_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_2_config_master_ip_configuration_ip_address_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-2-config/master-ip-configuration/ip-address
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_2_config_master_ip_configuration_ip_address_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint8 k_sync_ptp_config_g_8275_2_config_master_ip_configuration_local_priority);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_2_config_master_ip_configuration_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-2-config/master-ip-configuration
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_2_config_master_ip_configuration_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint8 k_sync_ptp_config_g_8275_2_config_master_ip_configuration_local_priority);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_2_config_log_inter_sync_period_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-2-config/log-inter-sync-period
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_2_config_log_inter_sync_period_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_2_config_log_inter_announce_period_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-2-config/log-inter-announce-period
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_2_config_log_inter_announce_period_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_g_8275_2_config_edit
*
* Edit database object callback
* Path: /sync/ptp-config/g-8275-2-config
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_g_8275_2_config_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_config_edit
*
* Edit database object callback
* Path: /sync/ptp-config
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_config_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_status_reporting_period_edit
*
* Edit database object callback
* Path: /sync/ptp-status/reporting-period
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_status_reporting_period_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_status_lock_state_get
*
* Get database object callback for leaf lock-state
* Path: /sync/ptp-status/lock-state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_status_lock_state_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_status_clock_class_get
*
* Get database object callback for leaf clock-class
* Path: /sync/ptp-status/clock-class
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_status_clock_class_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_status_clock_identity_get
*
* Get database object callback for leaf clock-identity
* Path: /sync/ptp-status/clock-identity
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_status_clock_identity_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_status_partial_timing_supported_get
*
* Get database object callback for leaf partial-timing-supported
* Path: /sync/ptp-status/partial-timing-supported
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_status_partial_timing_supported_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_status_sources_get
*
* Get database object callback for list sources
* Path: /sync/ptp-status/sources
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_status_sources_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_sync_ptp_status_sources_local_port_number,
    boolean local_port_number_fixed,
    boolean local_port_number_present);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_ptp_status_edit
*
* Edit database object callback
* Path: /sync/ptp-status
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_ptp_status_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_synce_config_acceptance_list_of_ssm_edit
*
* Edit database object callback
* Path: /sync/synce-config/acceptance-list-of-ssm
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_synce_config_acceptance_list_of_ssm_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_synce_config_ssm_timeout_edit
*
* Edit database object callback
* Path: /sync/synce-config/ssm-timeout
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_synce_config_ssm_timeout_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_synce_config_edit
*
* Edit database object callback
* Path: /sync/synce-config
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_synce_config_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_synce_status_reporting_period_edit
*
* Edit database object callback
* Path: /sync/synce-status/reporting-period
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_synce_status_reporting_period_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_synce_status_lock_state_get
*
* Get database object callback for leaf lock-state
* Path: /sync/synce-status/lock-state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_synce_status_lock_state_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_synce_status_sources_get
*
* Get database object callback for list sources
* Path: /sync/synce-status/sources
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_synce_status_sources_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_sync_synce_status_sources_local_port_number,
    boolean local_port_number_fixed,
    boolean local_port_number_present);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_synce_status_edit
*
* Edit database object callback
* Path: /sync/synce-status
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_synce_status_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


#ifdef u_o_ran_sync_F_GNSS

/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_config_enable_edit
*
* Edit database object callback
* Path: /sync/gnss-config/enable
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_config_enable_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_config_satellite_constelation_list_edit
*
* Edit database object callback
* Path: /sync/gnss-config/satellite-constelation-list
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_config_satellite_constelation_list_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_config_polarity_edit
*
* Edit database object callback
* Path: /sync/gnss-config/polarity
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_config_polarity_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_config_cable_delay_edit
*
* Edit database object callback
* Path: /sync/gnss-config/cable-delay
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_config_cable_delay_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


#ifdef u_o_ran_sync_F_ANTI_JAM
/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_config_anti_jam_enable_edit
*
* Edit database object callback
* Path: /sync/gnss-config/anti-jam-enable
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_config_anti_jam_enable_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

#endif /* u_o_ran_sync_F_ANTI_JAM */
/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_config_edit
*
* Edit database object callback
* Path: /sync/gnss-config
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_config_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

#endif /* u_o_ran_sync_F_GNSS */

#ifdef u_o_ran_sync_F_GNSS

/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_status_reporting_period_edit
*
* Edit database object callback
* Path: /sync/gnss-status/reporting-period
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_status_reporting_period_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_status_name_get
*
* Get database object callback for leaf name
* Path: /sync/gnss-status/name
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_status_name_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_status_gnss_sync_status_get
*
* Get database object callback for leaf gnss-sync-status
* Path: /sync/gnss-status/gnss-sync-status
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_status_gnss_sync_status_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_status_gnss_data_location_get
*
* Get database object callback for container location
* Path: /sync/gnss-status/gnss-data/location
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_status_gnss_data_location_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_status_gnss_data_get
*
* Get database object callback for container gnss-data
* Path: /sync/gnss-status/gnss-data
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_status_gnss_data_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_sync_sync_gnss_status_edit
*
* Edit database object callback
* Path: /sync/gnss-status
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_gnss_status_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

#endif /* u_o_ran_sync_F_GNSS */

/********************************************************************
* FUNCTION u_o_ran_sync_sync_edit
*
* Edit database object callback
* Path: /sync
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_sync_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_sync_synchronization_state_change_send
*
* Send a u_o_ran_sync_synchronization_state_change notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_sync_synchronization_state_change_send (
    const xmlChar *v_sync_state);


/********************************************************************
* FUNCTION u_o_ran_sync_ptp_state_change_send
*
* Send a u_o_ran_sync_ptp_state_change notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_sync_ptp_state_change_send (
    const xmlChar *v_ptp_state);


/********************************************************************
* FUNCTION u_o_ran_sync_synce_state_change_send
*
* Send a u_o_ran_sync_synce_state_change notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_sync_synce_state_change_send (
    const xmlChar *v_synce_state);


#ifdef u_o_ran_sync_F_GNSS
/********************************************************************
* FUNCTION u_o_ran_sync_gnss_state_change_send
*
* Send a u_o_ran_sync_gnss_state_change notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_sync_gnss_state_change_send (
    const xmlChar *v_gnss_state);

#endif /* u_o_ran_sync_F_GNSS */
/********************************************************************
* FUNCTION u_o_ran_sync_init
*
* initialize the o-ran-sync server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_sync_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_sync_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_sync_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_sync_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
