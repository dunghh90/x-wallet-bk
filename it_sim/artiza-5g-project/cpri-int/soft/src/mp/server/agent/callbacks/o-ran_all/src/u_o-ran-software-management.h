
#ifndef _H_u_o_ran_software_management
#define _H_u_o_ran_software_management
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-software-management
    revision 2019-02-04
    namespace urn:o-ran:software-management:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "agt_rpc.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-software-management.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif

/* list /software-inventory/software-slot/files */
typedef struct y_o_ran_software_management_T_software_inventory_software_slot_files_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    xmlChar *v_version;
    xmlChar *v_local_path;
    xmlChar *v_integrity;
} y_o_ran_software_management_T_software_inventory_software_slot_files;

/* list /software-inventory/software-slot */
typedef struct y_o_ran_software_management_T_software_inventory_software_slot_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    xmlChar *v_status;
    boolean v_active;
    boolean v_running;
    xmlChar *v_access;
    xmlChar *v_product_code;
    xmlChar *v_vendor_code;
    xmlChar *v_build_id;
    xmlChar *v_build_name;
    xmlChar *v_build_version;
    dlq_hdr_t v_files;
} y_o_ran_software_management_T_software_inventory_software_slot;

/* container /software-inventory */
typedef struct y_o_ran_software_management_T_software_inventory_ {
    dlq_hdr_t v_software_slot;
} y_o_ran_software_management_T_software_inventory;

/* container /software-download/input/credentials/password/password */
typedef struct y_o_ran_software_management_T_software_download_input_credentials_password_password_ {
    xmlChar *v_password;
} y_o_ran_software_management_T_software_download_input_credentials_password_password;

/* case /software-download/input/credentials/password */
typedef struct y_o_ran_software_management_T_software_download_input_credentials_password_ {
    y_o_ran_software_management_T_software_download_input_credentials_password_password v_password;
} y_o_ran_software_management_T_software_download_input_credentials_password;

/* container /software-download/input/credentials/certificate/certificate */
typedef struct y_o_ran_software_management_T_software_download_input_credentials_certificate_certificate_ {
} y_o_ran_software_management_T_software_download_input_credentials_certificate_certificate;

/* case /software-download/input/credentials/certificate */
typedef struct y_o_ran_software_management_T_software_download_input_credentials_certificate_ {
    y_o_ran_software_management_T_software_download_input_credentials_certificate_certificate v_certificate;
} y_o_ran_software_management_T_software_download_input_credentials_certificate;

/* choice /software-download/input/credentials */
typedef union y_o_ran_software_management_T_software_download_input_credentials_ {
    y_o_ran_software_management_T_software_download_input_credentials_password v_password;
    y_o_ran_software_management_T_software_download_input_credentials_certificate v_certificate;
} y_o_ran_software_management_T_software_download_input_credentials;

/* container /software-download/input */
typedef struct y_o_ran_software_management_T_software_download_input_ {
    xmlChar *v_remote_file_path;
    y_o_ran_software_management_T_software_download_input_credentials v_credentials;
} y_o_ran_software_management_T_software_download_input;

/* container /software-download/output */
typedef struct y_o_ran_software_management_T_software_download_output_ {
    xmlChar *v_status;
    xmlChar *v_error_message;
    int32 v_notification_timeout;
} y_o_ran_software_management_T_software_download_output;

/* rpc /software-download */
typedef struct y_o_ran_software_management_T_software_download_ {
    y_o_ran_software_management_T_software_download_input v_input;
    y_o_ran_software_management_T_software_download_output v_output;
} y_o_ran_software_management_T_software_download;

/* leaf-list /software-install/input/file-names */
typedef struct y_o_ran_software_management_T_software_install_input_file_names_ {
    dlq_hdr_t qhdr;
    xmlChar *v_file_names;
} y_o_ran_software_management_T_software_install_input_file_names;

/* container /software-install/input */
typedef struct y_o_ran_software_management_T_software_install_input_ {
    xmlChar *v_slot_name;
    dlq_hdr_t v_file_names;
} y_o_ran_software_management_T_software_install_input;

/* container /software-install/output */
typedef struct y_o_ran_software_management_T_software_install_output_ {
    xmlChar *v_status;
    xmlChar *v_error_message;
} y_o_ran_software_management_T_software_install_output;

/* rpc /software-install */
typedef struct y_o_ran_software_management_T_software_install_ {
    y_o_ran_software_management_T_software_install_input v_input;
    y_o_ran_software_management_T_software_install_output v_output;
} y_o_ran_software_management_T_software_install;

/* container /software-activate/input */
typedef struct y_o_ran_software_management_T_software_activate_input_ {
    xmlChar *v_slot_name;
} y_o_ran_software_management_T_software_activate_input;

/* container /software-activate/output */
typedef struct y_o_ran_software_management_T_software_activate_output_ {
    xmlChar *v_status;
    xmlChar *v_error_message;
    int32 v_notification_timeout;
} y_o_ran_software_management_T_software_activate_output;

/* rpc /software-activate */
typedef struct y_o_ran_software_management_T_software_activate_ {
    y_o_ran_software_management_T_software_activate_input v_input;
    y_o_ran_software_management_T_software_activate_output v_output;
} y_o_ran_software_management_T_software_activate;

/* notification /download-event */
typedef struct y_o_ran_software_management_T_download_event_ {
    xmlChar *v_file_name;
    xmlChar *v_status;
    xmlChar *v_error_message;
} y_o_ran_software_management_T_download_event;

/* notification /install-event */
typedef struct y_o_ran_software_management_T_install_event_ {
    xmlChar *v_slot_name;
    xmlChar *v_status;
    xmlChar *v_error_message;
} y_o_ran_software_management_T_install_event;

/* notification /activation-event */
typedef struct y_o_ran_software_management_T_activation_event_ {
    xmlChar *v_slot_name;
    xmlChar *v_status;
    uint8 v_return_code;
    xmlChar *v_error_message;
} y_o_ran_software_management_T_activation_event;

/********************************************************************
* FUNCTION u_o_ran_software_management_software_inventory_software_slot_files_get
*
* Get database object callback for list files
* Path: /software-inventory/software-slot/files
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_inventory_software_slot_files_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_software_inventory_software_slot_name,
    const xmlChar *k_software_inventory_software_slot_files_name,
    boolean name_fixed,
    boolean name_present);

/********************************************************************
* FUNCTION u_o_ran_software_management_software_inventory_software_slot_get
*
* Get database object callback for list software-slot
* Path: /software-inventory/software-slot
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_inventory_software_slot_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_software_inventory_software_slot_name,
    boolean name_fixed,
    boolean name_present);

/********************************************************************
* FUNCTION u_o_ran_software_management_software_inventory_get
*
* Get database object callback for container software-inventory
* Path: /software-inventory
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_inventory_get (
    getcb_get2_t *get2cb);


/********************************************************************
* FUNCTION u_o_ran_software_management_software_download_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_download_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_software_management_software_download_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_download_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_software_management_software_install_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_install_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_software_management_software_install_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_install_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_software_management_software_activate_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_activate_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_software_management_software_activate_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_software_activate_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_software_management_download_event_send
*
* Send a u_o_ran_software_management_download_event notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_software_management_download_event_send (
    const xmlChar *v_file_name,
    const xmlChar *v_status,
    const xmlChar *v_error_message);


/********************************************************************
* FUNCTION u_o_ran_software_management_install_event_send
*
* Send a u_o_ran_software_management_install_event notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_software_management_install_event_send (
    const xmlChar *v_slot_name,
    const xmlChar *v_status,
    const xmlChar *v_error_message);


/********************************************************************
* FUNCTION u_o_ran_software_management_activation_event_send
*
* Send a u_o_ran_software_management_activation_event notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_software_management_activation_event_send (
    const xmlChar *v_slot_name,
    const xmlChar *v_status,
    uint8 v_return_code,
    const xmlChar *v_error_message);

/********************************************************************
* FUNCTION u_o_ran_software_management_init
*
* initialize the o-ran-software-management server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_software_management_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_software_management_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_software_management_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_software_management_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
