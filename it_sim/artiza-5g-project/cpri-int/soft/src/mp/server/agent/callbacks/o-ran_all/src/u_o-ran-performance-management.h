
#ifndef _H_u_o_ran_performance_management
#define _H_u_o_ran_performance_management
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-performance-management
    revision 2019-02-04
    namespace urn:o-ran:performance-management:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-performance-management.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Feature o-ran-performance-management:GRANULARITY-TRANSPORT-MEASUREMENT
 * Comment out to disable */
#define u_o_ran_performance_management_F_GRANULARITY_TRANSPORT_MEASUREMENT 1

/* Feature o-ran-performance-management:GRANULARITY-EAXC-ID-MEASUREMENT
 * Comment out to disable */
#define u_o_ran_performance_management_F_GRANULARITY_EAXC_ID_MEASUREMENT 1



/* container /performance-measurement-objects/remote-SFTP-uploads/credentials/password/password */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_password_password_ {
    xmlChar *v_password;
} y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_password_password;

/* case /performance-measurement-objects/remote-SFTP-uploads/credentials/password */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_password_ {
    y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_password_password v_password;
} y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_password;

/* container /performance-measurement-objects/remote-SFTP-uploads/credentials/certificate/certificate */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_certificate_certificate_ {
} y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_certificate_certificate;

/* case /performance-measurement-objects/remote-SFTP-uploads/credentials/certificate */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_certificate_ {
    y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_certificate_certificate v_certificate;
} y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_certificate;

/* choice /performance-measurement-objects/remote-SFTP-uploads/credentials */
typedef union y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_ {
    y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_password v_password;
    y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials_certificate v_certificate;
} y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials;

/* list /performance-measurement-objects/remote-SFTP-uploads */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_ {
    dlq_hdr_t qhdr;
    xmlChar *v_remote_SFTP_upload_path;
    y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads_credentials v_credentials;
} y_o_ran_performance_management_T_performance_measurement_objects_remote_SFTP_uploads;

/* leaf-list /performance-measurement-objects/transceiver-measurement-objects/report-info */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_report_info_ {
    dlq_hdr_t qhdr;
    xmlChar *v_report_info;
} y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_report_info;

/* container /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/min */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_min_ {
    int64 v_value;
    xmlChar *v_time;
} y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_min;

/* container /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/max */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_max_ {
    int64 v_value;
    xmlChar *v_time;
} y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_max;

/* container /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/first */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_first_ {
    int64 v_value;
    xmlChar *v_time;
} y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_first;

/* container /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/latest */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_latest_ {
    int64 v_value;
    xmlChar *v_time;
} y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_latest;

/* leaf-list /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/frequeny-table */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_frequeny_table_ {
    dlq_hdr_t qhdr;
    uint32 v_frequeny_table;
} y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_frequeny_table;

/* list /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_ {
    dlq_hdr_t qhdr;
    xmlChar *v_object_unit_id;
    y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_min v_min;
    y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_max v_max;
    y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_first v_first;
    y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_latest v_latest;
    dlq_hdr_t v_frequeny_table;
} y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result;

/* list /performance-measurement-objects/transceiver-measurement-objects */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects_ {
    dlq_hdr_t qhdr;
    xmlChar *v_measurement_object;
    boolean v_active;
    dlq_hdr_t v_report_info;
    xmlChar *v_object_unit;
    xmlChar *v_function;
    uint16 v_bin_count;
    int64 v_lower_bound;
    int64 v_upper_bound;
    dlq_hdr_t v_transceiver_measurement_result;
} y_o_ran_performance_management_T_performance_measurement_objects_transceiver_measurement_objects;

/* case /performance-measurement-objects/rx-window-measurement-objects/object-unit-id/RU */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_RU_ {
    xmlChar *v_name;
    uint64 v_count;
} y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_RU;

/* list /performance-measurement-objects/rx-window-measurement-objects/object-unit-id/TRANSPORT/tr-measured-result */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_TRANSPORT_tr_measured_result_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    uint64 v_count;
} y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_TRANSPORT_tr_measured_result;

/* case /performance-measurement-objects/rx-window-measurement-objects/object-unit-id/TRANSPORT */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_TRANSPORT_ {
    dlq_hdr_t v_tr_measured_result;
} y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_TRANSPORT;

/* list /performance-measurement-objects/rx-window-measurement-objects/object-unit-id/EAXC_ID/eaxc-measured-result */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_EAXC_ID_eaxc_measured_result_ {
    dlq_hdr_t qhdr;
    uint16 v_eaxc_id;
    uint64 v_count;
    xmlChar *v_transport_name;
} y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_EAXC_ID_eaxc_measured_result;

/* case /performance-measurement-objects/rx-window-measurement-objects/object-unit-id/EAXC_ID */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_EAXC_ID_ {
    dlq_hdr_t v_eaxc_measured_result;
} y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_EAXC_ID;

/* choice /performance-measurement-objects/rx-window-measurement-objects/object-unit-id */
typedef union y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_ {
    y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_RU v_RU;
    y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_TRANSPORT v_TRANSPORT;
    y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_EAXC_ID v_EAXC_ID;
} y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id;

/* list /performance-measurement-objects/rx-window-measurement-objects */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_ {
    dlq_hdr_t qhdr;
    xmlChar *v_measurement_object;
    boolean v_active;
    xmlChar *v_object_unit;
    xmlChar *v_report_info;
    y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects_object_unit_id v_object_unit_id;
} y_o_ran_performance_management_T_performance_measurement_objects_rx_window_measurement_objects;

/* container /performance-measurement-objects */
typedef struct y_o_ran_performance_management_T_performance_measurement_objects_ {
    boolean v_enable_SFTP_upload;
    boolean v_enable_random_file_upload;
    dlq_hdr_t v_remote_SFTP_uploads;
    uint16 v_transceiver_measurement_interval;
    uint16 v_rx_window_measurement_interval;
    uint16 v_notification_interval;
    uint16 v_file_upload_interval;
    uint16 v_max_bin_count;
    dlq_hdr_t v_transceiver_measurement_objects;
    dlq_hdr_t v_rx_window_measurement_objects;
} y_o_ran_performance_management_T_performance_measurement_objects;

/* container /measurement-result-stats/transceiver-stats/transceiver-measurement-result/min */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_min_ {
    int64 v_value;
    xmlChar *v_time;
} y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_min;

/* container /measurement-result-stats/transceiver-stats/transceiver-measurement-result/max */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_max_ {
    int64 v_value;
    xmlChar *v_time;
} y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_max;

/* container /measurement-result-stats/transceiver-stats/transceiver-measurement-result/first */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_first_ {
    int64 v_value;
    xmlChar *v_time;
} y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_first;

/* container /measurement-result-stats/transceiver-stats/transceiver-measurement-result/latest */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_latest_ {
    int64 v_value;
    xmlChar *v_time;
} y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_latest;

/* leaf-list /measurement-result-stats/transceiver-stats/transceiver-measurement-result/frequeny-table */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_frequeny_table_ {
    dlq_hdr_t qhdr;
    uint32 v_frequeny_table;
} y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_frequeny_table;

/* list /measurement-result-stats/transceiver-stats/transceiver-measurement-result */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_ {
    dlq_hdr_t qhdr;
    xmlChar *v_object_unit_id;
    y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_min v_min;
    y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_max v_max;
    y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_first v_first;
    y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result_latest v_latest;
    dlq_hdr_t v_frequeny_table;
} y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_transceiver_measurement_result;

/* list /measurement-result-stats/transceiver-stats */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats_ {
    dlq_hdr_t qhdr;
    xmlChar *v_measurement_object;
    xmlChar *v_start_time;
    xmlChar *v_end_time;
    dlq_hdr_t v_transceiver_measurement_result;
} y_o_ran_performance_management_T_measurement_result_stats_transceiver_stats;

/* case /measurement-result-stats/rx-window-stats/object-unit-id/RU */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_RU_ {
    xmlChar *v_name;
    uint64 v_count;
} y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_RU;

/* list /measurement-result-stats/rx-window-stats/object-unit-id/TRANSPORT/tr-measured-result */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_TRANSPORT_tr_measured_result_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    uint64 v_count;
} y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_TRANSPORT_tr_measured_result;

/* case /measurement-result-stats/rx-window-stats/object-unit-id/TRANSPORT */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_TRANSPORT_ {
    dlq_hdr_t v_tr_measured_result;
} y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_TRANSPORT;

/* list /measurement-result-stats/rx-window-stats/object-unit-id/EAXC_ID/eaxc-measured-result */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_EAXC_ID_eaxc_measured_result_ {
    dlq_hdr_t qhdr;
    uint16 v_eaxc_id;
    uint64 v_count;
    xmlChar *v_transport_name;
} y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_EAXC_ID_eaxc_measured_result;

/* case /measurement-result-stats/rx-window-stats/object-unit-id/EAXC_ID */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_EAXC_ID_ {
    dlq_hdr_t v_eaxc_measured_result;
} y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_EAXC_ID;

/* choice /measurement-result-stats/rx-window-stats/object-unit-id */
typedef union y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_ {
    y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_RU v_RU;
    y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_TRANSPORT v_TRANSPORT;
    y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id_EAXC_ID v_EAXC_ID;
} y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id;

/* list /measurement-result-stats/rx-window-stats */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_ {
    dlq_hdr_t qhdr;
    xmlChar *v_measurement_object;
    xmlChar *v_start_time;
    xmlChar *v_end_time;
    y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats_object_unit_id v_object_unit_id;
} y_o_ran_performance_management_T_measurement_result_stats_rx_window_stats;

/* notification /measurement-result-stats */
typedef struct y_o_ran_performance_management_T_measurement_result_stats_ {
    dlq_hdr_t v_transceiver_stats;
    dlq_hdr_t v_rx_window_stats;
} y_o_ran_performance_management_T_measurement_result_stats;


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_enable_SFTP_upload_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/enable-SFTP-upload
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_enable_SFTP_upload_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_enable_random_file_upload_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/enable-random-file-upload
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_enable_random_file_upload_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_remote_SFTP_uploads_credentials_password_password_password_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/remote-SFTP-uploads/credentials/password/password/password
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_remote_SFTP_uploads_credentials_password_password_password_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_remote_SFTP_uploads_remote_SFTP_upload_path);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_remote_SFTP_uploads_credentials_password_password_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/remote-SFTP-uploads/credentials/password/password
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_remote_SFTP_uploads_credentials_password_password_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_remote_SFTP_uploads_remote_SFTP_upload_path);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_remote_SFTP_uploads_credentials_certificate_certificate_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/remote-SFTP-uploads/credentials/certificate/certificate
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_remote_SFTP_uploads_credentials_certificate_certificate_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_remote_SFTP_uploads_remote_SFTP_upload_path);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_remote_SFTP_uploads_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/remote-SFTP-uploads
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_remote_SFTP_uploads_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_remote_SFTP_uploads_remote_SFTP_upload_path);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_interval_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-interval
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_interval_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_interval_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/rx-window-measurement-interval
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_interval_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_notification_interval_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/notification-interval
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_notification_interval_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_file_upload_interval_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/file-upload-interval
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_file_upload_interval_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_max_bin_count_get
*
* Get database object callback for leaf max-bin-count
* Path: /performance-measurement-objects/max-bin-count
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_max_bin_count_get (
    getcb_get2_t *get2cb);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_active_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-objects/active
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_active_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_report_info_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-objects/report-info
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_report_info_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_object_unit_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-objects/object-unit
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_object_unit_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_function_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-objects/function
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_function_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_bin_count_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-objects/bin-count
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_bin_count_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_lower_bound_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-objects/lower-bound
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_lower_bound_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_upper_bound_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-objects/upper-bound
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_upper_bound_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_min_get
*
* Get database object callback for container min
* Path: /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/min
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_min_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_object_unit_id);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_max_get
*
* Get database object callback for container max
* Path: /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/max
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_max_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_object_unit_id);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_first_get
*
* Get database object callback for container first
* Path: /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/first
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_first_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_object_unit_id);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_latest_get
*
* Get database object callback for container latest
* Path: /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result/latest
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_latest_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_object_unit_id);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_get
*
* Get database object callback for list transceiver-measurement-result
* Path: /performance-measurement-objects/transceiver-measurement-objects/transceiver-measurement-result
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_transceiver_measurement_result_object_unit_id,
    boolean object_unit_id_fixed,
    boolean object_unit_id_present);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/transceiver-measurement-objects
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_transceiver_measurement_objects_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_transceiver_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_active_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/rx-window-measurement-objects/active
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_active_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_rx_window_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_object_unit_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/rx-window-measurement-objects/object-unit
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_object_unit_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_rx_window_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_report_info_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/rx-window-measurement-objects/report-info
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_report_info_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_rx_window_measurement_objects_measurement_object);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_TRANSPORT_tr_measured_result_get
*
* Get database object callback for list tr-measured-result
* Path: /performance-measurement-objects/rx-window-measurement-objects/object-unit-id/TRANSPORT/tr-measured-result
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_TRANSPORT_tr_measured_result_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_performance_measurement_objects_rx_window_measurement_objects_measurement_object);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_EAXC_ID_eaxc_measured_result_get
*
* Get database object callback for list eaxc-measured-result
* Path: /performance-measurement-objects/rx-window-measurement-objects/object-unit-id/EAXC_ID/eaxc-measured-result
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_EAXC_ID_eaxc_measured_result_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_performance_measurement_objects_rx_window_measurement_objects_measurement_object);

/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_get
*
* Get database object callback for choice object-unit-id
* Path: /performance-measurement-objects/rx-window-measurement-objects/object-unit-id
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_object_unit_id_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_performance_measurement_objects_rx_window_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_edit
*
* Edit database object callback
* Path: /performance-measurement-objects/rx-window-measurement-objects
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_rx_window_measurement_objects_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_performance_measurement_objects_rx_window_measurement_objects_measurement_object);


/********************************************************************
* FUNCTION u_o_ran_performance_management_performance_measurement_objects_edit
*
* Edit database object callback
* Path: /performance-measurement-objects
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_performance_measurement_objects_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_performance_management_measurement_result_stats_send
*
* Send a u_o_ran_performance_management_measurement_result_stats notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_performance_management_measurement_result_stats_send (
    dlq_hdr_t *v_transceiver_stats,
    dlq_hdr_t *v_rx_window_stats);

/********************************************************************
* FUNCTION u_o_ran_performance_management_init
*
* initialize the o-ran-performance-management server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_performance_management_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_performance_management_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_performance_management_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_performance_management_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
