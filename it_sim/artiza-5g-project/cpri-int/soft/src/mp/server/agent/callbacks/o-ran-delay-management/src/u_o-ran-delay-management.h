
#ifndef _H_u_o_ran_delay_management
#define _H_u_o_ran_delay_management
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    module o-ran-delay-management
    revision 2019-02-04
    namespace urn:o-ran:delay:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:28Z
    CLI parameters:
        format uh
        indent 4
        module o-ran-delay-management
        output u_o-ran-delay-management.h
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-delay-management.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Feature o-ran-delay-management:ADAPTIVE-RU-PROFILE
 * Comment out to disable */
#define u_o_ran_delay_management_F_ADAPTIVE_RU_PROFILE 1



/* container /delay-management/bandwidth-scs-delay-state/ru-delay-profile */
typedef struct y_o_ran_delay_management_T_delay_management_bandwidth_scs_delay_state_ru_delay_profile_ {
    uint32 v_t2a_min_up;
    uint32 v_t2a_max_up;
    uint32 v_t2a_min_cp_dl;
    uint32 v_t2a_max_cp_dl;
    uint32 v_tcp_adv_dl;
    uint32 v_ta3_min;
    uint32 v_ta3_max;
    uint32 v_t2a_min_cp_ul;
    uint32 v_t2a_max_cp_ul;
} y_o_ran_delay_management_T_delay_management_bandwidth_scs_delay_state_ru_delay_profile;

/* list /delay-management/bandwidth-scs-delay-state */
typedef struct y_o_ran_delay_management_T_delay_management_bandwidth_scs_delay_state_ {
    dlq_hdr_t qhdr;
    uint32 v_bandwidth;
    uint32 v_subcarrier_spacing;
    y_o_ran_delay_management_T_delay_management_bandwidth_scs_delay_state_ru_delay_profile v_ru_delay_profile;
} y_o_ran_delay_management_T_delay_management_bandwidth_scs_delay_state;

/* container /delay-management/adaptive-delay-configuration/bandwidth-scs-delay-state/o-du-delay-profile */
typedef struct y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_ {
    uint32 v_t1a_max_up;
    uint32 v_tx_max;
    uint32 v_ta4_max;
    uint32 v_rx_max;
} y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile;

/* list /delay-management/adaptive-delay-configuration/bandwidth-scs-delay-state */
typedef struct y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_ {
    dlq_hdr_t qhdr;
    uint32 v_bandwidth;
    uint32 v_subcarrier_spacing;
    y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile v_o_du_delay_profile;
} y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state;

/* container /delay-management/adaptive-delay-configuration/transport-delay */
typedef struct y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_transport_delay_ {
    uint32 v_t12_min;
    uint32 v_t34_min;
    uint32 v_t12_max;
    uint32 v_t34_max;
} y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_transport_delay;


#ifdef u_o_ran_delay_management_F_ADAPTIVE_RU_PROFILE
/* container /delay-management/adaptive-delay-configuration */
typedef struct y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_ {
    dlq_hdr_t v_bandwidth_scs_delay_state;
    y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration_transport_delay v_transport_delay;
} y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration;
#endif /* u_o_ran_delay_management_F_ADAPTIVE_RU_PROFILE */

/* container /delay-management */
typedef struct y_o_ran_delay_management_T_delay_management_ {
    dlq_hdr_t v_bandwidth_scs_delay_state;

#ifdef u_o_ran_delay_management_F_ADAPTIVE_RU_PROFILE
    y_o_ran_delay_management_T_delay_management_adaptive_delay_configuration v_adaptive_delay_configuration;
#endif /* u_o_ran_delay_management_F_ADAPTIVE_RU_PROFILE */
} y_o_ran_delay_management_T_delay_management;

/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_bandwidth_scs_delay_state_ru_delay_profile_get
*
* Get database object callback for container ru-delay-profile
* Path: /delay-management/bandwidth-scs-delay-state/ru-delay-profile
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_bandwidth_scs_delay_state_ru_delay_profile_get (
    getcb_get2_t *get2cb,
    uint32 k_delay_management_bandwidth_scs_delay_state_bandwidth,
    uint32 k_delay_management_bandwidth_scs_delay_state_subcarrier_spacing);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_bandwidth_scs_delay_state_edit
*
* Edit database object callback
* Path: /delay-management/bandwidth-scs-delay-state
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_bandwidth_scs_delay_state_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint32 k_delay_management_bandwidth_scs_delay_state_bandwidth,
    uint32 k_delay_management_bandwidth_scs_delay_state_subcarrier_spacing);


#ifdef u_o_ran_delay_management_F_ADAPTIVE_RU_PROFILE

/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_t1a_max_up_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/bandwidth-scs-delay-state/o-du-delay-profile/t1a-max-up
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_t1a_max_up_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_bandwidth,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_subcarrier_spacing);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_tx_max_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/bandwidth-scs-delay-state/o-du-delay-profile/tx-max
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_tx_max_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_bandwidth,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_subcarrier_spacing);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_ta4_max_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/bandwidth-scs-delay-state/o-du-delay-profile/ta4-max
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_ta4_max_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_bandwidth,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_subcarrier_spacing);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_rx_max_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/bandwidth-scs-delay-state/o-du-delay-profile/rx-max
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_rx_max_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_bandwidth,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_subcarrier_spacing);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/bandwidth-scs-delay-state/o-du-delay-profile
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_o_du_delay_profile_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_bandwidth,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_subcarrier_spacing);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/bandwidth-scs-delay-state
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_bandwidth,
    uint32 k_delay_management_adaptive_delay_configuration_bandwidth_scs_delay_state_subcarrier_spacing);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_t12_min_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/transport-delay/t12-min
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_t12_min_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_t34_min_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/transport-delay/t34-min
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_t34_min_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_t12_max_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/transport-delay/t12-max
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_t12_max_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_t34_max_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/transport-delay/t34-max
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_t34_max_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration/transport-delay
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_transport_delay_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_adaptive_delay_configuration_edit
*
* Edit database object callback
* Path: /delay-management/adaptive-delay-configuration
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_adaptive_delay_configuration_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

#endif /* u_o_ran_delay_management_F_ADAPTIVE_RU_PROFILE */

/********************************************************************
* FUNCTION u_o_ran_delay_management_delay_management_edit
*
* Edit database object callback
* Path: /delay-management
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_delay_management_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_delay_management_init
*
* initialize the o-ran-delay-management server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_delay_management_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_delay_management_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_delay_management_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_delay_management_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
