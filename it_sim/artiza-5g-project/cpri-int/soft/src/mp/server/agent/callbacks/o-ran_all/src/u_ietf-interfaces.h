
#ifndef _H_u_ietf_interfaces
#define _H_u_ietf_interfaces
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module ietf-interfaces
    revision 2018-02-20
    namespace urn:ietf:params:xml:ns:yang:ietf-interfaces
    organization IETF NETMOD (Network Modeling) Working Group
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_ietf-interfaces.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Feature ietf-interfaces:arbitrary-names
 * Comment out to disable */
#define u_ietf_interfaces_F_arbitrary_names 1

/* Feature ietf-interfaces:pre-provisioning
 * Comment out to disable */
#define u_ietf_interfaces_F_pre_provisioning 1

/* Feature ietf-interfaces:if-mib
 * Comment out to disable */
#define u_ietf_interfaces_F_if_mib 1



/* leaf-list /interfaces/interface/higher-layer-if */
typedef struct y_ietf_interfaces_T_interfaces_interface_higher_layer_if_ {
    dlq_hdr_t qhdr;
    xmlChar *v_higher_layer_if;
} y_ietf_interfaces_T_interfaces_interface_higher_layer_if;

/* leaf-list /interfaces/interface/lower-layer-if */
typedef struct y_ietf_interfaces_T_interfaces_interface_lower_layer_if_ {
    dlq_hdr_t qhdr;
    xmlChar *v_lower_layer_if;
} y_ietf_interfaces_T_interfaces_interface_lower_layer_if;

/* container /interfaces/interface/statistics */
typedef struct y_ietf_interfaces_T_interfaces_interface_statistics_ {
    xmlChar *v_discontinuity_time;
    uint64 v_in_octets;
    uint64 v_in_unicast_pkts;
    uint64 v_in_broadcast_pkts;
    uint64 v_in_multicast_pkts;
    uint32 v_in_discards;
    uint32 v_in_errors;
    uint32 v_in_unknown_protos;
    uint64 v_out_octets;
    uint64 v_out_unicast_pkts;
    uint64 v_out_broadcast_pkts;
    uint64 v_out_multicast_pkts;
    uint32 v_out_discards;
    uint32 v_out_errors;
} y_ietf_interfaces_T_interfaces_interface_statistics;

/* list /interfaces/interface */
typedef struct y_ietf_interfaces_T_interfaces_interface_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    xmlChar *v_description;
    val_idref_t *v_type;
    boolean v_enabled;

#ifdef u_ietf_interfaces_F_if_mib
    xmlChar *v_link_up_down_trap_enable;
#endif /* u_ietf_interfaces_F_if_mib */

#ifdef u_ietf_interfaces_F_if_mib
    xmlChar *v_admin_status;
#endif /* u_ietf_interfaces_F_if_mib */
    xmlChar *v_oper_status;
    xmlChar *v_last_change;

#ifdef u_ietf_interfaces_F_if_mib
    int32 v_if_index;
#endif /* u_ietf_interfaces_F_if_mib */
    xmlChar *v_phys_address;
    dlq_hdr_t v_higher_layer_if;
    dlq_hdr_t v_lower_layer_if;
    uint64 v_speed;
    y_ietf_interfaces_T_interfaces_interface_statistics v_statistics;
    // y_ietf_ip_T_interfaces_interface_ipv4 ietf_ip_ipv4;
    // y_ietf_ip_T_interfaces_interface_ipv6 ietf_ip_ipv6;
    uint16 o_ran_interfaces_l2_mtu;

#ifdef u_o_ran_interfaces_F_ALIASMAC_BASED_CU_PLANE
    dlq_hdr_t o_ran_interfaces_alias_macs;
#endif /* u_o_ran_interfaces_F_ALIASMAC_BASED_CU_PLANE */
    boolean o_ran_interfaces_vlan_tagging;
    // y_o_ran_interfaces_T_interfaces_interface_class_of_service o_ran_interfaces_class_of_service;
    xmlChar *o_ran_interfaces_base_interface;
    uint16 o_ran_interfaces_vlan_id;
    xmlChar *o_ran_interfaces_mac_address;
    // y_o_ran_interfaces_T_interfaces_interface_port_reference o_ran_interfaces_port_reference;
    xmlChar *o_ran_interfaces_last_cleared;
} y_ietf_interfaces_T_interfaces_interface;

/* container /interfaces */
typedef struct y_ietf_interfaces_T_interfaces_ {
    dlq_hdr_t v_interface;
} y_ietf_interfaces_T_interfaces;

/* leaf-list /interfaces-state/interface/higher-layer-if */
typedef struct y_ietf_interfaces_T_interfaces_state_interface_higher_layer_if_ {
    dlq_hdr_t qhdr;
    xmlChar *v_higher_layer_if;
} y_ietf_interfaces_T_interfaces_state_interface_higher_layer_if;

/* leaf-list /interfaces-state/interface/lower-layer-if */
typedef struct y_ietf_interfaces_T_interfaces_state_interface_lower_layer_if_ {
    dlq_hdr_t qhdr;
    xmlChar *v_lower_layer_if;
} y_ietf_interfaces_T_interfaces_state_interface_lower_layer_if;

/* container /interfaces-state/interface/statistics */
typedef struct y_ietf_interfaces_T_interfaces_state_interface_statistics_ {
    xmlChar *v_discontinuity_time;
    uint64 v_in_octets;
    uint64 v_in_unicast_pkts;
    uint64 v_in_broadcast_pkts;
    uint64 v_in_multicast_pkts;
    uint32 v_in_discards;
    uint32 v_in_errors;
    uint32 v_in_unknown_protos;
    uint64 v_out_octets;
    uint64 v_out_unicast_pkts;
    uint64 v_out_broadcast_pkts;
    uint64 v_out_multicast_pkts;
    uint32 v_out_discards;
    uint32 v_out_errors;
} y_ietf_interfaces_T_interfaces_state_interface_statistics;

/* list /interfaces-state/interface */
typedef struct y_ietf_interfaces_T_interfaces_state_interface_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    val_idref_t *v_type;

#ifdef u_ietf_interfaces_F_if_mib
    xmlChar *v_admin_status;
#endif /* u_ietf_interfaces_F_if_mib */
    xmlChar *v_oper_status;
    xmlChar *v_last_change;

#ifdef u_ietf_interfaces_F_if_mib
    int32 v_if_index;
#endif /* u_ietf_interfaces_F_if_mib */
    xmlChar *v_phys_address;
    dlq_hdr_t v_higher_layer_if;
    dlq_hdr_t v_lower_layer_if;
    uint64 v_speed;
    y_ietf_interfaces_T_interfaces_state_interface_statistics v_statistics;
    // y_ietf_ip_T_interfaces_state_interface_ipv4 ietf_ip_ipv4;
    // y_ietf_ip_T_interfaces_state_interface_ipv6 ietf_ip_ipv6;
} y_ietf_interfaces_T_interfaces_state_interface;

/* container /interfaces-state */
typedef struct y_ietf_interfaces_T_interfaces_state_ {
    dlq_hdr_t v_interface;
} y_ietf_interfaces_T_interfaces_state;


/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_description_edit
*
* Edit database object callback
* Path: /interfaces/interface/description
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_description_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_type_edit
*
* Edit database object callback
* Path: /interfaces/interface/type
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_type_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_enabled_edit
*
* Edit database object callback
* Path: /interfaces/interface/enabled
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_enabled_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


#ifdef u_ietf_interfaces_F_if_mib
/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_link_up_down_trap_enable_edit
*
* Edit database object callback
* Path: /interfaces/interface/link-up-down-trap-enable
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_link_up_down_trap_enable_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);

#endif /* u_ietf_interfaces_F_if_mib */

#ifdef u_ietf_interfaces_F_if_mib
/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_admin_status_get
*
* Get database object callback for leaf admin-status
* Path: /interfaces/interface/admin-status
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_admin_status_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);

#endif /* u_ietf_interfaces_F_if_mib */
/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_oper_status_get
*
* Get database object callback for leaf oper-status
* Path: /interfaces/interface/oper-status
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_oper_status_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);

/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_last_change_get
*
* Get database object callback for leaf last-change
* Path: /interfaces/interface/last-change
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_last_change_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);


#ifdef u_ietf_interfaces_F_if_mib
/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_if_index_get
*
* Get database object callback for leaf if-index
* Path: /interfaces/interface/if-index
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_if_index_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);

#endif /* u_ietf_interfaces_F_if_mib */
/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_phys_address_get
*
* Get database object callback for leaf phys-address
* Path: /interfaces/interface/phys-address
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_phys_address_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);

/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_higher_layer_if_get
*
* Get database object callback for leaf-list higher-layer-if
* Path: /interfaces/interface/higher-layer-if
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_higher_layer_if_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);

/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_lower_layer_if_get
*
* Get database object callback for leaf-list lower-layer-if
* Path: /interfaces/interface/lower-layer-if
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_lower_layer_if_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);

/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_speed_get
*
* Get database object callback for leaf speed
* Path: /interfaces/interface/speed
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_speed_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);

/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_statistics_get
*
* Get database object callback for container statistics
* Path: /interfaces/interface/statistics
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_statistics_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_interface_edit
*
* Edit database object callback
* Path: /interfaces/interface
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_interface_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_edit
*
* Edit database object callback
* Path: /interfaces
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_state_interface_statistics_get
*
* Get database object callback for container statistics
* Path: /interfaces-state/interface/statistics
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_state_interface_statistics_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_state_interface_name);

/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_state_interface_get
*
* Get database object callback for list interface
* Path: /interfaces-state/interface
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_state_interface_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_state_interface_name,
    boolean name_fixed,
    boolean name_present);

/********************************************************************
* FUNCTION u_ietf_interfaces_interfaces_state_get
*
* Get database object callback for container interfaces-state
* Path: /interfaces-state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_interfaces_state_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_ietf_interfaces_init
*
* initialize the ietf-interfaces server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_ietf_interfaces_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_interfaces_init2 (void);

/********************************************************************
* FUNCTION u_ietf_interfaces_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_ietf_interfaces_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
