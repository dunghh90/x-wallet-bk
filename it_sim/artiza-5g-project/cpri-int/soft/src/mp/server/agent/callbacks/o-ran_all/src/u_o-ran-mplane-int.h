
#ifndef _H_u_o_ran_mplane_int
#define _H_u_o_ran_mplane_int
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-mplane-int
    revision 2019-02-04
    namespace urn:o-ran:mplane-interfaces:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-mplane-int.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif

/* leaf-list /mplane-info/searchable-mplane-access-vlans-info/searchable-access-vlans */
typedef struct y_o_ran_mplane_int_T_mplane_info_searchable_mplane_access_vlans_info_searchable_access_vlans_ {
    dlq_hdr_t qhdr;
    uint16 v_searchable_access_vlans;
} y_o_ran_mplane_int_T_mplane_info_searchable_mplane_access_vlans_info_searchable_access_vlans;

/* container /mplane-info/searchable-mplane-access-vlans-info/vlan-range */
typedef struct y_o_ran_mplane_int_T_mplane_info_searchable_mplane_access_vlans_info_vlan_range_ {
    uint16 v_lowest_vlan_id;
    uint16 v_highest_vlan_id;
} y_o_ran_mplane_int_T_mplane_info_searchable_mplane_access_vlans_info_vlan_range;

/* container /mplane-info/searchable-mplane-access-vlans-info */
typedef struct y_o_ran_mplane_int_T_mplane_info_searchable_mplane_access_vlans_info_ {
    dlq_hdr_t v_searchable_access_vlans;
    y_o_ran_mplane_int_T_mplane_info_searchable_mplane_access_vlans_info_vlan_range v_vlan_range;
} y_o_ran_mplane_int_T_mplane_info_searchable_mplane_access_vlans_info;

/* list /mplane-info/m-plane-interfaces/m-plane-sub-interfaces/client-info/mplane-ipv4-info */
typedef struct y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv4_info_ {
    dlq_hdr_t qhdr;
    xmlChar *v_mplane_ipv4;
    uint16 v_port;
} y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv4_info;

/* list /mplane-info/m-plane-interfaces/m-plane-sub-interfaces/client-info/mplane-ipv6-info */
typedef struct y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv6_info_ {
    dlq_hdr_t qhdr;
    xmlChar *v_mplane_ipv6;
    uint16 v_port;
} y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv6_info;

/* leaf-list /mplane-info/m-plane-interfaces/m-plane-sub-interfaces/client-info/mplane-fqdn */
typedef struct y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_fqdn_ {
    dlq_hdr_t qhdr;
    xmlChar *v_mplane_fqdn;
} y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_fqdn;

/* container /mplane-info/m-plane-interfaces/m-plane-sub-interfaces/client-info */
typedef struct y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_ {
    dlq_hdr_t v_mplane_ipv4_info;
    dlq_hdr_t v_mplane_ipv6_info;
    dlq_hdr_t v_mplane_fqdn;
} y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info;

/* list /mplane-info/m-plane-interfaces/m-plane-sub-interfaces */
typedef struct y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_ {
    dlq_hdr_t qhdr;
    xmlChar *v_interface_name;
    xmlChar *v_sub_interface;
    y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info v_client_info;
} y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_sub_interfaces;

/* container /mplane-info/m-plane-interfaces/m-plane-ssh-ports */
typedef struct y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_ssh_ports_ {
    uint16 v_call_home_ssh_port;
    uint16 v_server_ssh_port;
} y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_ssh_ports;

/* container /mplane-info/m-plane-interfaces */
typedef struct y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_ {
    dlq_hdr_t v_m_plane_sub_interfaces;
    y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces_m_plane_ssh_ports v_m_plane_ssh_ports;
} y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces;

/* container /mplane-info */
typedef struct y_o_ran_mplane_int_T_mplane_info_ {
    y_o_ran_mplane_int_T_mplane_info_searchable_mplane_access_vlans_info v_searchable_mplane_access_vlans_info;
    y_o_ran_mplane_int_T_mplane_info_m_plane_interfaces v_m_plane_interfaces;
} y_o_ran_mplane_int_T_mplane_info;


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_searchable_access_vlans_edit
*
* Edit database object callback
* Path: /mplane-info/searchable-mplane-access-vlans-info/searchable-access-vlans
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_searchable_access_vlans_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_vlan_range_lowest_vlan_id_edit
*
* Edit database object callback
* Path: /mplane-info/searchable-mplane-access-vlans-info/vlan-range/lowest-vlan-id
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_vlan_range_lowest_vlan_id_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_vlan_range_highest_vlan_id_edit
*
* Edit database object callback
* Path: /mplane-info/searchable-mplane-access-vlans-info/vlan-range/highest-vlan-id
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_vlan_range_highest_vlan_id_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_vlan_range_edit
*
* Edit database object callback
* Path: /mplane-info/searchable-mplane-access-vlans-info/vlan-range
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_vlan_range_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_edit
*
* Edit database object callback
* Path: /mplane-info/searchable-mplane-access-vlans-info
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_searchable_mplane_access_vlans_info_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv4_info_get
*
* Get database object callback for list mplane-ipv4-info
* Path: /mplane-info/m-plane-interfaces/m-plane-sub-interfaces/client-info/mplane-ipv4-info
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv4_info_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_interface_name,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_sub_interface,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv4_info_mplane_ipv4,
    boolean mplane_ipv4_fixed,
    boolean mplane_ipv4_present);

/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv6_info_get
*
* Get database object callback for list mplane-ipv6-info
* Path: /mplane-info/m-plane-interfaces/m-plane-sub-interfaces/client-info/mplane-ipv6-info
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv6_info_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_interface_name,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_sub_interface,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_mplane_ipv6_info_mplane_ipv6,
    boolean mplane_ipv6_fixed,
    boolean mplane_ipv6_present);

/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_get
*
* Get database object callback for container client-info
* Path: /mplane-info/m-plane-interfaces/m-plane-sub-interfaces/client-info
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_client_info_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_interface_name,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_sub_interface);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_edit
*
* Edit database object callback
* Path: /mplane-info/m-plane-interfaces/m-plane-sub-interfaces
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_interface_name,
    const xmlChar *k_mplane_info_m_plane_interfaces_m_plane_sub_interfaces_sub_interface);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_ssh_ports_call_home_ssh_port_edit
*
* Edit database object callback
* Path: /mplane-info/m-plane-interfaces/m-plane-ssh-ports/call-home-ssh-port
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_ssh_ports_call_home_ssh_port_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_ssh_ports_server_ssh_port_edit
*
* Edit database object callback
* Path: /mplane-info/m-plane-interfaces/m-plane-ssh-ports/server-ssh-port
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_ssh_ports_server_ssh_port_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_ssh_ports_edit
*
* Edit database object callback
* Path: /mplane-info/m-plane-interfaces/m-plane-ssh-ports
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_m_plane_interfaces_m_plane_ssh_ports_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_m_plane_interfaces_edit
*
* Edit database object callback
* Path: /mplane-info/m-plane-interfaces
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_m_plane_interfaces_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_mplane_int_mplane_info_edit
*
* Edit database object callback
* Path: /mplane-info
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_mplane_info_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_mplane_int_init
*
* initialize the o-ran-mplane-int server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_mplane_int_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_mplane_int_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_mplane_int_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_mplane_int_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
