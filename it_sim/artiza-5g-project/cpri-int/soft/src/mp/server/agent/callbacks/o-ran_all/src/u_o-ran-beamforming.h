
#ifndef _H_u_o_ran_beamforming
#define _H_u_o_ran_beamforming
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-beamforming
    revision 2019-04-01
    namespace urn:o-ran:beamforming:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:30Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "agt_rpc.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-beamforming.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Feature o-ran-beamforming:MODIFY-BF-CONFIG
 * Comment out to disable */
#define u_o_ran_beamforming_F_MODIFY_BF_CONFIG 1



/* leaf-list /beamforming-config/per-band-config/tx-array */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_tx_array_ {
    dlq_hdr_t qhdr;
    xmlChar *v_tx_array;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_tx_array;

/* leaf-list /beamforming-config/per-band-config/rx-array */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_rx_array_ {
    dlq_hdr_t qhdr;
    xmlChar *v_rx_array;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_rx_array;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format/no-compresison */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_no_compresison_ {
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_no_compresison;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format/block-floating-point */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_block_floating_point_ {
    uint8 v_exponent;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_block_floating_point;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format/block-scaling */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_block_scaling_ {
    uint8 v_block_scalar;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_block_scaling;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format/u-law */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_u_law_ {
    uint8 v_comp_bit_width;
    uint8 v_comp_shift;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_u_law;

/* leaf-list /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format/beam-space-compression/active-beam-space-coeficient-mask */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_beam_space_compression_active_beam_space_coeficient_mask_ {
    dlq_hdr_t qhdr;
    uint8 v_active_beam_space_coeficient_mask;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_beam_space_compression_active_beam_space_coeficient_mask;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format/beam-space-compression */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_beam_space_compression_ {
    dlq_hdr_t v_active_beam_space_coeficient_mask;
    uint8 v_block_scaler;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_beam_space_compression;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format/modulation-compression */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_modulation_compression_ {
    uint8 v_csf;
    uint16 v_mod_comp_scaler;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_modulation_compression;

/* choice /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format */
typedef union y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_ {
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_no_compresison v_no_compresison;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_block_floating_point v_block_floating_point;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_block_scaling v_block_scaling;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_u_law v_u_law;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_beam_space_compression v_beam_space_compression;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_modulation_compression v_modulation_compression;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format;

/* container /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_ {
    uint16 v_max_number_of_beam_ids;
    uint16 v_initial_beam_id;
    xmlChar *v_compression_type;
    uint8 v_bitwidth;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format v_compression_format;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/frequency */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_ {
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams v_frequency_domain_beams;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format/no-compresison */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_no_compresison_ {
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_no_compresison;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format/block-floating-point */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_block_floating_point_ {
    uint8 v_exponent;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_block_floating_point;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format/block-scaling */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_block_scaling_ {
    uint8 v_block_scalar;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_block_scaling;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format/u-law */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_u_law_ {
    uint8 v_comp_bit_width;
    uint8 v_comp_shift;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_u_law;

/* leaf-list /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format/beam-space-compression/active-beam-space-coeficient-mask */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_beam_space_compression_active_beam_space_coeficient_mask_ {
    dlq_hdr_t qhdr;
    uint8 v_active_beam_space_coeficient_mask;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_beam_space_compression_active_beam_space_coeficient_mask;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format/beam-space-compression */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_beam_space_compression_ {
    dlq_hdr_t v_active_beam_space_coeficient_mask;
    uint8 v_block_scaler;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_beam_space_compression;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format/modulation-compression */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_modulation_compression_ {
    uint8 v_csf;
    uint16 v_mod_comp_scaler;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_modulation_compression;

/* choice /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format */
typedef union y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_ {
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_no_compresison v_no_compresison;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_block_floating_point v_block_floating_point;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_block_scaling v_block_scaling;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_u_law v_u_law;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_beam_space_compression v_beam_space_compression;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_modulation_compression v_modulation_compression;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format;

/* container /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_ {
    uint16 v_max_number_of_beam_ids;
    uint16 v_initial_beam_id;
    xmlChar *v_frequency_granularity;
    xmlChar *v_time_granularity;
    xmlChar *v_compression_type;
    uint8 v_bitwidth;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format v_compression_format;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/time */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_ {
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams v_time_domain_beams;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format/no-compresison */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_no_compresison_ {
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_no_compresison;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format/block-floating-point */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_block_floating_point_ {
    uint8 v_exponent;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_block_floating_point;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format/block-scaling */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_block_scaling_ {
    uint8 v_block_scalar;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_block_scaling;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format/u-law */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_u_law_ {
    uint8 v_comp_bit_width;
    uint8 v_comp_shift;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_u_law;

/* leaf-list /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format/beam-space-compression/active-beam-space-coeficient-mask */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_beam_space_compression_active_beam_space_coeficient_mask_ {
    dlq_hdr_t qhdr;
    uint8 v_active_beam_space_coeficient_mask;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_beam_space_compression_active_beam_space_coeficient_mask;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format/beam-space-compression */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_beam_space_compression_ {
    dlq_hdr_t v_active_beam_space_coeficient_mask;
    uint8 v_block_scaler;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_beam_space_compression;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format/modulation-compression */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_modulation_compression_ {
    uint8 v_csf;
    uint16 v_mod_comp_scaler;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_modulation_compression;

/* choice /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format */
typedef union y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_ {
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_no_compresison v_no_compresison;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_block_floating_point v_block_floating_point;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_block_scaling v_block_scaling;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_u_law v_u_law;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_beam_space_compression v_beam_space_compression;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_modulation_compression v_modulation_compression;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format;

/* container /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_ {
    uint16 v_max_number_of_beam_ids;
    uint16 v_initial_beam_id;
    xmlChar *v_frequency_granularity;
    xmlChar *v_time_granularity;
    xmlChar *v_compression_type;
    uint8 v_bitwidth;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format v_compression_format;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams;

/* case /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_ {
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams v_hybrid_beams;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid;

/* choice /beamforming-config/per-band-config/static-properties/beamforming-type */
typedef union y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_ {
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_frequency v_frequency;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_time v_time;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid v_hybrid;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type;

/* container /beamforming-config/per-band-config/static-properties */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_ {
    boolean v_rt_bf_weights_update_support;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties_beamforming_type v_beamforming_type;
    uint16 v_number_of_beams;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties;

/* leaf-list /beamforming-config/per-band-config/beam-information/beamforming-properties/beamforming-property/coarse-fine-beam-relation */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property_coarse_fine_beam_relation_ {
    dlq_hdr_t qhdr;
    xmlChar *v_coarse_fine_beam_relation;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property_coarse_fine_beam_relation;

/* leaf-list /beamforming-config/per-band-config/beam-information/beamforming-properties/beamforming-property/neighbour-beams */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property_neighbour_beams_ {
    dlq_hdr_t qhdr;
    xmlChar *v_neighbour_beams;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property_neighbour_beams;

/* container /beamforming-config/per-band-config/beam-information/beamforming-properties/beamforming-property */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property_ {
    xmlChar *v_beam_type;
    uint16 v_beam_group_id;
    dlq_hdr_t v_coarse_fine_beam_relation;
    dlq_hdr_t v_neighbour_beams;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property;

/* list /beamforming-config/per-band-config/beam-information/beamforming-properties */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties_ {
    dlq_hdr_t qhdr;
    uint16 v_beam_id;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property v_beamforming_property;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_beamforming_properties;

/* container /beamforming-config/per-band-config/beam-information */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information_ {
    uint16 v_number_of_beamforming_properties;
    dlq_hdr_t v_beamforming_properties;
} y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information;

/* list /beamforming-config/per-band-config */
typedef struct y_o_ran_beamforming_T_beamforming_config_per_band_config_ {
    dlq_hdr_t qhdr;
    xmlChar *v_band_number;
    dlq_hdr_t v_tx_array;
    dlq_hdr_t v_rx_array;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_static_properties v_static_properties;
    y_o_ran_beamforming_T_beamforming_config_per_band_config_beam_information v_beam_information;
} y_o_ran_beamforming_T_beamforming_config_per_band_config;

/* container /beamforming-config/ue-specific-beamforming */
typedef struct y_o_ran_beamforming_T_beamforming_config_ue_specific_beamforming_ {
    uint8 v_max_number_of_ues;
} y_o_ran_beamforming_T_beamforming_config_ue_specific_beamforming;


#ifdef u_o_ran_beamforming_F_MODIFY_BF_CONFIG
/* container /beamforming-config/operational-properties */
typedef struct y_o_ran_beamforming_T_beamforming_config_operational_properties_ {
    uint8 v_number_of_writeable_beamforming_files;
    boolean v_update_bf_non_delete;
    boolean v_persistent_bf_files;
} y_o_ran_beamforming_T_beamforming_config_operational_properties;
#endif /* u_o_ran_beamforming_F_MODIFY_BF_CONFIG */

/* container /beamforming-config */
typedef struct y_o_ran_beamforming_T_beamforming_config_ {
    dlq_hdr_t v_per_band_config;
    y_o_ran_beamforming_T_beamforming_config_ue_specific_beamforming v_ue_specific_beamforming;

#ifdef u_o_ran_beamforming_F_MODIFY_BF_CONFIG
    y_o_ran_beamforming_T_beamforming_config_operational_properties v_operational_properties;
#endif /* u_o_ran_beamforming_F_MODIFY_BF_CONFIG */
    boolean v_beamforming_trough_attributes_supported;
    boolean v_beamforming_trough_ue_channel_info_supported;
} y_o_ran_beamforming_T_beamforming_config;

/* container /activate-beamforming-config/input */
typedef struct y_o_ran_beamforming_T_activate_beamforming_config_input_ {
    xmlChar *v_beamforming_config_file;
    xmlChar *v_band_number;
} y_o_ran_beamforming_T_activate_beamforming_config_input;

/* container /activate-beamforming-config/output */
typedef struct y_o_ran_beamforming_T_activate_beamforming_config_output_ {
    xmlChar *v_status;
    xmlChar *v_error_message;
} y_o_ran_beamforming_T_activate_beamforming_config_output;


#ifdef u_o_ran_beamforming_F_MODIFY_BF_CONFIG
/* rpc /activate-beamforming-config */
typedef struct y_o_ran_beamforming_T_activate_beamforming_config_ {
    y_o_ran_beamforming_T_activate_beamforming_config_input v_input;
    y_o_ran_beamforming_T_activate_beamforming_config_output v_output;
} y_o_ran_beamforming_T_activate_beamforming_config;
#endif /* u_o_ran_beamforming_F_MODIFY_BF_CONFIG */

/* notification /beamforming-information-update */
typedef struct y_o_ran_beamforming_T_beamforming_information_update_ {
    xmlChar *v_band_number;
} y_o_ran_beamforming_T_beamforming_information_update;

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_get
*
* Get database object callback for choice compression-format
* Path: /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams/compression-format
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_compression_format_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_get
*
* Get database object callback for container frequency-domain-beams
* Path: /beamforming-config/per-band-config/static-properties/beamforming-type/frequency/frequency-domain-beams
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_frequency_frequency_domain_beams_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_get
*
* Get database object callback for choice compression-format
* Path: /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams/compression-format
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_compression_format_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_get
*
* Get database object callback for container time-domain-beams
* Path: /beamforming-config/per-band-config/static-properties/beamforming-type/time/time-domain-beams
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_time_time_domain_beams_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_get
*
* Get database object callback for choice compression-format
* Path: /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams/compression-format
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_compression_format_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_get
*
* Get database object callback for container hybrid-beams
* Path: /beamforming-config/per-band-config/static-properties/beamforming-type/hybrid/hybrid-beams
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_hybrid_hybrid_beams_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_get
*
* Get database object callback for choice beamforming-type
* Path: /beamforming-config/per-band-config/static-properties/beamforming-type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_beamforming_type_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_get
*
* Get database object callback for container static-properties
* Path: /beamforming-config/per-band-config/static-properties
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_static_properties_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property_get
*
* Get database object callback for container beamforming-property
* Path: /beamforming-config/per-band-config/beam-information/beamforming-properties/beamforming-property
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_beam_information_beamforming_properties_beamforming_property_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number,
    uint16 k_beamforming_config_per_band_config_beam_information_beamforming_properties_beam_id);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_beam_information_beamforming_properties_get
*
* Get database object callback for list beamforming-properties
* Path: /beamforming-config/per-band-config/beam-information/beamforming-properties
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_beam_information_beamforming_properties_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number,
    uint16 k_beamforming_config_per_band_config_beam_information_beamforming_properties_beam_id,
    boolean beam_id_fixed,
    boolean beam_id_present);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_beam_information_get
*
* Get database object callback for container beam-information
* Path: /beamforming-config/per-band-config/beam-information
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_beam_information_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_per_band_config_get
*
* Get database object callback for list per-band-config
* Path: /beamforming-config/per-band-config
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_per_band_config_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_beamforming_config_per_band_config_band_number,
    boolean band_number_fixed,
    boolean band_number_present);

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_ue_specific_beamforming_get
*
* Get database object callback for container ue-specific-beamforming
* Path: /beamforming-config/ue-specific-beamforming
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_ue_specific_beamforming_get (
    getcb_get2_t *get2cb);


#ifdef u_o_ran_beamforming_F_MODIFY_BF_CONFIG
/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_operational_properties_get
*
* Get database object callback for container operational-properties
* Path: /beamforming-config/operational-properties
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_operational_properties_get (
    getcb_get2_t *get2cb);

#endif /* u_o_ran_beamforming_F_MODIFY_BF_CONFIG */
/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_config_get
*
* Get database object callback for container beamforming-config
* Path: /beamforming-config
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_beamforming_config_get (
    getcb_get2_t *get2cb);


#ifdef u_o_ran_beamforming_F_MODIFY_BF_CONFIG
/********************************************************************
* FUNCTION u_o_ran_beamforming_activate_beamforming_config_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_activate_beamforming_config_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);

/********************************************************************
* FUNCTION u_o_ran_beamforming_activate_beamforming_config_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_activate_beamforming_config_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);

#endif /* u_o_ran_beamforming_F_MODIFY_BF_CONFIG */

/********************************************************************
* FUNCTION u_o_ran_beamforming_beamforming_information_update_send
*
* Send a u_o_ran_beamforming_beamforming_information_update notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_beamforming_beamforming_information_update_send (
    const xmlChar *v_band_number);

/********************************************************************
* FUNCTION u_o_ran_beamforming_init
*
* initialize the o-ran-beamforming server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_beamforming_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_beamforming_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_beamforming_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_beamforming_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
