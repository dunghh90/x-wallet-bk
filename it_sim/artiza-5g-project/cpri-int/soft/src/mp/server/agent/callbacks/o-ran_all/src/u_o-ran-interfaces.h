
#ifndef _H_u_o_ran_interfaces
#define _H_u_o_ran_interfaces
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-interfaces
    revision 2019-02-04
    namespace urn:o-ran:interfaces:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_rpc.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-interfaces.h"
/*
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"
*/

#ifdef __cplusplus
extern "C" {
#endif
/* Feature o-ran-interfaces:UDPIP-BASED-CU-PLANE
 * Comment out to disable */
#define u_o_ran_interfaces_F_UDPIP_BASED_CU_PLANE 1

/* Feature o-ran-interfaces:ALIASMAC-BASED-CU-PLANE
 * Comment out to disable */
#define u_o_ran_interfaces_F_ALIASMAC_BASED_CU_PLANE 1



/* list /interfaces/interface/ipv4/diffserv-markings/enhanced-uplane-markings */
typedef struct y_o_ran_interfaces_T_interfaces_interface_ipv4_diffserv_markings_enhanced_uplane_markings_ {
    dlq_hdr_t qhdr;
    xmlChar *v_up_marking_name;
    uint8 v_enhanced_marking;
} y_o_ran_interfaces_T_interfaces_interface_ipv4_diffserv_markings_enhanced_uplane_markings;

/* container /interfaces/interface/ipv4/diffserv-markings */
typedef struct y_o_ran_interfaces_T_interfaces_interface_ipv4_diffserv_markings_ {
    uint8 v_u_plane_marking;
    uint8 v_c_plane_marking;
    uint8 v_s_plane_marking;
    uint8 v_other_marking;
    dlq_hdr_t v_enhanced_uplane_markings;
} y_o_ran_interfaces_T_interfaces_interface_ipv4_diffserv_markings;

/* list /interfaces/interface/ipv6/diffserv-markings/enhanced-uplane-markings */
typedef struct y_o_ran_interfaces_T_interfaces_interface_ipv6_diffserv_markings_enhanced_uplane_markings_ {
    dlq_hdr_t qhdr;
    xmlChar *v_up_marking_name;
    uint8 v_enhanced_marking;
} y_o_ran_interfaces_T_interfaces_interface_ipv6_diffserv_markings_enhanced_uplane_markings;

/* container /interfaces/interface/ipv6/diffserv-markings */
typedef struct y_o_ran_interfaces_T_interfaces_interface_ipv6_diffserv_markings_ {
    uint8 v_u_plane_marking;
    uint8 v_c_plane_marking;
    uint8 v_s_plane_marking;
    uint8 v_other_marking;
    dlq_hdr_t v_enhanced_uplane_markings;
} y_o_ran_interfaces_T_interfaces_interface_ipv6_diffserv_markings;


#ifdef u_o_ran_interfaces_F_ALIASMAC_BASED_CU_PLANE
/* leaf-list /interfaces/interface/alias-macs */
typedef struct y_o_ran_interfaces_T_interfaces_interface_alias_macs_ {
    dlq_hdr_t qhdr;
    xmlChar *o_ran_interfaces_alias_macs;
} y_o_ran_interfaces_T_interfaces_interface_alias_macs;
#endif /* u_o_ran_interfaces_F_ALIASMAC_BASED_CU_PLANE */

/* list /interfaces/interface/class-of-service/enhanced-uplane-markings */
typedef struct y_o_ran_interfaces_T_interfaces_interface_class_of_service_enhanced_uplane_markings_ {
    dlq_hdr_t qhdr;
    xmlChar *v_up_marking_name;
    uint8 v_enhanced_marking;
} y_o_ran_interfaces_T_interfaces_interface_class_of_service_enhanced_uplane_markings;

/* container /interfaces/interface/class-of-service */
typedef struct y_o_ran_interfaces_T_interfaces_interface_class_of_service_ {
    uint8 v_u_plane_marking;
    uint8 v_c_plane_marking;
    uint8 v_m_plane_marking;
    uint8 v_s_plane_marking;
    uint8 v_other_marking;
    dlq_hdr_t v_enhanced_uplane_markings;
} y_o_ran_interfaces_T_interfaces_interface_class_of_service;

/* container /interfaces/interface/port-reference */
typedef struct y_o_ran_interfaces_T_interfaces_interface_port_reference_ {
    xmlChar *v_port_name;
    uint8 v_port_number;
} y_o_ran_interfaces_T_interfaces_interface_port_reference;

/* container /reset-interface-counters/input */
typedef struct y_o_ran_interfaces_T_reset_interface_counters_input_ {
} y_o_ran_interfaces_T_reset_interface_counters_input;

/* container /reset-interface-counters/output */
typedef struct y_o_ran_interfaces_T_reset_interface_counters_output_ {
} y_o_ran_interfaces_T_reset_interface_counters_output;

/* rpc /reset-interface-counters */
typedef struct y_o_ran_interfaces_T_reset_interface_counters_ {
    y_o_ran_interfaces_T_reset_interface_counters_input v_input;
    y_o_ran_interfaces_T_reset_interface_counters_output v_output;
} y_o_ran_interfaces_T_reset_interface_counters;


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_u_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv4/diffserv-markings/u-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_u_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_c_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv4/diffserv-markings/c-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_c_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_s_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv4/diffserv-markings/s-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_s_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_other_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv4/diffserv-markings/other-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_other_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_enhanced_uplane_markings_enhanced_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv4/diffserv-markings/enhanced-uplane-markings/enhanced-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_enhanced_uplane_markings_enhanced_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name,
    const xmlChar *k_interfaces_interface_ipv4_diffserv_markings_enhanced_uplane_markings_up_marking_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_enhanced_uplane_markings_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv4/diffserv-markings/enhanced-uplane-markings
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_enhanced_uplane_markings_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name,
    const xmlChar *k_interfaces_interface_ipv4_diffserv_markings_enhanced_uplane_markings_up_marking_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv4/diffserv-markings
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv4_diffserv_markings_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv4_m_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv4/m-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv4_m_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_u_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv6/diffserv-markings/u-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_u_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_c_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv6/diffserv-markings/c-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_c_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_s_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv6/diffserv-markings/s-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_s_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_other_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv6/diffserv-markings/other-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_other_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_enhanced_uplane_markings_enhanced_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv6/diffserv-markings/enhanced-uplane-markings/enhanced-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_enhanced_uplane_markings_enhanced_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name,
    const xmlChar *k_interfaces_interface_ipv6_diffserv_markings_enhanced_uplane_markings_up_marking_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_enhanced_uplane_markings_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv6/diffserv-markings/enhanced-uplane-markings
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_enhanced_uplane_markings_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name,
    const xmlChar *k_interfaces_interface_ipv6_diffserv_markings_enhanced_uplane_markings_up_marking_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv6/diffserv-markings
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv6_diffserv_markings_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_ipv6_m_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/ipv6/m-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_ipv6_m_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_l2_mtu_edit
*
* Edit database object callback
* Path: /interfaces/interface/l2-mtu
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_l2_mtu_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


#ifdef u_o_ran_interfaces_F_ALIASMAC_BASED_CU_PLANE
/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_alias_macs_edit
*
* Edit database object callback
* Path: /interfaces/interface/alias-macs
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_alias_macs_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);

#endif /* u_o_ran_interfaces_F_ALIASMAC_BASED_CU_PLANE */

/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_vlan_tagging_edit
*
* Edit database object callback
* Path: /interfaces/interface/vlan-tagging
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_vlan_tagging_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_class_of_service_u_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/class-of-service/u-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_class_of_service_u_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_class_of_service_c_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/class-of-service/c-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_class_of_service_c_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_class_of_service_m_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/class-of-service/m-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_class_of_service_m_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_class_of_service_s_plane_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/class-of-service/s-plane-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_class_of_service_s_plane_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_class_of_service_other_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/class-of-service/other-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_class_of_service_other_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_class_of_service_enhanced_uplane_markings_enhanced_marking_edit
*
* Edit database object callback
* Path: /interfaces/interface/class-of-service/enhanced-uplane-markings/enhanced-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_class_of_service_enhanced_uplane_markings_enhanced_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name,
    const xmlChar *k_interfaces_interface_class_of_service_enhanced_uplane_markings_up_marking_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_class_of_service_enhanced_uplane_markings_edit
*
* Edit database object callback
* Path: /interfaces/interface/class-of-service/enhanced-uplane-markings
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_class_of_service_enhanced_uplane_markings_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name,
    const xmlChar *k_interfaces_interface_class_of_service_enhanced_uplane_markings_up_marking_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_class_of_service_edit
*
* Edit database object callback
* Path: /interfaces/interface/class-of-service
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_class_of_service_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_base_interface_edit
*
* Edit database object callback
* Path: /interfaces/interface/base-interface
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_base_interface_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_vlan_id_edit
*
* Edit database object callback
* Path: /interfaces/interface/vlan-id
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_vlan_id_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_mac_address_edit
*
* Edit database object callback
* Path: /interfaces/interface/mac-address
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_mac_address_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_port_reference_port_name_edit
*
* Edit database object callback
* Path: /interfaces/interface/port-reference/port-name
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_port_reference_port_name_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_port_reference_port_number_edit
*
* Edit database object callback
* Path: /interfaces/interface/port-reference/port-number
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_port_reference_port_number_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_port_reference_edit
*
* Edit database object callback
* Path: /interfaces/interface/port-reference
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_port_reference_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_interfaces_interface_name);

/********************************************************************
* FUNCTION u_o_ran_interfaces_interfaces_interface_last_cleared_get
*
* Get database object callback for leaf last-cleared
* Path: /interfaces/interface/last-cleared
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_interfaces_interface_last_cleared_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_interfaces_interface_name);


/********************************************************************
* FUNCTION u_o_ran_interfaces_reset_interface_counters_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_reset_interface_counters_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_interfaces_reset_interface_counters_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_reset_interface_counters_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);

/********************************************************************
* FUNCTION u_o_ran_interfaces_init
*
* initialize the o-ran-interfaces server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_interfaces_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_interfaces_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_interfaces_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_interfaces_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
