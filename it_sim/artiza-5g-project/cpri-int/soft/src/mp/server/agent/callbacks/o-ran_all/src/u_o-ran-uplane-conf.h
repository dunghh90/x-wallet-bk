
#ifndef _H_u_o_ran_uplane_conf
#define _H_u_o_ran_uplane_conf
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-uplane-conf
    revision 2019-02-04
    namespace urn:o-ran:uplane-conf:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-uplane-conf.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif

/* list /user-plane-configuration/low-level-tx-links */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_links_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    xmlChar *v_processing_element;
    xmlChar *v_tx_array_carrier;
    xmlChar *v_low_level_tx_endpoint;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_links;

/* list /user-plane-configuration/low-level-rx-links */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_links_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    xmlChar *v_processing_element;
    xmlChar *v_rx_array_carrier;
    xmlChar *v_low_level_rx_endpoint;
    xmlChar *v_user_plane_uplink_marking;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_links;

/* leaf-list /user-plane-configuration/endpoint-types/supported-section-types/supported-section-extensions */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_supported_section_types_supported_section_extensions_ {
    dlq_hdr_t qhdr;
    uint8 v_supported_section_extensions;
} y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_supported_section_types_supported_section_extensions;

/* list /user-plane-configuration/endpoint-types/supported-section-types */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_supported_section_types_ {
    dlq_hdr_t qhdr;
    uint8 v_section_type;
    dlq_hdr_t v_supported_section_extensions;
} y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_supported_section_types;

/* leaf-list /user-plane-configuration/endpoint-types/supported-frame-structures */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_supported_frame_structures_ {
    dlq_hdr_t qhdr;
    uint8 v_supported_frame_structures;
} y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_supported_frame_structures;

/* leaf-list /user-plane-configuration/endpoint-types/prb-capacity-allocation-granularity */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_prb_capacity_allocation_granularity_ {
    dlq_hdr_t qhdr;
    uint16 v_prb_capacity_allocation_granularity;
} y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_prb_capacity_allocation_granularity;

/* list /user-plane-configuration/endpoint-types */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types_ {
    dlq_hdr_t qhdr;
    uint16 v_id;
    dlq_hdr_t v_supported_section_types;
    dlq_hdr_t v_supported_frame_structures;
    xmlChar *v_managed_delay_support;
    uint16 v_max_numerology_change_duration;
    uint8 v_max_control_sections_per_data_section;
    uint16 v_max_sections_per_symbol;
    uint16 v_max_sections_per_slot;
    uint16 v_max_beams_per_symbol;
    uint16 v_max_beams_per_slot;
    uint16 v_max_prb_per_symbol;
    dlq_hdr_t v_prb_capacity_allocation_granularity;
    uint16 v_max_numerologies_per_symbol;
} y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_types;

/* list /user-plane-configuration/endpoint-capacity-sharing-groups */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_capacity_sharing_groups_ {
    dlq_hdr_t qhdr;
    uint16 v_id;
    uint8 v_max_control_sections_per_data_section;
    uint16 v_max_sections_per_symbol;
    uint16 v_max_sections_per_slot;
    uint16 v_max_beams_per_symbol;
    uint16 v_max_beams_per_slot;
    uint16 v_max_prb_per_symbol;
    uint16 v_max_numerologies_per_symbol;
    uint16 v_max_endpoints;
    uint16 v_max_managed_delay_endpoints;
    uint16 v_max_non_managed_delay_endpoints;
} y_o_ran_uplane_conf_T_user_plane_configuration_endpoint_capacity_sharing_groups;

/* leaf-list /user-plane-configuration/static-low-level-tx-endpoints/restricted-interfaces */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_tx_endpoints_restricted_interfaces_ {
    dlq_hdr_t qhdr;
    xmlChar *v_restricted_interfaces;
} y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_tx_endpoints_restricted_interfaces;

/* leaf-list /user-plane-configuration/static-low-level-tx-endpoints/capacity-sharing-groups */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_tx_endpoints_capacity_sharing_groups_ {
    dlq_hdr_t qhdr;
    xmlChar *v_capacity_sharing_groups;
} y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_tx_endpoints_capacity_sharing_groups;

/* list /user-plane-configuration/static-low-level-tx-endpoints */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_tx_endpoints_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    dlq_hdr_t v_restricted_interfaces;
    xmlChar *v_array;
    xmlChar *v_endpoint_type;
    dlq_hdr_t v_capacity_sharing_groups;
} y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_tx_endpoints;

/* leaf-list /user-plane-configuration/static-low-level-rx-endpoints/restricted-interfaces */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_rx_endpoints_restricted_interfaces_ {
    dlq_hdr_t qhdr;
    xmlChar *v_restricted_interfaces;
} y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_rx_endpoints_restricted_interfaces;

/* leaf-list /user-plane-configuration/static-low-level-rx-endpoints/capacity-sharing-groups */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_rx_endpoints_capacity_sharing_groups_ {
    dlq_hdr_t qhdr;
    xmlChar *v_capacity_sharing_groups;
} y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_rx_endpoints_capacity_sharing_groups;

/* list /user-plane-configuration/static-low-level-rx-endpoints */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_rx_endpoints_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    dlq_hdr_t v_restricted_interfaces;
    xmlChar *v_array;
    xmlChar *v_endpoint_type;
    dlq_hdr_t v_capacity_sharing_groups;
} y_o_ran_uplane_conf_T_user_plane_configuration_static_low_level_rx_endpoints;

/* case /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/no-compresison */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_no_compresison_ {
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_no_compresison;

/* case /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/block-floating-point */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_floating_point_ {
    uint8 v_exponent;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_floating_point;

/* case /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/block-scaling */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_scaling_ {
    uint8 v_block_scalar;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_scaling;

/* case /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/u-law */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_u_law_ {
    uint8 v_comp_bit_width;
    uint8 v_comp_shift;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_u_law;

/* leaf-list /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/beam-space-compression/active-beam-space-coeficient-mask */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression_active_beam_space_coeficient_mask_ {
    dlq_hdr_t qhdr;
    uint8 v_active_beam_space_coeficient_mask;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression_active_beam_space_coeficient_mask;

/* case /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/beam-space-compression */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression_ {
    dlq_hdr_t v_active_beam_space_coeficient_mask;
    uint8 v_block_scaler;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression;

/* case /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/modulation-compression */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_modulation_compression_ {
    uint8 v_csf;
    uint16 v_mod_comp_scaler;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_modulation_compression;

/* choice /user-plane-configuration/low-level-tx-endpoints/compression/compression-format */
typedef union y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_ {
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_no_compresison v_no_compresison;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_floating_point v_block_floating_point;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_scaling v_block_scaling;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_u_law v_u_law;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression v_beam_space_compression;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_modulation_compression v_modulation_compression;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format;

/* container /user-plane-configuration/low-level-tx-endpoints/compression */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_ {
    xmlChar *v_compression_type;
    uint8 v_bitwidth;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression_compression_format v_compression_format;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression;

/* list /user-plane-configuration/low-level-tx-endpoints/number-of-prb-per-scs */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_number_of_prb_per_scs_ {
    dlq_hdr_t qhdr;
    xmlChar *v_scs;
    uint16 v_number_of_prb;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_number_of_prb_per_scs;

/* container /user-plane-configuration/low-level-tx-endpoints/e-axcid */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_e_axcid_ {
    uint16 v_o_du_port_bitmask;
    uint16 v_band_sector_bitmask;
    uint16 v_ccid_bitmask;
    uint16 v_ru_port_bitmask;
    uint16 v_eaxc_id;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_e_axcid;

/* list /user-plane-configuration/low-level-tx-endpoints */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_compression v_compression;
    uint8 v_frame_structure;
    xmlChar *v_cp_type;
    uint16 v_cp_length;
    uint16 v_cp_length_other;
    int32 v_offset_to_absolute_frequency_center;
    dlq_hdr_t v_number_of_prb_per_scs;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints_e_axcid v_e_axcid;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_tx_endpoints;

/* case /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/no-compresison */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_no_compresison_ {
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_no_compresison;

/* case /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/block-floating-point */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_floating_point_ {
    uint8 v_exponent;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_floating_point;

/* case /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/block-scaling */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_scaling_ {
    uint8 v_block_scalar;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_scaling;

/* case /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/u-law */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_u_law_ {
    uint8 v_comp_bit_width;
    uint8 v_comp_shift;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_u_law;

/* leaf-list /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/beam-space-compression/active-beam-space-coeficient-mask */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression_active_beam_space_coeficient_mask_ {
    dlq_hdr_t qhdr;
    uint8 v_active_beam_space_coeficient_mask;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression_active_beam_space_coeficient_mask;

/* case /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/beam-space-compression */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression_ {
    dlq_hdr_t v_active_beam_space_coeficient_mask;
    uint8 v_block_scaler;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression;

/* case /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/modulation-compression */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_modulation_compression_ {
    uint8 v_csf;
    uint16 v_mod_comp_scaler;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_modulation_compression;

/* choice /user-plane-configuration/low-level-rx-endpoints/compression/compression-format */
typedef union y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_ {
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_no_compresison v_no_compresison;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_floating_point v_block_floating_point;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_scaling v_block_scaling;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_u_law v_u_law;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression v_beam_space_compression;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_modulation_compression v_modulation_compression;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format;

/* container /user-plane-configuration/low-level-rx-endpoints/compression */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_ {
    xmlChar *v_compression_type;
    uint8 v_bitwidth;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression_compression_format v_compression_format;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression;

/* list /user-plane-configuration/low-level-rx-endpoints/number-of-prb-per-scs */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_number_of_prb_per_scs_ {
    dlq_hdr_t qhdr;
    xmlChar *v_scs;
    uint16 v_number_of_prb;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_number_of_prb_per_scs;

/* list /user-plane-configuration/low-level-rx-endpoints/ul-fft-sampling-offsets */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_ul_fft_sampling_offsets_ {
    dlq_hdr_t qhdr;
    xmlChar *v_scs;
    uint16 v_ul_fft_sampling_offset;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_ul_fft_sampling_offsets;

/* container /user-plane-configuration/low-level-rx-endpoints/e-axcid */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_e_axcid_ {
    uint16 v_o_du_port_bitmask;
    uint16 v_band_sector_bitmask;
    uint16 v_ccid_bitmask;
    uint16 v_ru_port_bitmask;
    uint16 v_eaxc_id;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_e_axcid;

/* list /user-plane-configuration/low-level-rx-endpoints */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_compression v_compression;
    uint8 v_frame_structure;
    xmlChar *v_cp_type;
    uint16 v_cp_length;
    uint16 v_cp_length_other;
    int32 v_offset_to_absolute_frequency_center;
    dlq_hdr_t v_number_of_prb_per_scs;
    dlq_hdr_t v_ul_fft_sampling_offsets;
    y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints_e_axcid v_e_axcid;
    boolean v_non_time_managed_delay_enabled;
} y_o_ran_uplane_conf_T_user_plane_configuration_low_level_rx_endpoints;

/* container /user-plane-configuration/tx-array-carriers/lte-tdd-frame */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_lte_tdd_frame_ {
    xmlChar *v_subframe_assignment;
    xmlChar *v_special_subframe_pattern;
} y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_lte_tdd_frame;

/* list /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/max-cw-usage-counter */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_max_cw_usage_counter_ {
    dlq_hdr_t qhdr;
    xmlChar *v_priority;
    uint8 v_counter_value;
} y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_max_cw_usage_counter;


#ifdef u_o_ran_module_cap_F_LAA
/* container /user-plane-configuration/tx-array-carriers/laa-carrier-configuration */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_ {
    int8 v_ed_threshold_pdsch;
    int8 v_ed_threshold_drs;
    uint8 v_tx_antenna_ports;
    int8 v_transmission_power_for_drs;
    xmlChar *v_dmtc_period;
    uint8 v_dmtc_offset;
    uint16 v_lbt_timer;
    dlq_hdr_t v_max_cw_usage_counter;
} y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_laa_carrier_configuration;
#endif /* u_o_ran_module_cap_F_LAA */

/* list /user-plane-configuration/tx-array-carriers */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    uint32 v_absolute_frequency_center;
    uint64 v_center_of_channel_bandwidth;
    uint64 v_channel_bandwidth;
    xmlChar *v_active;
    xmlChar *v_state;
    xmlChar *v_type;
    xmlChar *v_duplex_scheme;

#ifdef u_o_ran_module_cap_F_LAA
    xmlChar *v_band_number;
#endif /* u_o_ran_module_cap_F_LAA */
    y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_lte_tdd_frame v_lte_tdd_frame;

#ifdef u_o_ran_module_cap_F_LAA
    y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers_laa_carrier_configuration v_laa_carrier_configuration;
#endif /* u_o_ran_module_cap_F_LAA */
    int64 v_gain;
    uint32 v_downlink_radio_frame_offset;
    int16 v_downlink_sfn_offset;
} y_o_ran_uplane_conf_T_user_plane_configuration_tx_array_carriers;

/* list /user-plane-configuration/rx-array-carriers */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_rx_array_carriers_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    uint32 v_absolute_frequency_center;
    uint64 v_center_of_channel_bandwidth;
    uint64 v_channel_bandwidth;
    xmlChar *v_active;
    xmlChar *v_state;
    xmlChar *v_type;
    xmlChar *v_duplex_scheme;
    uint32 v_downlink_radio_frame_offset;
    int16 v_downlink_sfn_offset;
    int64 v_gain_correction;
    uint32 v_n_ta_offset;
} y_o_ran_uplane_conf_T_user_plane_configuration_rx_array_carriers;

/* container /user-plane-configuration/tx-arrays/normal-vector-direction */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_normal_vector_direction_ {
    int64 v_azimuth_angle;
    int64 v_zenith_angle;
} y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_normal_vector_direction;

/* container /user-plane-configuration/tx-arrays/leftmost-bottom-array-element-position */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_leftmost_bottom_array_element_position_ {
    int64 v_x;
    int64 v_y;
    int64 v_z;
} y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_leftmost_bottom_array_element_position;

/* list /user-plane-configuration/tx-arrays/polarisations */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_polarisations_ {
    dlq_hdr_t qhdr;
    uint8 v_p;
    xmlChar *v_polarisation;
} y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_polarisations;

/* list /user-plane-configuration/tx-arrays */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    uint16 v_number_of_rows;
    uint16 v_number_of_columns;
    uint8 v_number_of_array_layers;
    int64 v_horizontal_spacing;
    int64 v_vertical_spacing;
    y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_normal_vector_direction v_normal_vector_direction;
    y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays_leftmost_bottom_array_element_position v_leftmost_bottom_array_element_position;
    dlq_hdr_t v_polarisations;
    xmlChar *v_band_number;
    int64 v_max_gain;
    boolean v_independent_power_budget;
} y_o_ran_uplane_conf_T_user_plane_configuration_tx_arrays;

/* container /user-plane-configuration/rx-arrays/normal-vector-direction */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_normal_vector_direction_ {
    int64 v_azimuth_angle;
    int64 v_zenith_angle;
} y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_normal_vector_direction;

/* container /user-plane-configuration/rx-arrays/leftmost-bottom-array-element-position */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_leftmost_bottom_array_element_position_ {
    int64 v_x;
    int64 v_y;
    int64 v_z;
} y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_leftmost_bottom_array_element_position;

/* list /user-plane-configuration/rx-arrays/polarisations */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_polarisations_ {
    dlq_hdr_t qhdr;
    uint8 v_p;
    xmlChar *v_polarisation;
} y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_polarisations;

/* container /user-plane-configuration/rx-arrays/gain-correction-range */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_gain_correction_range_ {
    int64 v_max;
    int64 v_min;
} y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_gain_correction_range;

/* list /user-plane-configuration/rx-arrays */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    uint16 v_number_of_rows;
    uint16 v_number_of_columns;
    uint8 v_number_of_array_layers;
    int64 v_horizontal_spacing;
    int64 v_vertical_spacing;
    y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_normal_vector_direction v_normal_vector_direction;
    y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_leftmost_bottom_array_element_position v_leftmost_bottom_array_element_position;
    dlq_hdr_t v_polarisations;
    xmlChar *v_band_number;
    y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays_gain_correction_range v_gain_correction_range;
} y_o_ran_uplane_conf_T_user_plane_configuration_rx_arrays;

/* case /user-plane-configuration/relations/array1/antenna-type/tx */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type_tx_ {
    xmlChar *v_tx_array_name;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type_tx;

/* case /user-plane-configuration/relations/array1/antenna-type/rx */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type_rx_ {
    xmlChar *v_rx_array_name;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type_rx;

/* choice /user-plane-configuration/relations/array1/antenna-type */
typedef union y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type_ {
    y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type_tx v_tx;
    y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type_rx v_rx;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type;

/* container /user-plane-configuration/relations/array1 */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_ {
    y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1_antenna_type v_antenna_type;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1;

/* case /user-plane-configuration/relations/array2/antenna-type/tx */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type_tx_ {
    xmlChar *v_tx_array_name;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type_tx;

/* case /user-plane-configuration/relations/array2/antenna-type/rx */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type_rx_ {
    xmlChar *v_rx_array_name;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type_rx;

/* choice /user-plane-configuration/relations/array2/antenna-type */
typedef union y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type_ {
    y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type_tx v_tx;
    y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type_rx v_rx;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type;

/* container /user-plane-configuration/relations/array2 */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_ {
    y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2_antenna_type v_antenna_type;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2;

/* list /user-plane-configuration/relations/types/pairs */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_types_pairs_ {
    dlq_hdr_t qhdr;
    uint16 v_element_array1;
    uint16 v_element_array2;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_types_pairs;

/* list /user-plane-configuration/relations/types */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_types_ {
    dlq_hdr_t qhdr;
    xmlChar *v_relation_type;
    dlq_hdr_t v_pairs;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations_types;

/* list /user-plane-configuration/relations */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_relations_ {
    dlq_hdr_t qhdr;
    uint16 v_entity;
    y_o_ran_uplane_conf_T_user_plane_configuration_relations_array1 v_array1;
    y_o_ran_uplane_conf_T_user_plane_configuration_relations_array2 v_array2;
    dlq_hdr_t v_types;
} y_o_ran_uplane_conf_T_user_plane_configuration_relations;

/* container /user-plane-configuration */
typedef struct y_o_ran_uplane_conf_T_user_plane_configuration_ {
    dlq_hdr_t v_low_level_tx_links;
    dlq_hdr_t v_low_level_rx_links;
    dlq_hdr_t v_endpoint_types;
    dlq_hdr_t v_endpoint_capacity_sharing_groups;
    dlq_hdr_t v_static_low_level_tx_endpoints;
    dlq_hdr_t v_static_low_level_rx_endpoints;
    dlq_hdr_t v_low_level_tx_endpoints;
    dlq_hdr_t v_low_level_rx_endpoints;
    dlq_hdr_t v_tx_array_carriers;
    dlq_hdr_t v_rx_array_carriers;
    dlq_hdr_t v_tx_arrays;
    dlq_hdr_t v_rx_arrays;
    dlq_hdr_t v_relations;
} y_o_ran_uplane_conf_T_user_plane_configuration;

/* list /tx-array-carriers-state-change/tx-array-carriers */
typedef struct y_o_ran_uplane_conf_T_tx_array_carriers_state_change_tx_array_carriers_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    xmlChar *v_state;
} y_o_ran_uplane_conf_T_tx_array_carriers_state_change_tx_array_carriers;

/* notification /tx-array-carriers-state-change */
typedef struct y_o_ran_uplane_conf_T_tx_array_carriers_state_change_ {
    dlq_hdr_t v_tx_array_carriers;
} y_o_ran_uplane_conf_T_tx_array_carriers_state_change;

/* list /rx-array-carriers-state-change/rx-array-carriers */
typedef struct y_o_ran_uplane_conf_T_rx_array_carriers_state_change_rx_array_carriers_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    xmlChar *v_state;
} y_o_ran_uplane_conf_T_rx_array_carriers_state_change_rx_array_carriers;

/* notification /rx-array-carriers-state-change */
typedef struct y_o_ran_uplane_conf_T_rx_array_carriers_state_change_ {
    dlq_hdr_t v_rx_array_carriers;
} y_o_ran_uplane_conf_T_rx_array_carriers_state_change;


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_links_processing_element_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-links/processing-element
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_links_processing_element_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_links_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_links_tx_array_carrier_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-links/tx-array-carrier
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_links_tx_array_carrier_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_links_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_links_low_level_tx_endpoint_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-links/low-level-tx-endpoint
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_links_low_level_tx_endpoint_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_links_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_links_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-links
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_links_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_links_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_processing_element_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-links/processing-element
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_processing_element_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_links_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_rx_array_carrier_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-links/rx-array-carrier
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_rx_array_carrier_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_links_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_low_level_rx_endpoint_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-links/low-level-rx-endpoint
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_low_level_rx_endpoint_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_links_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_user_plane_uplink_marking_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-links/user-plane-uplink-marking
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_user_plane_uplink_marking_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_links_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-links
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_links_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_links_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_endpoint_types_supported_section_types_get
*
* Get database object callback for list supported-section-types
* Path: /user-plane-configuration/endpoint-types/supported-section-types
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_endpoint_types_supported_section_types_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_endpoint_types_id,
    uint8 k_user_plane_configuration_endpoint_types_supported_section_types_section_type,
    boolean section_type_fixed,
    boolean section_type_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_endpoint_types_get
*
* Get database object callback for list endpoint-types
* Path: /user-plane-configuration/endpoint-types
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_endpoint_types_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_endpoint_types_id,
    boolean id_fixed,
    boolean id_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_endpoint_capacity_sharing_groups_get
*
* Get database object callback for list endpoint-capacity-sharing-groups
* Path: /user-plane-configuration/endpoint-capacity-sharing-groups
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_endpoint_capacity_sharing_groups_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_endpoint_capacity_sharing_groups_id,
    boolean id_fixed,
    boolean id_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_static_low_level_tx_endpoints_get
*
* Get database object callback for list static-low-level-tx-endpoints
* Path: /user-plane-configuration/static-low-level-tx-endpoints
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_static_low_level_tx_endpoints_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_static_low_level_tx_endpoints_name,
    boolean name_fixed,
    boolean name_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_static_low_level_rx_endpoints_get
*
* Get database object callback for list static-low-level-rx-endpoints
* Path: /user-plane-configuration/static-low-level-rx-endpoints
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_static_low_level_rx_endpoints_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_static_low_level_rx_endpoints_name,
    boolean name_fixed,
    boolean name_present);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_type_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-type
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_type_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_bitwidth_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/bitwidth
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_bitwidth_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_floating_point_exponent_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/block-floating-point/exponent
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_floating_point_exponent_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_scaling_block_scalar_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/block-scaling/block-scalar
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_block_scaling_block_scalar_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_u_law_comp_bit_width_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/u-law/comp-bit-width
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_u_law_comp_bit_width_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_u_law_comp_shift_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/u-law/comp-shift
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_u_law_comp_shift_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression_active_beam_space_coeficient_mask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/beam-space-compression/active-beam-space-coeficient-mask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression_active_beam_space_coeficient_mask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression_block_scaler_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/beam-space-compression/block-scaler
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_beam_space_compression_block_scaler_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_modulation_compression_csf_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/modulation-compression/csf
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_modulation_compression_csf_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_modulation_compression_mod_comp_scaler_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression/compression-format/modulation-compression/mod-comp-scaler
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_compression_format_modulation_compression_mod_comp_scaler_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/compression
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_compression_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_frame_structure_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/frame-structure
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_frame_structure_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_cp_type_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/cp-type
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_cp_type_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_cp_length_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/cp-length
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_cp_length_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_cp_length_other_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/cp-length-other
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_cp_length_other_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_offset_to_absolute_frequency_center_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/offset-to-absolute-frequency-center
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_offset_to_absolute_frequency_center_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_number_of_prb_per_scs_number_of_prb_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/number-of-prb-per-scs/number-of-prb
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_number_of_prb_per_scs_number_of_prb_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_number_of_prb_per_scs_scs);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_number_of_prb_per_scs_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/number-of-prb-per-scs
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_number_of_prb_per_scs_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_number_of_prb_per_scs_scs);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_o_du_port_bitmask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/e-axcid/o-du-port-bitmask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_o_du_port_bitmask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_band_sector_bitmask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/e-axcid/band-sector-bitmask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_band_sector_bitmask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_ccid_bitmask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/e-axcid/ccid-bitmask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_ccid_bitmask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_ru_port_bitmask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/e-axcid/ru-port-bitmask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_ru_port_bitmask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_eaxc_id_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/e-axcid/eaxc-id
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_eaxc_id_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints/e-axcid
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_e_axcid_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-tx-endpoints
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_tx_endpoints_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_tx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_type_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-type
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_type_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_bitwidth_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/bitwidth
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_bitwidth_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_floating_point_exponent_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/block-floating-point/exponent
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_floating_point_exponent_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_scaling_block_scalar_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/block-scaling/block-scalar
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_block_scaling_block_scalar_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_u_law_comp_bit_width_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/u-law/comp-bit-width
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_u_law_comp_bit_width_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_u_law_comp_shift_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/u-law/comp-shift
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_u_law_comp_shift_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression_active_beam_space_coeficient_mask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/beam-space-compression/active-beam-space-coeficient-mask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression_active_beam_space_coeficient_mask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression_block_scaler_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/beam-space-compression/block-scaler
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_beam_space_compression_block_scaler_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_modulation_compression_csf_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/modulation-compression/csf
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_modulation_compression_csf_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_modulation_compression_mod_comp_scaler_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression/compression-format/modulation-compression/mod-comp-scaler
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_compression_format_modulation_compression_mod_comp_scaler_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/compression
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_compression_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_frame_structure_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/frame-structure
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_frame_structure_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_cp_type_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/cp-type
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_cp_type_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_cp_length_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/cp-length
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_cp_length_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_cp_length_other_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/cp-length-other
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_cp_length_other_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_offset_to_absolute_frequency_center_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/offset-to-absolute-frequency-center
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_offset_to_absolute_frequency_center_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_number_of_prb_per_scs_number_of_prb_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/number-of-prb-per-scs/number-of-prb
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_number_of_prb_per_scs_number_of_prb_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_number_of_prb_per_scs_scs);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_number_of_prb_per_scs_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/number-of-prb-per-scs
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_number_of_prb_per_scs_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_number_of_prb_per_scs_scs);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_ul_fft_sampling_offsets_ul_fft_sampling_offset_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/ul-fft-sampling-offsets/ul-fft-sampling-offset
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_ul_fft_sampling_offsets_ul_fft_sampling_offset_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_ul_fft_sampling_offsets_scs);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_ul_fft_sampling_offsets_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/ul-fft-sampling-offsets
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_ul_fft_sampling_offsets_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_ul_fft_sampling_offsets_scs);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_o_du_port_bitmask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/e-axcid/o-du-port-bitmask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_o_du_port_bitmask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_band_sector_bitmask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/e-axcid/band-sector-bitmask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_band_sector_bitmask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_ccid_bitmask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/e-axcid/ccid-bitmask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_ccid_bitmask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_ru_port_bitmask_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/e-axcid/ru-port-bitmask
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_ru_port_bitmask_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_eaxc_id_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/e-axcid/eaxc-id
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_eaxc_id_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/e-axcid
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_e_axcid_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_non_time_managed_delay_enabled_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints/non-time-managed-delay-enabled
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_non_time_managed_delay_enabled_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_edit
*
* Edit database object callback
* Path: /user-plane-configuration/low-level-rx-endpoints
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_low_level_rx_endpoints_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_low_level_rx_endpoints_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_absolute_frequency_center_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/absolute-frequency-center
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_absolute_frequency_center_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_center_of_channel_bandwidth_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/center-of-channel-bandwidth
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_center_of_channel_bandwidth_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_channel_bandwidth_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/channel-bandwidth
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_channel_bandwidth_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_active_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/active
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_active_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_state_get
*
* Get database object callback for leaf state
* Path: /user-plane-configuration/tx-array-carriers/state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_state_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_type_get
*
* Get database object callback for leaf type
* Path: /user-plane-configuration/tx-array-carriers/type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_type_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_duplex_scheme_get
*
* Get database object callback for leaf duplex-scheme
* Path: /user-plane-configuration/tx-array-carriers/duplex-scheme
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_duplex_scheme_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


#ifdef u_o_ran_module_cap_F_LAA
/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_band_number_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/band-number
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_band_number_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);

#endif /* u_o_ran_module_cap_F_LAA */

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_lte_tdd_frame_subframe_assignment_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/lte-tdd-frame/subframe-assignment
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_lte_tdd_frame_subframe_assignment_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_lte_tdd_frame_special_subframe_pattern_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/lte-tdd-frame/special-subframe-pattern
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_lte_tdd_frame_special_subframe_pattern_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_lte_tdd_frame_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/lte-tdd-frame
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_lte_tdd_frame_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


#ifdef u_o_ran_module_cap_F_LAA

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_ed_threshold_pdsch_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/ed-threshold-pdsch
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_ed_threshold_pdsch_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_ed_threshold_drs_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/ed-threshold-drs
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_ed_threshold_drs_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_tx_antenna_ports_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/tx-antenna-ports
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_tx_antenna_ports_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_transmission_power_for_drs_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/transmission-power-for-drs
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_transmission_power_for_drs_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_dmtc_period_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/dmtc-period
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_dmtc_period_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_dmtc_offset_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/dmtc-offset
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_dmtc_offset_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_lbt_timer_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/lbt-timer
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_lbt_timer_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_max_cw_usage_counter_counter_value_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/max-cw-usage-counter/counter-value
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_max_cw_usage_counter_counter_value_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_max_cw_usage_counter_priority);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_max_cw_usage_counter_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration/max-cw-usage-counter
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_max_cw_usage_counter_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_max_cw_usage_counter_priority);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/laa-carrier-configuration
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_laa_carrier_configuration_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);

#endif /* u_o_ran_module_cap_F_LAA */

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_gain_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/gain
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_gain_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_downlink_radio_frame_offset_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/downlink-radio-frame-offset
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_downlink_radio_frame_offset_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_downlink_sfn_offset_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers/downlink-sfn-offset
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_downlink_sfn_offset_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_edit
*
* Edit database object callback
* Path: /user-plane-configuration/tx-array-carriers
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_array_carriers_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_tx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_absolute_frequency_center_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers/absolute-frequency-center
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_absolute_frequency_center_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_center_of_channel_bandwidth_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers/center-of-channel-bandwidth
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_center_of_channel_bandwidth_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_channel_bandwidth_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers/channel-bandwidth
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_channel_bandwidth_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_active_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers/active
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_active_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_state_get
*
* Get database object callback for leaf state
* Path: /user-plane-configuration/rx-array-carriers/state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_state_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_type_get
*
* Get database object callback for leaf type
* Path: /user-plane-configuration/rx-array-carriers/type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_type_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_duplex_scheme_get
*
* Get database object callback for leaf duplex-scheme
* Path: /user-plane-configuration/rx-array-carriers/duplex-scheme
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_duplex_scheme_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_downlink_radio_frame_offset_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers/downlink-radio-frame-offset
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_downlink_radio_frame_offset_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_downlink_sfn_offset_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers/downlink-sfn-offset
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_downlink_sfn_offset_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_gain_correction_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers/gain-correction
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_gain_correction_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_n_ta_offset_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers/n-ta-offset
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_n_ta_offset_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_edit
*
* Edit database object callback
* Path: /user-plane-configuration/rx-array-carriers
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_array_carriers_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_user_plane_configuration_rx_array_carriers_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_arrays_normal_vector_direction_get
*
* Get database object callback for container normal-vector-direction
* Path: /user-plane-configuration/tx-arrays/normal-vector-direction
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_arrays_normal_vector_direction_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_tx_arrays_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_arrays_leftmost_bottom_array_element_position_get
*
* Get database object callback for container leftmost-bottom-array-element-position
* Path: /user-plane-configuration/tx-arrays/leftmost-bottom-array-element-position
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_arrays_leftmost_bottom_array_element_position_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_tx_arrays_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_arrays_polarisations_get
*
* Get database object callback for list polarisations
* Path: /user-plane-configuration/tx-arrays/polarisations
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_arrays_polarisations_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_tx_arrays_name,
    uint8 k_user_plane_configuration_tx_arrays_polarisations_p,
    boolean p_fixed,
    boolean p_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_tx_arrays_get
*
* Get database object callback for list tx-arrays
* Path: /user-plane-configuration/tx-arrays
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_tx_arrays_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_tx_arrays_name,
    boolean name_fixed,
    boolean name_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_normal_vector_direction_get
*
* Get database object callback for container normal-vector-direction
* Path: /user-plane-configuration/rx-arrays/normal-vector-direction
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_normal_vector_direction_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_rx_arrays_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_leftmost_bottom_array_element_position_get
*
* Get database object callback for container leftmost-bottom-array-element-position
* Path: /user-plane-configuration/rx-arrays/leftmost-bottom-array-element-position
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_leftmost_bottom_array_element_position_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_rx_arrays_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_polarisations_get
*
* Get database object callback for list polarisations
* Path: /user-plane-configuration/rx-arrays/polarisations
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_polarisations_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_rx_arrays_name,
    uint8 k_user_plane_configuration_rx_arrays_polarisations_p,
    boolean p_fixed,
    boolean p_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_gain_correction_range_get
*
* Get database object callback for container gain-correction-range
* Path: /user-plane-configuration/rx-arrays/gain-correction-range
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_gain_correction_range_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_rx_arrays_name);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_get
*
* Get database object callback for list rx-arrays
* Path: /user-plane-configuration/rx-arrays
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_rx_arrays_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_user_plane_configuration_rx_arrays_name,
    boolean name_fixed,
    boolean name_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_relations_array1_antenna_type_get
*
* Get database object callback for choice antenna-type
* Path: /user-plane-configuration/relations/array1/antenna-type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_relations_array1_antenna_type_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_relations_entity);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_relations_array1_get
*
* Get database object callback for container array1
* Path: /user-plane-configuration/relations/array1
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_relations_array1_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_relations_entity);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_relations_array2_antenna_type_get
*
* Get database object callback for choice antenna-type
* Path: /user-plane-configuration/relations/array2/antenna-type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_relations_array2_antenna_type_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_relations_entity);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_relations_array2_get
*
* Get database object callback for container array2
* Path: /user-plane-configuration/relations/array2
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_relations_array2_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_relations_entity);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_relations_types_pairs_get
*
* Get database object callback for list pairs
* Path: /user-plane-configuration/relations/types/pairs
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_relations_types_pairs_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_relations_entity,
    const xmlChar *k_user_plane_configuration_relations_types_relation_type,
    uint16 k_user_plane_configuration_relations_types_pairs_element_array1,
    boolean element_array1_fixed,
    boolean element_array1_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_relations_types_get
*
* Get database object callback for list types
* Path: /user-plane-configuration/relations/types
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_relations_types_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_relations_entity,
    const xmlChar *k_user_plane_configuration_relations_types_relation_type,
    boolean relation_type_fixed,
    boolean relation_type_present);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_relations_get
*
* Get database object callback for list relations
* Path: /user-plane-configuration/relations
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_relations_get (
    getcb_get2_t *get2cb,
    uint16 k_user_plane_configuration_relations_entity,
    boolean entity_fixed,
    boolean entity_present);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_user_plane_configuration_edit
*
* Edit database object callback
* Path: /user-plane-configuration
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_user_plane_configuration_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_tx_array_carriers_state_change_send
*
* Send a u_o_ran_uplane_conf_tx_array_carriers_state_change notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_uplane_conf_tx_array_carriers_state_change_send (
    dlq_hdr_t *v_tx_array_carriers);


/********************************************************************
* FUNCTION u_o_ran_uplane_conf_rx_array_carriers_state_change_send
*
* Send a u_o_ran_uplane_conf_rx_array_carriers_state_change notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_uplane_conf_rx_array_carriers_state_change_send (
    dlq_hdr_t *v_rx_array_carriers);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_init
*
* initialize the o-ran-uplane-conf server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_uplane_conf_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_uplane_conf_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_uplane_conf_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
