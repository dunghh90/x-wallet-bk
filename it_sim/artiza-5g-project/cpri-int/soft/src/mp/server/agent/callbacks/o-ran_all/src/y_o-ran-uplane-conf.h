
#ifndef _H_y_o_ran_uplane_conf
#define _H_y_o_ran_uplane_conf
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    YumaPro SIL-SA header
    bundle o-ran_all
    module o-ran-uplane-conf
    revision 2019-02-04
    namespace urn:o-ran:uplane-conf:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:30Z
    CLI parameters:
        defnames true
        format yh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_o_ran_uplane_conf_M_o_ran_uplane_conf (const xmlChar *)"o-ran-uplane-conf"

#define y_o_ran_uplane_conf_R_o_ran_uplane_conf (const xmlChar *)"2019-02-04"

#define y_o_ran_uplane_conf_N_absolute_frequency_center (const xmlChar *)"absolute-frequency-center"
#define y_o_ran_uplane_conf_N_active (const xmlChar *)"active"
#define y_o_ran_uplane_conf_N_active_beam_space_coeficient_mask (const xmlChar *)"active-beam-space-coeficient-mask"
#define y_o_ran_uplane_conf_N_antenna_type (const xmlChar *)"antenna-type"
#define y_o_ran_uplane_conf_N_array (const xmlChar *)"array"
#define y_o_ran_uplane_conf_N_array1 (const xmlChar *)"array1"
#define y_o_ran_uplane_conf_N_array2 (const xmlChar *)"array2"
#define y_o_ran_uplane_conf_N_azimuth_angle (const xmlChar *)"azimuth-angle"
#define y_o_ran_uplane_conf_N_band_number (const xmlChar *)"band-number"
#define y_o_ran_uplane_conf_N_band_sector_bitmask (const xmlChar *)"band-sector-bitmask"
#define y_o_ran_uplane_conf_N_beam_space_compression (const xmlChar *)"beam-space-compression"
#define y_o_ran_uplane_conf_N_bitwidth (const xmlChar *)"bitwidth"
#define y_o_ran_uplane_conf_N_block_floating_point (const xmlChar *)"block-floating-point"
#define y_o_ran_uplane_conf_N_block_scalar (const xmlChar *)"block-scalar"
#define y_o_ran_uplane_conf_N_block_scaler (const xmlChar *)"block-scaler"
#define y_o_ran_uplane_conf_N_block_scaling (const xmlChar *)"block-scaling"
#define y_o_ran_uplane_conf_N_capacity_sharing_groups (const xmlChar *)"capacity-sharing-groups"
#define y_o_ran_uplane_conf_N_ccid_bitmask (const xmlChar *)"ccid-bitmask"
#define y_o_ran_uplane_conf_N_center_of_channel_bandwidth (const xmlChar *)"center-of-channel-bandwidth"
#define y_o_ran_uplane_conf_N_channel_bandwidth (const xmlChar *)"channel-bandwidth"
#define y_o_ran_uplane_conf_N_comp_bit_width (const xmlChar *)"comp-bit-width"
#define y_o_ran_uplane_conf_N_comp_shift (const xmlChar *)"comp-shift"
#define y_o_ran_uplane_conf_N_compression (const xmlChar *)"compression"
#define y_o_ran_uplane_conf_N_compression_format (const xmlChar *)"compression-format"
#define y_o_ran_uplane_conf_N_compression_type (const xmlChar *)"compression-type"
#define y_o_ran_uplane_conf_N_counter_value (const xmlChar *)"counter-value"
#define y_o_ran_uplane_conf_N_cp_length (const xmlChar *)"cp-length"
#define y_o_ran_uplane_conf_N_cp_length_other (const xmlChar *)"cp-length-other"
#define y_o_ran_uplane_conf_N_cp_type (const xmlChar *)"cp-type"
#define y_o_ran_uplane_conf_N_csf (const xmlChar *)"csf"
#define y_o_ran_uplane_conf_N_dmtc_offset (const xmlChar *)"dmtc-offset"
#define y_o_ran_uplane_conf_N_dmtc_period (const xmlChar *)"dmtc-period"
#define y_o_ran_uplane_conf_N_downlink_radio_frame_offset (const xmlChar *)"downlink-radio-frame-offset"
#define y_o_ran_uplane_conf_N_downlink_sfn_offset (const xmlChar *)"downlink-sfn-offset"
#define y_o_ran_uplane_conf_N_duplex_scheme (const xmlChar *)"duplex-scheme"
#define y_o_ran_uplane_conf_N_e_axcid (const xmlChar *)"e-axcid"
#define y_o_ran_uplane_conf_N_eaxc_id (const xmlChar *)"eaxc-id"
#define y_o_ran_uplane_conf_N_ed_threshold_drs (const xmlChar *)"ed-threshold-drs"
#define y_o_ran_uplane_conf_N_ed_threshold_pdsch (const xmlChar *)"ed-threshold-pdsch"
#define y_o_ran_uplane_conf_N_element_array1 (const xmlChar *)"element-array1"
#define y_o_ran_uplane_conf_N_element_array2 (const xmlChar *)"element-array2"
#define y_o_ran_uplane_conf_N_endpoint_capacity_sharing_groups (const xmlChar *)"endpoint-capacity-sharing-groups"
#define y_o_ran_uplane_conf_N_endpoint_type (const xmlChar *)"endpoint-type"
#define y_o_ran_uplane_conf_N_endpoint_types (const xmlChar *)"endpoint-types"
#define y_o_ran_uplane_conf_N_entity (const xmlChar *)"entity"
#define y_o_ran_uplane_conf_N_exponent (const xmlChar *)"exponent"
#define y_o_ran_uplane_conf_N_frame_structure (const xmlChar *)"frame-structure"
#define y_o_ran_uplane_conf_N_gain (const xmlChar *)"gain"
#define y_o_ran_uplane_conf_N_gain_correction (const xmlChar *)"gain-correction"
#define y_o_ran_uplane_conf_N_gain_correction_range (const xmlChar *)"gain-correction-range"
#define y_o_ran_uplane_conf_N_horizontal_spacing (const xmlChar *)"horizontal-spacing"
#define y_o_ran_uplane_conf_N_id (const xmlChar *)"id"
#define y_o_ran_uplane_conf_N_independent_power_budget (const xmlChar *)"independent-power-budget"
#define y_o_ran_uplane_conf_N_laa_carrier_configuration (const xmlChar *)"laa-carrier-configuration"
#define y_o_ran_uplane_conf_N_lbt_timer (const xmlChar *)"lbt-timer"
#define y_o_ran_uplane_conf_N_leftmost_bottom_array_element_position (const xmlChar *)"leftmost-bottom-array-element-position"
#define y_o_ran_uplane_conf_N_low_level_rx_endpoint (const xmlChar *)"low-level-rx-endpoint"
#define y_o_ran_uplane_conf_N_low_level_rx_endpoints (const xmlChar *)"low-level-rx-endpoints"
#define y_o_ran_uplane_conf_N_low_level_rx_links (const xmlChar *)"low-level-rx-links"
#define y_o_ran_uplane_conf_N_low_level_tx_endpoint (const xmlChar *)"low-level-tx-endpoint"
#define y_o_ran_uplane_conf_N_low_level_tx_endpoints (const xmlChar *)"low-level-tx-endpoints"
#define y_o_ran_uplane_conf_N_low_level_tx_links (const xmlChar *)"low-level-tx-links"
#define y_o_ran_uplane_conf_N_lte_tdd_frame (const xmlChar *)"lte-tdd-frame"
#define y_o_ran_uplane_conf_N_managed_delay_support (const xmlChar *)"managed-delay-support"
#define y_o_ran_uplane_conf_N_max (const xmlChar *)"max"
#define y_o_ran_uplane_conf_N_max_beams_per_slot (const xmlChar *)"max-beams-per-slot"
#define y_o_ran_uplane_conf_N_max_beams_per_symbol (const xmlChar *)"max-beams-per-symbol"
#define y_o_ran_uplane_conf_N_max_control_sections_per_data_section (const xmlChar *)"max-control-sections-per-data-section"
#define y_o_ran_uplane_conf_N_max_cw_usage_counter (const xmlChar *)"max-cw-usage-counter"
#define y_o_ran_uplane_conf_N_max_endpoints (const xmlChar *)"max-endpoints"
#define y_o_ran_uplane_conf_N_max_gain (const xmlChar *)"max-gain"
#define y_o_ran_uplane_conf_N_max_managed_delay_endpoints (const xmlChar *)"max-managed-delay-endpoints"
#define y_o_ran_uplane_conf_N_max_non_managed_delay_endpoints (const xmlChar *)"max-non-managed-delay-endpoints"
#define y_o_ran_uplane_conf_N_max_numerologies_per_symbol (const xmlChar *)"max-numerologies-per-symbol"
#define y_o_ran_uplane_conf_N_max_numerology_change_duration (const xmlChar *)"max-numerology-change-duration"
#define y_o_ran_uplane_conf_N_max_prb_per_symbol (const xmlChar *)"max-prb-per-symbol"
#define y_o_ran_uplane_conf_N_max_sections_per_slot (const xmlChar *)"max-sections-per-slot"
#define y_o_ran_uplane_conf_N_max_sections_per_symbol (const xmlChar *)"max-sections-per-symbol"
#define y_o_ran_uplane_conf_N_min (const xmlChar *)"min"
#define y_o_ran_uplane_conf_N_mod_comp_scaler (const xmlChar *)"mod-comp-scaler"
#define y_o_ran_uplane_conf_N_modulation_compression (const xmlChar *)"modulation-compression"
#define y_o_ran_uplane_conf_N_n_ta_offset (const xmlChar *)"n-ta-offset"
#define y_o_ran_uplane_conf_N_name (const xmlChar *)"name"
#define y_o_ran_uplane_conf_N_no_compresison (const xmlChar *)"no-compresison"
#define y_o_ran_uplane_conf_N_non_time_managed_delay_enabled (const xmlChar *)"non-time-managed-delay-enabled"
#define y_o_ran_uplane_conf_N_normal_vector_direction (const xmlChar *)"normal-vector-direction"
#define y_o_ran_uplane_conf_N_number_of_array_layers (const xmlChar *)"number-of-array-layers"
#define y_o_ran_uplane_conf_N_number_of_columns (const xmlChar *)"number-of-columns"
#define y_o_ran_uplane_conf_N_number_of_prb (const xmlChar *)"number-of-prb"
#define y_o_ran_uplane_conf_N_number_of_prb_per_scs (const xmlChar *)"number-of-prb-per-scs"
#define y_o_ran_uplane_conf_N_number_of_rows (const xmlChar *)"number-of-rows"
#define y_o_ran_uplane_conf_N_o_du_port_bitmask (const xmlChar *)"o-du-port-bitmask"
#define y_o_ran_uplane_conf_N_offset_to_absolute_frequency_center (const xmlChar *)"offset-to-absolute-frequency-center"
#define y_o_ran_uplane_conf_N_p (const xmlChar *)"p"
#define y_o_ran_uplane_conf_N_pairs (const xmlChar *)"pairs"
#define y_o_ran_uplane_conf_N_polarisation (const xmlChar *)"polarisation"
#define y_o_ran_uplane_conf_N_polarisations (const xmlChar *)"polarisations"
#define y_o_ran_uplane_conf_N_prb_capacity_allocation_granularity (const xmlChar *)"prb-capacity-allocation-granularity"
#define y_o_ran_uplane_conf_N_priority (const xmlChar *)"priority"
#define y_o_ran_uplane_conf_N_processing_element (const xmlChar *)"processing-element"
#define y_o_ran_uplane_conf_N_relation_type (const xmlChar *)"relation-type"
#define y_o_ran_uplane_conf_N_relations (const xmlChar *)"relations"
#define y_o_ran_uplane_conf_N_restricted_interfaces (const xmlChar *)"restricted-interfaces"
#define y_o_ran_uplane_conf_N_ru_port_bitmask (const xmlChar *)"ru-port-bitmask"
#define y_o_ran_uplane_conf_N_rx (const xmlChar *)"rx"
#define y_o_ran_uplane_conf_N_rx_array_carrier (const xmlChar *)"rx-array-carrier"
#define y_o_ran_uplane_conf_N_rx_array_carriers (const xmlChar *)"rx-array-carriers"
#define y_o_ran_uplane_conf_N_rx_array_carriers_state_change (const xmlChar *)"rx-array-carriers-state-change"
#define y_o_ran_uplane_conf_N_rx_array_name (const xmlChar *)"rx-array-name"
#define y_o_ran_uplane_conf_N_rx_arrays (const xmlChar *)"rx-arrays"
#define y_o_ran_uplane_conf_N_scs (const xmlChar *)"scs"
#define y_o_ran_uplane_conf_N_section_type (const xmlChar *)"section-type"
#define y_o_ran_uplane_conf_N_special_subframe_pattern (const xmlChar *)"special-subframe-pattern"
#define y_o_ran_uplane_conf_N_state (const xmlChar *)"state"
#define y_o_ran_uplane_conf_N_static_low_level_rx_endpoints (const xmlChar *)"static-low-level-rx-endpoints"
#define y_o_ran_uplane_conf_N_static_low_level_tx_endpoints (const xmlChar *)"static-low-level-tx-endpoints"
#define y_o_ran_uplane_conf_N_subframe_assignment (const xmlChar *)"subframe-assignment"
#define y_o_ran_uplane_conf_N_supported_frame_structures (const xmlChar *)"supported-frame-structures"
#define y_o_ran_uplane_conf_N_supported_section_extensions (const xmlChar *)"supported-section-extensions"
#define y_o_ran_uplane_conf_N_supported_section_types (const xmlChar *)"supported-section-types"
#define y_o_ran_uplane_conf_N_transmission_power_for_drs (const xmlChar *)"transmission-power-for-drs"
#define y_o_ran_uplane_conf_N_tx (const xmlChar *)"tx"
#define y_o_ran_uplane_conf_N_tx_antenna_ports (const xmlChar *)"tx-antenna-ports"
#define y_o_ran_uplane_conf_N_tx_array_carrier (const xmlChar *)"tx-array-carrier"
#define y_o_ran_uplane_conf_N_tx_array_carriers (const xmlChar *)"tx-array-carriers"
#define y_o_ran_uplane_conf_N_tx_array_carriers_state_change (const xmlChar *)"tx-array-carriers-state-change"
#define y_o_ran_uplane_conf_N_tx_array_name (const xmlChar *)"tx-array-name"
#define y_o_ran_uplane_conf_N_tx_arrays (const xmlChar *)"tx-arrays"
#define y_o_ran_uplane_conf_N_type (const xmlChar *)"type"
#define y_o_ran_uplane_conf_N_types (const xmlChar *)"types"
#define y_o_ran_uplane_conf_N_u_law (const xmlChar *)"u-law"
#define y_o_ran_uplane_conf_N_ul_fft_sampling_offset (const xmlChar *)"ul-fft-sampling-offset"
#define y_o_ran_uplane_conf_N_ul_fft_sampling_offsets (const xmlChar *)"ul-fft-sampling-offsets"
#define y_o_ran_uplane_conf_N_user_plane_configuration (const xmlChar *)"user-plane-configuration"
#define y_o_ran_uplane_conf_N_user_plane_uplink_marking (const xmlChar *)"user-plane-uplink-marking"
#define y_o_ran_uplane_conf_N_vertical_spacing (const xmlChar *)"vertical-spacing"
#define y_o_ran_uplane_conf_N_x (const xmlChar *)"x"
#define y_o_ran_uplane_conf_N_y (const xmlChar *)"y"
#define y_o_ran_uplane_conf_N_z (const xmlChar *)"z"
#define y_o_ran_uplane_conf_N_zenith_angle (const xmlChar *)"zenith-angle"


/********************************************************************
* FUNCTION y_o_ran_uplane_conf_init
*
* initialize the o-ran-uplane-conf server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_o_ran_uplane_conf_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_o_ran_uplane_conf_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_o_ran_uplane_conf_init2 (void);

/********************************************************************
* FUNCTION y_o_ran_uplane_conf_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void y_o_ran_uplane_conf_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
