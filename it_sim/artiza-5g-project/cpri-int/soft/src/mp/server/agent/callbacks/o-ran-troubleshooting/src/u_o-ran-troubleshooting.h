
#ifndef _H_u_o_ran_troubleshooting
#define _H_u_o_ran_troubleshooting
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    module o-ran-troubleshooting
    revision 2019-02-04
    namespace urn:o-ran:troubleshooting:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:28Z
    CLI parameters:
        format uh
        indent 4
        module o-ran-troubleshooting
        output u_o-ran-troubleshooting.h
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "agt_rpc.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-troubleshooting.h"

#ifdef __cplusplus
extern "C" {
#endif

/* container /start-troubleshooting-logs/output */
typedef struct y_o_ran_troubleshooting_T_start_troubleshooting_logs_output_ {
    xmlChar *v_status;
    xmlChar *v_failure_reason;
} y_o_ran_troubleshooting_T_start_troubleshooting_logs_output;

/* container /start-troubleshooting-logs/input */
typedef struct y_o_ran_troubleshooting_T_start_troubleshooting_logs_input_ {
} y_o_ran_troubleshooting_T_start_troubleshooting_logs_input;

/* rpc /start-troubleshooting-logs */
typedef struct y_o_ran_troubleshooting_T_start_troubleshooting_logs_ {
    y_o_ran_troubleshooting_T_start_troubleshooting_logs_output v_output;
    y_o_ran_troubleshooting_T_start_troubleshooting_logs_input v_input;
} y_o_ran_troubleshooting_T_start_troubleshooting_logs;

/* container /stop-troubleshooting-logs/output */
typedef struct y_o_ran_troubleshooting_T_stop_troubleshooting_logs_output_ {
    xmlChar *v_status;
    xmlChar *v_failure_reason;
} y_o_ran_troubleshooting_T_stop_troubleshooting_logs_output;

/* container /stop-troubleshooting-logs/input */
typedef struct y_o_ran_troubleshooting_T_stop_troubleshooting_logs_input_ {
} y_o_ran_troubleshooting_T_stop_troubleshooting_logs_input;

/* rpc /stop-troubleshooting-logs */
typedef struct y_o_ran_troubleshooting_T_stop_troubleshooting_logs_ {
    y_o_ran_troubleshooting_T_stop_troubleshooting_logs_output v_output;
    y_o_ran_troubleshooting_T_stop_troubleshooting_logs_input v_input;
} y_o_ran_troubleshooting_T_stop_troubleshooting_logs;

/* leaf-list /troubleshooting-log-generated/log-file-name */
typedef struct y_o_ran_troubleshooting_T_troubleshooting_log_generated_log_file_name_ {
    dlq_hdr_t qhdr;
    xmlChar *v_log_file_name;
} y_o_ran_troubleshooting_T_troubleshooting_log_generated_log_file_name;

/* notification /troubleshooting-log-generated */
typedef struct y_o_ran_troubleshooting_T_troubleshooting_log_generated_ {
    dlq_hdr_t v_log_file_name;
} y_o_ran_troubleshooting_T_troubleshooting_log_generated;


/********************************************************************
* FUNCTION u_o_ran_troubleshooting_start_troubleshooting_logs_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_troubleshooting_start_troubleshooting_logs_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_troubleshooting_start_troubleshooting_logs_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_troubleshooting_start_troubleshooting_logs_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_troubleshooting_stop_troubleshooting_logs_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_troubleshooting_stop_troubleshooting_logs_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_troubleshooting_stop_troubleshooting_logs_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_troubleshooting_stop_troubleshooting_logs_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_troubleshooting_troubleshooting_log_generated_send
*
* Send a u_o_ran_troubleshooting_troubleshooting_log_generated notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_troubleshooting_troubleshooting_log_generated_send (
    const xmlChar *v_log_file_name);

/********************************************************************
* FUNCTION u_o_ran_troubleshooting_init
*
* initialize the o-ran-troubleshooting server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_troubleshooting_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_troubleshooting_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_troubleshooting_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_troubleshooting_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_troubleshooting_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
