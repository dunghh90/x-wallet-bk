
#ifndef _H_u_o_ran_transceiver
#define _H_u_o_ran_transceiver
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-transceiver
    revision 2019-02-04
    namespace urn:o-ran:transceiver:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-transceiver.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif

/* list /port-transceivers/port-transceiver-data */
typedef struct y_o_ran_transceiver_T_port_transceivers_port_transceiver_data_ {
    dlq_hdr_t qhdr;
    xmlChar *v_interface_name;
    xmlChar *v_port_number;
    xmlChar *v_name;
    boolean v_present;
    xmlChar *v_vendor_id;
    xmlChar *v_vendor_part;
    xmlChar *v_vendor_rev;
    xmlChar *v_serial_no;
    xmlChar *v_SFF8472_compliance_code;
    xmlChar *v_connector_type;
    uint32 v_nominal_bitrate;
    uint8 v_low_bitrate_margin;
    uint8 v_high_bitrate_margin;
    xmlChar *v_rx_power_type;
    int64 v_rx_power;
    int64 v_tx_power;
    int64 v_tx_bias_current;
    int64 v_voltage;
    int64 v_temperature;
} y_o_ran_transceiver_T_port_transceivers_port_transceiver_data;

/* container /port-transceivers */
typedef struct y_o_ran_transceiver_T_port_transceivers_ {
    dlq_hdr_t v_port_transceiver_data;
} y_o_ran_transceiver_T_port_transceivers;


/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_name_edit
*
* Edit database object callback
* Path: /port-transceivers/port-transceiver-data/name
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_name_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_present_get
*
* Get database object callback for leaf present
* Path: /port-transceivers/port-transceiver-data/present
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_present_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_vendor_id_get
*
* Get database object callback for leaf vendor-id
* Path: /port-transceivers/port-transceiver-data/vendor-id
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_vendor_id_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_vendor_part_get
*
* Get database object callback for leaf vendor-part
* Path: /port-transceivers/port-transceiver-data/vendor-part
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_vendor_part_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_vendor_rev_get
*
* Get database object callback for leaf vendor-rev
* Path: /port-transceivers/port-transceiver-data/vendor-rev
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_vendor_rev_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_serial_no_get
*
* Get database object callback for leaf serial-no
* Path: /port-transceivers/port-transceiver-data/serial-no
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_serial_no_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_SFF8472_compliance_code_get
*
* Get database object callback for leaf SFF8472-compliance-code
* Path: /port-transceivers/port-transceiver-data/SFF8472-compliance-code
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_SFF8472_compliance_code_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_connector_type_get
*
* Get database object callback for leaf connector-type
* Path: /port-transceivers/port-transceiver-data/connector-type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_connector_type_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_nominal_bitrate_get
*
* Get database object callback for leaf nominal-bitrate
* Path: /port-transceivers/port-transceiver-data/nominal-bitrate
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_nominal_bitrate_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_low_bitrate_margin_get
*
* Get database object callback for leaf low-bitrate-margin
* Path: /port-transceivers/port-transceiver-data/low-bitrate-margin
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_low_bitrate_margin_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_high_bitrate_margin_get
*
* Get database object callback for leaf high-bitrate-margin
* Path: /port-transceivers/port-transceiver-data/high-bitrate-margin
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_high_bitrate_margin_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_rx_power_type_get
*
* Get database object callback for leaf rx-power-type
* Path: /port-transceivers/port-transceiver-data/rx-power-type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_rx_power_type_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_rx_power_get
*
* Get database object callback for leaf rx-power
* Path: /port-transceivers/port-transceiver-data/rx-power
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_rx_power_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_tx_power_get
*
* Get database object callback for leaf tx-power
* Path: /port-transceivers/port-transceiver-data/tx-power
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_tx_power_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_tx_bias_current_get
*
* Get database object callback for leaf tx-bias-current
* Path: /port-transceivers/port-transceiver-data/tx-bias-current
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_tx_bias_current_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_voltage_get
*
* Get database object callback for leaf voltage
* Path: /port-transceivers/port-transceiver-data/voltage
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_voltage_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);

/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_temperature_get
*
* Get database object callback for leaf temperature
* Path: /port-transceivers/port-transceiver-data/temperature
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_temperature_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);


/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_port_transceiver_data_edit
*
* Edit database object callback
* Path: /port-transceivers/port-transceiver-data
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_port_transceiver_data_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_port_transceivers_port_transceiver_data_interface_name,
    const xmlChar *k_port_transceivers_port_transceiver_data_port_number);


/********************************************************************
* FUNCTION u_o_ran_transceiver_port_transceivers_edit
*
* Edit database object callback
* Path: /port-transceivers
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_port_transceivers_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_o_ran_transceiver_init
*
* initialize the o-ran-transceiver server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_transceiver_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_transceiver_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_transceiver_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_transceiver_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
