
#ifndef _H_u_o_ran_dhcp
#define _H_u_o_ran_dhcp
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module o-ran-dhcp
    revision 2019-02-04
    namespace urn:o-ran:dhcp:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-dhcp.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif

/* leaf-list /dhcp/interfaces/dhcpv4/domain-name-servers */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4_domain_name_servers_ {
    dlq_hdr_t qhdr;
    val_value_t *v_domain_name_servers;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4_domain_name_servers;

/* leaf-list /dhcp/interfaces/dhcpv4/default-gateways */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4_default_gateways_ {
    dlq_hdr_t qhdr;
    val_value_t *v_default_gateways;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4_default_gateways;

/* list /dhcp/interfaces/dhcpv4/netconf-clients */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4_netconf_clients_ {
    dlq_hdr_t qhdr;
    val_value_t *v_client;
    uint16 v_optional_port;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4_netconf_clients;

/* container /dhcp/interfaces/dhcpv4 */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4_ {
    xmlChar *v_client_id;
    val_value_t *v_dhcp_server_identifier;
    xmlChar *v_domain_name;
    dlq_hdr_t v_domain_name_servers;
    uint32 v_interface_mtu;
    dlq_hdr_t v_default_gateways;
    dlq_hdr_t v_netconf_clients;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4;

/* case /dhcp/interfaces/dhcpv6/dhcp-client-identifier/duid-type/duid-llt */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_llt_ {
    uint16 v_duid_llt_hardware_type;
    uint32 v_duid_llt_time;
    xmlChar *v_duid_llt_link_layer_addr;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_llt;

/* case /dhcp/interfaces/dhcpv6/dhcp-client-identifier/duid-type/duid-en */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_en_ {
    uint32 v_duid_en_enterprise_number;
    xmlChar *v_duid_en_identifier;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_en;

/* case /dhcp/interfaces/dhcpv6/dhcp-client-identifier/duid-type/duid-ll */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_ll_ {
    uint16 v_duid_ll_hardware_type;
    xmlChar *v_duid_ll_link_layer_addr;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_ll;

/* case /dhcp/interfaces/dhcpv6/dhcp-client-identifier/duid-type/duid-uuid */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_uuid_ {
    xmlChar *v_uuid;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_uuid;

/* case /dhcp/interfaces/dhcpv6/dhcp-client-identifier/duid-type/duid-unknown */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_unknown_ {
    xmlChar *v_data;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_unknown;

/* choice /dhcp/interfaces/dhcpv6/dhcp-client-identifier/duid-type */
typedef union y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_ {
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_llt v_duid_llt;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_en v_duid_en;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_ll v_duid_ll;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_uuid v_duid_uuid;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_duid_unknown v_duid_unknown;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type;

/* container /dhcp/interfaces/dhcpv6/dhcp-client-identifier */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_ {
    uint16 v_type_code;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type v_duid_type;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier;

/* case /dhcp/interfaces/dhcpv6/dhcp-server-identifier/duid-type/duid-llt */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_llt_ {
    uint16 v_duid_llt_hardware_type;
    uint32 v_duid_llt_time;
    xmlChar *v_duid_llt_link_layer_addr;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_llt;

/* case /dhcp/interfaces/dhcpv6/dhcp-server-identifier/duid-type/duid-en */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_en_ {
    uint32 v_duid_en_enterprise_number;
    xmlChar *v_duid_en_identifier;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_en;

/* case /dhcp/interfaces/dhcpv6/dhcp-server-identifier/duid-type/duid-ll */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_ll_ {
    uint16 v_duid_ll_hardware_type;
    xmlChar *v_duid_ll_link_layer_addr;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_ll;

/* case /dhcp/interfaces/dhcpv6/dhcp-server-identifier/duid-type/duid-uuid */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_uuid_ {
    xmlChar *v_uuid;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_uuid;

/* case /dhcp/interfaces/dhcpv6/dhcp-server-identifier/duid-type/duid-unknown */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_unknown_ {
    xmlChar *v_data;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_unknown;

/* choice /dhcp/interfaces/dhcpv6/dhcp-server-identifier/duid-type */
typedef union y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_ {
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_llt v_duid_llt;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_en v_duid_en;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_ll v_duid_ll;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_uuid v_duid_uuid;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_duid_unknown v_duid_unknown;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type;

/* container /dhcp/interfaces/dhcpv6/dhcp-server-identifier */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_ {
    uint16 v_type_code;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type v_duid_type;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier;

/* leaf-list /dhcp/interfaces/dhcpv6/domain-name-servers */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_domain_name_servers_ {
    dlq_hdr_t qhdr;
    val_value_t *v_domain_name_servers;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_domain_name_servers;

/* list /dhcp/interfaces/dhcpv6/netconf-clients */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_netconf_clients_ {
    dlq_hdr_t qhdr;
    val_value_t *v_client;
    uint16 v_optional_port;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_netconf_clients;

/* container /dhcp/interfaces/dhcpv6 */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_ {
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_client_identifier v_dhcp_client_identifier;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6_dhcp_server_identifier v_dhcp_server_identifier;
    xmlChar *v_domain_name;
    dlq_hdr_t v_domain_name_servers;
    dlq_hdr_t v_netconf_clients;
} y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6;

/* list /dhcp/interfaces */
typedef struct y_o_ran_dhcp_T_dhcp_interfaces_ {
    dlq_hdr_t qhdr;
    xmlChar *v_interface;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv4 v_dhcpv4;
    y_o_ran_dhcp_T_dhcp_interfaces_dhcpv6 v_dhcpv6;
} y_o_ran_dhcp_T_dhcp_interfaces;

/* container /dhcp/m-plane-dhcp */
typedef struct y_o_ran_dhcp_T_dhcp_m_plane_dhcp_ {
    uint16 v_private_enterprise_number;
    xmlChar *v_vendor_class_data;
} y_o_ran_dhcp_T_dhcp_m_plane_dhcp;

/* container /dhcp */
typedef struct y_o_ran_dhcp_T_dhcp_ {
    dlq_hdr_t v_interfaces;
    y_o_ran_dhcp_T_dhcp_m_plane_dhcp v_m_plane_dhcp;
} y_o_ran_dhcp_T_dhcp;

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_dhcpv4_netconf_clients_get
*
* Get database object callback for list netconf-clients
* Path: /dhcp/interfaces/dhcpv4/netconf-clients
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_dhcpv4_netconf_clients_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface,
    val_value_t *k_dhcp_interfaces_dhcpv4_netconf_clients_client,
    boolean client_fixed,
    boolean client_present);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_dhcpv4_get
*
* Get database object callback for container dhcpv4
* Path: /dhcp/interfaces/dhcpv4
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_dhcpv4_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_get
*
* Get database object callback for choice duid-type
* Path: /dhcp/interfaces/dhcpv6/dhcp-client-identifier/duid-type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_dhcpv6_dhcp_client_identifier_duid_type_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_dhcpv6_dhcp_client_identifier_get
*
* Get database object callback for container dhcp-client-identifier
* Path: /dhcp/interfaces/dhcpv6/dhcp-client-identifier
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_dhcpv6_dhcp_client_identifier_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_get
*
* Get database object callback for choice duid-type
* Path: /dhcp/interfaces/dhcpv6/dhcp-server-identifier/duid-type
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_dhcpv6_dhcp_server_identifier_duid_type_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_dhcpv6_dhcp_server_identifier_get
*
* Get database object callback for container dhcp-server-identifier
* Path: /dhcp/interfaces/dhcpv6/dhcp-server-identifier
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_dhcpv6_dhcp_server_identifier_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_dhcpv6_netconf_clients_get
*
* Get database object callback for list netconf-clients
* Path: /dhcp/interfaces/dhcpv6/netconf-clients
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_dhcpv6_netconf_clients_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface,
    val_value_t *k_dhcp_interfaces_dhcpv6_netconf_clients_client,
    boolean client_fixed,
    boolean client_present);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_dhcpv6_get
*
* Get database object callback for container dhcpv6
* Path: /dhcp/interfaces/dhcpv6
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_dhcpv6_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_interfaces_get
*
* Get database object callback for list interfaces
* Path: /dhcp/interfaces
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_interfaces_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_dhcp_interfaces_interface,
    boolean interface_fixed,
    boolean interface_present);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_m_plane_dhcp_get
*
* Get database object callback for container m-plane-dhcp
* Path: /dhcp/m-plane-dhcp
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_m_plane_dhcp_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_dhcp_dhcp_get
*
* Get database object callback for container dhcp
* Path: /dhcp
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_dhcp_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_o_ran_dhcp_init
*
* initialize the o-ran-dhcp server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_dhcp_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_dhcp_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_dhcp_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_dhcp_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
