
#ifndef _H_y_ietf_netconf_acm
#define _H_y_ietf_netconf_acm
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    YumaPro SIL-SA header
    bundle o-ran_all
    module ietf-netconf-acm
    revision 2018-02-14
    namespace urn:ietf:params:xml:ns:yang:ietf-netconf-acm
    organization IETF NETCONF (Network Configuration) Working Group
    Created: 2019-12-20T02:20:30Z
    CLI parameters:
        defnames true
        format yh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_ietf_netconf_acm_M_ietf_netconf_acm (const xmlChar *)"ietf-netconf-acm"

#define y_ietf_netconf_acm_R_ietf_netconf_acm (const xmlChar *)"2018-02-14"

#define y_ietf_netconf_acm_N_access_operations (const xmlChar *)"access-operations"
#define y_ietf_netconf_acm_N_action (const xmlChar *)"action"
#define y_ietf_netconf_acm_N_comment (const xmlChar *)"comment"
#define y_ietf_netconf_acm_N_data_node (const xmlChar *)"data-node"
#define y_ietf_netconf_acm_N_denied_data_writes (const xmlChar *)"denied-data-writes"
#define y_ietf_netconf_acm_N_denied_notifications (const xmlChar *)"denied-notifications"
#define y_ietf_netconf_acm_N_denied_operations (const xmlChar *)"denied-operations"
#define y_ietf_netconf_acm_N_enable_external_groups (const xmlChar *)"enable-external-groups"
#define y_ietf_netconf_acm_N_enable_nacm (const xmlChar *)"enable-nacm"
#define y_ietf_netconf_acm_N_exec_default (const xmlChar *)"exec-default"
#define y_ietf_netconf_acm_N_group (const xmlChar *)"group"
#define y_ietf_netconf_acm_N_groups (const xmlChar *)"groups"
#define y_ietf_netconf_acm_N_module_name (const xmlChar *)"module-name"
#define y_ietf_netconf_acm_N_nacm (const xmlChar *)"nacm"
#define y_ietf_netconf_acm_N_name (const xmlChar *)"name"
#define y_ietf_netconf_acm_N_notification (const xmlChar *)"notification"
#define y_ietf_netconf_acm_N_notification_name (const xmlChar *)"notification-name"
#define y_ietf_netconf_acm_N_path (const xmlChar *)"path"
#define y_ietf_netconf_acm_N_protocol_operation (const xmlChar *)"protocol-operation"
#define y_ietf_netconf_acm_N_read_default (const xmlChar *)"read-default"
#define y_ietf_netconf_acm_N_rpc_name (const xmlChar *)"rpc-name"
#define y_ietf_netconf_acm_N_rule (const xmlChar *)"rule"
#define y_ietf_netconf_acm_N_rule_list (const xmlChar *)"rule-list"
#define y_ietf_netconf_acm_N_rule_type (const xmlChar *)"rule-type"
#define y_ietf_netconf_acm_N_user_name (const xmlChar *)"user-name"
#define y_ietf_netconf_acm_N_write_default (const xmlChar *)"write-default"


/********************************************************************
* FUNCTION y_ietf_netconf_acm_init
*
* initialize the ietf-netconf-acm server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_ietf_netconf_acm_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_ietf_netconf_acm_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_ietf_netconf_acm_init2 (void);

/********************************************************************
* FUNCTION y_ietf_netconf_acm_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void y_ietf_netconf_acm_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
