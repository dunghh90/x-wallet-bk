
#ifndef _H_u_ietf_hardware
#define _H_u_ietf_hardware
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module ietf-hardware
    revision 2018-03-13
    namespace urn:ietf:params:xml:ns:yang:ietf-hardware
    organization IETF NETMOD (Network Modeling) Working Group
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_ietf-hardware.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-netconf-acm.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Feature ietf-hardware:entity-mib
 * Comment out to disable */
#define u_ietf_hardware_F_entity_mib 1

/* Feature ietf-hardware:hardware-state
 * Comment out to disable */
#define u_ietf_hardware_F_hardware_state 1

/* Feature ietf-hardware:hardware-sensor
 * Comment out to disable */
#define u_ietf_hardware_F_hardware_sensor 1



/* leaf-list /hardware/component/contains-child */
typedef struct y_ietf_hardware_T_hardware_component_contains_child_ {
    dlq_hdr_t qhdr;
    xmlChar *v_contains_child;
} y_ietf_hardware_T_hardware_component_contains_child;

/* leaf-list /hardware/component/uri */
typedef struct y_ietf_hardware_T_hardware_component_uri_ {
    dlq_hdr_t qhdr;
    xmlChar *v_uri;
} y_ietf_hardware_T_hardware_component_uri;


#ifdef u_ietf_hardware_F_hardware_state
/* container /hardware/component/state */
typedef struct y_ietf_hardware_T_hardware_component_state_ {
    xmlChar *v_state_last_changed;
    xmlChar *v_admin_state;
    xmlChar *v_oper_state;
    xmlChar *v_usage_state;
    ncx_list_t v_alarm_state;
    xmlChar *v_standby_state;

#ifdef u_o_ran_hardware_F_ENERGYSAVING
    xmlChar *o_ran_hardware_power_state;
#endif /* u_o_ran_hardware_F_ENERGYSAVING */
    xmlChar *o_ran_hardware_availability_state;
} y_ietf_hardware_T_hardware_component_state;
#endif /* u_ietf_hardware_F_hardware_state */


#ifdef u_ietf_hardware_F_hardware_sensor
/* container /hardware/component/sensor-data */
typedef struct y_ietf_hardware_T_hardware_component_sensor_data_ {
    int32 v_value;
    xmlChar *v_value_type;
    xmlChar *v_value_scale;
    int8 v_value_precision;
    xmlChar *v_oper_status;
    xmlChar *v_units_display;
    xmlChar *v_value_timestamp;
    uint32 v_value_update_rate;
} y_ietf_hardware_T_hardware_component_sensor_data;
#endif /* u_ietf_hardware_F_hardware_sensor */

/* list /hardware/component */
typedef struct y_ietf_hardware_T_hardware_component_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    val_idref_t *v_class;

#ifdef u_ietf_hardware_F_entity_mib
    int32 v_physical_index;
#endif /* u_ietf_hardware_F_entity_mib */
    xmlChar *v_description;
    xmlChar *v_parent;
    int32 v_parent_rel_pos;
    dlq_hdr_t v_contains_child;
    xmlChar *v_hardware_rev;
    xmlChar *v_firmware_rev;
    xmlChar *v_software_rev;
    xmlChar *v_serial_num;
    xmlChar *v_mfg_name;
    xmlChar *v_model_name;
    xmlChar *v_alias;
    xmlChar *v_asset_id;
    boolean v_is_fru;
    xmlChar *v_mfg_date;
    dlq_hdr_t v_uri;
    xmlChar *v_uuid;

#ifdef u_ietf_hardware_F_hardware_state
    y_ietf_hardware_T_hardware_component_state v_state;
#endif /* u_ietf_hardware_F_hardware_state */

#ifdef u_ietf_hardware_F_hardware_sensor
    y_ietf_hardware_T_hardware_component_sensor_data v_sensor_data;
#endif /* u_ietf_hardware_F_hardware_sensor */
    // y_o_ran_hardware_T_hardware_component_label_content o_ran_hardware_label_content;
    xmlChar *o_ran_hardware_product_code;

#ifdef u_o_ran_hardware_F_ENERGYSAVING
    boolean o_ran_hardware_energy_saving_enabled;
#endif /* u_o_ran_hardware_F_ENERGYSAVING */
    xmlChar *o_ran_hardware_o_ran_name;
} y_ietf_hardware_T_hardware_component;

/* container /hardware */
typedef struct y_ietf_hardware_T_hardware_ {
    xmlChar *v_last_change;
    dlq_hdr_t v_component;
} y_ietf_hardware_T_hardware;

/* notification /hardware-state-change */
typedef struct y_ietf_hardware_T_hardware_state_change_ {
} y_ietf_hardware_T_hardware_state_change;


#ifdef u_ietf_hardware_F_hardware_state
/* notification /hardware-state-oper-enabled */
typedef struct y_ietf_hardware_T_hardware_state_oper_enabled_ {
    xmlChar *v_name;
    xmlChar *v_admin_state;
    xmlChar *v_alarm_state;
    xmlChar *o_ran_hardware_availability_state;
} y_ietf_hardware_T_hardware_state_oper_enabled;
#endif /* u_ietf_hardware_F_hardware_state */


#ifdef u_ietf_hardware_F_hardware_state
/* notification /hardware-state-oper-disabled */
typedef struct y_ietf_hardware_T_hardware_state_oper_disabled_ {
    xmlChar *v_name;
    xmlChar *v_admin_state;
    xmlChar *v_alarm_state;
    xmlChar *o_ran_hardware_availability_state;
} y_ietf_hardware_T_hardware_state_oper_disabled;
#endif /* u_ietf_hardware_F_hardware_state */

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_last_change_get
*
* Get database object callback for leaf last-change
* Path: /hardware/last-change
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_last_change_get (
    getcb_get2_t *get2cb);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_class_edit
*
* Edit database object callback
* Path: /hardware/component/class
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_class_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);


#ifdef u_ietf_hardware_F_entity_mib
/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_physical_index_get
*
* Get database object callback for leaf physical-index
* Path: /hardware/component/physical-index
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_physical_index_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

#endif /* u_ietf_hardware_F_entity_mib */
/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_description_get
*
* Get database object callback for leaf description
* Path: /hardware/component/description
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_description_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_parent_edit
*
* Edit database object callback
* Path: /hardware/component/parent
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_parent_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_parent_rel_pos_edit
*
* Edit database object callback
* Path: /hardware/component/parent-rel-pos
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_parent_rel_pos_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_contains_child_get
*
* Get database object callback for leaf-list contains-child
* Path: /hardware/component/contains-child
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_contains_child_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_hardware_rev_get
*
* Get database object callback for leaf hardware-rev
* Path: /hardware/component/hardware-rev
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_hardware_rev_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_firmware_rev_get
*
* Get database object callback for leaf firmware-rev
* Path: /hardware/component/firmware-rev
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_firmware_rev_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_software_rev_get
*
* Get database object callback for leaf software-rev
* Path: /hardware/component/software-rev
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_software_rev_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_serial_num_get
*
* Get database object callback for leaf serial-num
* Path: /hardware/component/serial-num
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_serial_num_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_mfg_name_get
*
* Get database object callback for leaf mfg-name
* Path: /hardware/component/mfg-name
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_mfg_name_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_model_name_get
*
* Get database object callback for leaf model-name
* Path: /hardware/component/model-name
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_model_name_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_alias_edit
*
* Edit database object callback
* Path: /hardware/component/alias
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_alias_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_asset_id_edit
*
* Edit database object callback
* Path: /hardware/component/asset-id
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_asset_id_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_is_fru_get
*
* Get database object callback for leaf is-fru
* Path: /hardware/component/is-fru
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_is_fru_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_mfg_date_get
*
* Get database object callback for leaf mfg-date
* Path: /hardware/component/mfg-date
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_mfg_date_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_uri_edit
*
* Edit database object callback
* Path: /hardware/component/uri
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_uri_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_uuid_get
*
* Get database object callback for leaf uuid
* Path: /hardware/component/uuid
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_uuid_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);


#ifdef u_ietf_hardware_F_hardware_state
/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_state_state_last_changed_get
*
* Get database object callback for leaf state-last-changed
* Path: /hardware/component/state/state-last-changed
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_state_state_last_changed_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_state_admin_state_edit
*
* Edit database object callback
* Path: /hardware/component/state/admin-state
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_state_admin_state_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_state_oper_state_get
*
* Get database object callback for leaf oper-state
* Path: /hardware/component/state/oper-state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_state_oper_state_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_state_usage_state_get
*
* Get database object callback for leaf usage-state
* Path: /hardware/component/state/usage-state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_state_usage_state_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_state_alarm_state_get
*
* Get database object callback for leaf alarm-state
* Path: /hardware/component/state/alarm-state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_state_alarm_state_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_state_standby_state_get
*
* Get database object callback for leaf standby-state
* Path: /hardware/component/state/standby-state
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_state_standby_state_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_state_edit
*
* Edit database object callback
* Path: /hardware/component/state
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_state_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);

#endif /* u_ietf_hardware_F_hardware_state */

#ifdef u_ietf_hardware_F_hardware_sensor
/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_sensor_data_get
*
* Get database object callback for container sensor-data
* Path: /hardware/component/sensor-data
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_sensor_data_get (
    getcb_get2_t *get2cb,
    const xmlChar *k_hardware_component_name);

#endif /* u_ietf_hardware_F_hardware_sensor */

/********************************************************************
* FUNCTION u_ietf_hardware_hardware_component_edit
*
* Edit database object callback
* Path: /hardware/component
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_component_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_hardware_component_name);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_edit
*
* Edit database object callback
* Path: /hardware
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_hardware_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_ietf_hardware_hardware_state_change_send
*
* Send a u_ietf_hardware_hardware_state_change notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_ietf_hardware_hardware_state_change_send (void);


#ifdef u_ietf_hardware_F_hardware_state
/********************************************************************
* FUNCTION u_ietf_hardware_hardware_state_oper_enabled_send
*
* Send a u_ietf_hardware_hardware_state_oper_enabled notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_ietf_hardware_hardware_state_oper_enabled_send (
    const xmlChar *v_name,
    const xmlChar *v_admin_state,
    const xmlChar *v_alarm_state,
    const xmlChar *o_ran_hardware_availability_state);

#endif /* u_ietf_hardware_F_hardware_state */

#ifdef u_ietf_hardware_F_hardware_state
/********************************************************************
* FUNCTION u_ietf_hardware_hardware_state_oper_disabled_send
*
* Send a u_ietf_hardware_hardware_state_oper_disabled notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_ietf_hardware_hardware_state_oper_disabled_send (
    const xmlChar *v_name,
    const xmlChar *v_admin_state,
    const xmlChar *v_alarm_state,
    const xmlChar *o_ran_hardware_availability_state);

#endif /* u_ietf_hardware_F_hardware_state */
/********************************************************************
* FUNCTION u_ietf_hardware_init
*
* initialize the ietf-hardware server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_ietf_hardware_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_hardware_init2 (void);

/********************************************************************
* FUNCTION u_ietf_hardware_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_ietf_hardware_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
