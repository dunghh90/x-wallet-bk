
#ifndef _H_y_ietf_hardware
#define _H_y_ietf_hardware
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    YumaPro SIL-SA header
    bundle o-ran_all
    module ietf-hardware
    revision 2018-03-13
    namespace urn:ietf:params:xml:ns:yang:ietf-hardware
    organization IETF NETMOD (Network Modeling) Working Group
    Created: 2019-12-20T02:20:30Z
    CLI parameters:
        defnames true
        format yh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_ietf_hardware_M_ietf_hardware (const xmlChar *)"ietf-hardware"

#define y_ietf_hardware_R_ietf_hardware (const xmlChar *)"2018-03-13"

#define y_ietf_hardware_N_admin_state (const xmlChar *)"admin-state"
#define y_ietf_hardware_N_alarm_state (const xmlChar *)"alarm-state"
#define y_ietf_hardware_N_alias (const xmlChar *)"alias"
#define y_ietf_hardware_N_asset_id (const xmlChar *)"asset-id"
#define y_ietf_hardware_N_class (const xmlChar *)"class"
#define y_ietf_hardware_N_component (const xmlChar *)"component"
#define y_ietf_hardware_N_contains_child (const xmlChar *)"contains-child"
#define y_ietf_hardware_N_description (const xmlChar *)"description"
#define y_ietf_hardware_N_firmware_rev (const xmlChar *)"firmware-rev"
#define y_ietf_hardware_N_hardware (const xmlChar *)"hardware"
#define y_ietf_hardware_N_hardware_rev (const xmlChar *)"hardware-rev"
#define y_ietf_hardware_N_hardware_state_change (const xmlChar *)"hardware-state-change"
#define y_ietf_hardware_N_hardware_state_oper_disabled (const xmlChar *)"hardware-state-oper-disabled"
#define y_ietf_hardware_N_hardware_state_oper_enabled (const xmlChar *)"hardware-state-oper-enabled"
#define y_ietf_hardware_N_is_fru (const xmlChar *)"is-fru"
#define y_ietf_hardware_N_last_change (const xmlChar *)"last-change"
#define y_ietf_hardware_N_mfg_date (const xmlChar *)"mfg-date"
#define y_ietf_hardware_N_mfg_name (const xmlChar *)"mfg-name"
#define y_ietf_hardware_N_model_name (const xmlChar *)"model-name"
#define y_ietf_hardware_N_name (const xmlChar *)"name"
#define y_ietf_hardware_N_oper_state (const xmlChar *)"oper-state"
#define y_ietf_hardware_N_oper_status (const xmlChar *)"oper-status"
#define y_ietf_hardware_N_parent (const xmlChar *)"parent"
#define y_ietf_hardware_N_parent_rel_pos (const xmlChar *)"parent-rel-pos"
#define y_ietf_hardware_N_physical_index (const xmlChar *)"physical-index"
#define y_ietf_hardware_N_sensor_data (const xmlChar *)"sensor-data"
#define y_ietf_hardware_N_serial_num (const xmlChar *)"serial-num"
#define y_ietf_hardware_N_software_rev (const xmlChar *)"software-rev"
#define y_ietf_hardware_N_standby_state (const xmlChar *)"standby-state"
#define y_ietf_hardware_N_state (const xmlChar *)"state"
#define y_ietf_hardware_N_state_last_changed (const xmlChar *)"state-last-changed"
#define y_ietf_hardware_N_units_display (const xmlChar *)"units-display"
#define y_ietf_hardware_N_uri (const xmlChar *)"uri"
#define y_ietf_hardware_N_usage_state (const xmlChar *)"usage-state"
#define y_ietf_hardware_N_uuid (const xmlChar *)"uuid"
#define y_ietf_hardware_N_value (const xmlChar *)"value"
#define y_ietf_hardware_N_value_precision (const xmlChar *)"value-precision"
#define y_ietf_hardware_N_value_scale (const xmlChar *)"value-scale"
#define y_ietf_hardware_N_value_timestamp (const xmlChar *)"value-timestamp"
#define y_ietf_hardware_N_value_type (const xmlChar *)"value-type"
#define y_ietf_hardware_N_value_update_rate (const xmlChar *)"value-update-rate"


/********************************************************************
* FUNCTION y_ietf_hardware_init
*
* initialize the ietf-hardware server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_ietf_hardware_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_ietf_hardware_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_ietf_hardware_init2 (void);

/********************************************************************
* FUNCTION y_ietf_hardware_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void y_ietf_hardware_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
