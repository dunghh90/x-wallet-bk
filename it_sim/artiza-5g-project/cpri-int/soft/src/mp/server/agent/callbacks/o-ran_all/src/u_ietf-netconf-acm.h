
#ifndef _H_u_ietf_netconf_acm
#define _H_u_ietf_netconf_acm
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    bundle o-ran_all
    module ietf-netconf-acm
    revision 2018-02-14
    namespace urn:ietf:params:xml:ns:yang:ietf-netconf-acm
    organization IETF NETCONF (Network Configuration) Working Group
    Created: 2019-12-20T02:20:29Z
    CLI parameters:
        defnames true
        format uh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_ietf-netconf-acm.h"
#include "u_ietf-yang-types.h"
#include "u_ietf-inet-types.h"
#include "u_ietf-interfaces.h"
#include "u_iana-if-type.h"
#include "u_ietf-ip.h"
#include "u_iana-hardware.h"
#include "u_ietf-hardware.h"
#include "u_o-ran-hardware.h"
#include "u_o-ran-software-management.h"
#include "u_o-ran-interfaces.h"
#include "u_o-ran-transceiver.h"
#include "u_o-ran-mplane-int.h"
#include "u_o-ran-dhcp.h"
#include "u_o-ran-compression-factors.h"
#include "u_o-ran-uplane-conf.h"
#include "u_o-ran-module-cap.h"
#include "u_o-ran-processing-element.h"
#include "u_o-ran-performance-management.h"
#include "u_o-ran-fm.h"
#include "u_o-ran-lbm.h"
#include "u_o-ran-supervision.h"
#include "u_o-ran-beamforming.h"
#include "u_o-ran-operations.h"
#include "u_o-ran-usermgmt.h"
#include "u_o-ran-sync.h"

#ifdef __cplusplus
extern "C" {
#endif

/* leaf-list /nacm/groups/group/user-name */
typedef struct y_ietf_netconf_acm_T_nacm_groups_group_user_name_ {
    dlq_hdr_t qhdr;
    xmlChar *v_user_name;
} y_ietf_netconf_acm_T_nacm_groups_group_user_name;

/* list /nacm/groups/group */
typedef struct y_ietf_netconf_acm_T_nacm_groups_group_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    dlq_hdr_t v_user_name;
} y_ietf_netconf_acm_T_nacm_groups_group;

/* container /nacm/groups */
typedef struct y_ietf_netconf_acm_T_nacm_groups_ {
    dlq_hdr_t v_group;
} y_ietf_netconf_acm_T_nacm_groups;

/* leaf-list /nacm/rule-list/group */
typedef struct y_ietf_netconf_acm_T_nacm_rule_list_group_ {
    dlq_hdr_t qhdr;
    val_value_t *v_group;
} y_ietf_netconf_acm_T_nacm_rule_list_group;

/* case /nacm/rule-list/rule/rule-type/protocol-operation */
typedef struct y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_protocol_operation_ {
    val_value_t *v_rpc_name;
} y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_protocol_operation;

/* case /nacm/rule-list/rule/rule-type/notification */
typedef struct y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_notification_ {
    val_value_t *v_notification_name;
} y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_notification;

/* case /nacm/rule-list/rule/rule-type/data-node */
typedef struct y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_data_node_ {
    xmlChar *v_path;
} y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_data_node;

/* choice /nacm/rule-list/rule/rule-type */
typedef union y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_ {
    y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_protocol_operation v_protocol_operation;
    y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_notification v_notification;
    y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type_data_node v_data_node;
} y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type;

/* list /nacm/rule-list/rule */
typedef struct y_ietf_netconf_acm_T_nacm_rule_list_rule_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    val_value_t *v_module_name;
    y_ietf_netconf_acm_T_nacm_rule_list_rule_rule_type v_rule_type;
    val_value_t *v_access_operations;
    xmlChar *v_action;
    xmlChar *v_comment;
} y_ietf_netconf_acm_T_nacm_rule_list_rule;

/* list /nacm/rule-list */
typedef struct y_ietf_netconf_acm_T_nacm_rule_list_ {
    dlq_hdr_t qhdr;
    xmlChar *v_name;
    dlq_hdr_t v_group;
    dlq_hdr_t v_rule;
} y_ietf_netconf_acm_T_nacm_rule_list;

/* container /nacm */
typedef struct y_ietf_netconf_acm_T_nacm_ {
    boolean v_enable_nacm;
    xmlChar *v_read_default;
    xmlChar *v_write_default;
    xmlChar *v_exec_default;
    boolean v_enable_external_groups;
    uint32 v_denied_operations;
    uint32 v_denied_data_writes;
    uint32 v_denied_notifications;
    y_ietf_netconf_acm_T_nacm_groups v_groups;
    dlq_hdr_t v_rule_list;
} y_ietf_netconf_acm_T_nacm;


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_enable_nacm_edit
*
* Edit database object callback
* Path: /nacm/enable-nacm
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_enable_nacm_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_read_default_edit
*
* Edit database object callback
* Path: /nacm/read-default
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_read_default_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_write_default_edit
*
* Edit database object callback
* Path: /nacm/write-default
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_write_default_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_exec_default_edit
*
* Edit database object callback
* Path: /nacm/exec-default
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_exec_default_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_enable_external_groups_edit
*
* Edit database object callback
* Path: /nacm/enable-external-groups
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_enable_external_groups_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_denied_operations_get
*
* Get database object callback for leaf denied-operations
* Path: /nacm/denied-operations
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_denied_operations_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_denied_data_writes_get
*
* Get database object callback for leaf denied-data-writes
* Path: /nacm/denied-data-writes
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_denied_data_writes_get (
    getcb_get2_t *get2cb);

/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_denied_notifications_get
*
* Get database object callback for leaf denied-notifications
* Path: /nacm/denied-notifications
* Fill in 'get2cb' response fields
*
* INPUTS:
*     see ncx/getcb.h for details (getcb_fn2_t)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_denied_notifications_get (
    getcb_get2_t *get2cb);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_groups_group_user_name_edit
*
* Edit database object callback
* Path: /nacm/groups/group/user-name
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_groups_group_user_name_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_groups_group_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_groups_group_edit
*
* Edit database object callback
* Path: /nacm/groups/group
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_groups_group_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_groups_group_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_groups_edit
*
* Edit database object callback
* Path: /nacm/groups
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_groups_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_group_edit
*
* Edit database object callback
* Path: /nacm/rule-list/group
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_group_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_rule_module_name_edit
*
* Edit database object callback
* Path: /nacm/rule-list/rule/module-name
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_rule_module_name_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name,
    const xmlChar *k_nacm_rule_list_rule_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_rule_rule_type_protocol_operation_rpc_name_edit
*
* Edit database object callback
* Path: /nacm/rule-list/rule/rule-type/protocol-operation/rpc-name
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_rule_rule_type_protocol_operation_rpc_name_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name,
    const xmlChar *k_nacm_rule_list_rule_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_rule_rule_type_notification_notification_name_edit
*
* Edit database object callback
* Path: /nacm/rule-list/rule/rule-type/notification/notification-name
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_rule_rule_type_notification_notification_name_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name,
    const xmlChar *k_nacm_rule_list_rule_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_rule_rule_type_data_node_path_edit
*
* Edit database object callback
* Path: /nacm/rule-list/rule/rule-type/data-node/path
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_rule_rule_type_data_node_path_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name,
    const xmlChar *k_nacm_rule_list_rule_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_rule_access_operations_edit
*
* Edit database object callback
* Path: /nacm/rule-list/rule/access-operations
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_rule_access_operations_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name,
    const xmlChar *k_nacm_rule_list_rule_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_rule_action_edit
*
* Edit database object callback
* Path: /nacm/rule-list/rule/action
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_rule_action_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name,
    const xmlChar *k_nacm_rule_list_rule_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_rule_comment_edit
*
* Edit database object callback
* Path: /nacm/rule-list/rule/comment
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_rule_comment_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name,
    const xmlChar *k_nacm_rule_list_rule_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_rule_edit
*
* Edit database object callback
* Path: /nacm/rule-list/rule
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_rule_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name,
    const xmlChar *k_nacm_rule_list_rule_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_rule_list_edit
*
* Edit database object callback
* Path: /nacm/rule-list
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*     k_ parameters are ancestor list key values.
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_rule_list_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval,
    const xmlChar *k_nacm_rule_list_name);


/********************************************************************
* FUNCTION u_ietf_netconf_acm_nacm_edit
*
* Edit database object callback
* Path: /nacm
* Add object instrumentation in COMMIT phase.
*
* INPUTS:
*     see agt/agt_cb.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_nacm_edit (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    agt_cbtyp_t cbtyp,
    op_editop_t editop,
    val_value_t *newval,
    val_value_t *curval);

/********************************************************************
* FUNCTION u_ietf_netconf_acm_init
*
* initialize the ietf-netconf-acm server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_ietf_netconf_acm_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_ietf_netconf_acm_init2 (void);

/********************************************************************
* FUNCTION u_ietf_netconf_acm_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_ietf_netconf_acm_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
