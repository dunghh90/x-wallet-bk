
#ifndef _H_y_o_ran_beamforming
#define _H_y_o_ran_beamforming
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    YumaPro SIL-SA header
    bundle o-ran_all
    module o-ran-beamforming
    revision 2019-04-01
    namespace urn:o-ran:beamforming:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:30Z
    CLI parameters:
        defnames true
        format yh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_o_ran_beamforming_M_o_ran_beamforming (const xmlChar *)"o-ran-beamforming"

#define y_o_ran_beamforming_R_o_ran_beamforming (const xmlChar *)"2019-04-01"

#define y_o_ran_beamforming_N_activate_beamforming_config (const xmlChar *)"activate-beamforming-config"
#define y_o_ran_beamforming_N_active_beam_space_coeficient_mask (const xmlChar *)"active-beam-space-coeficient-mask"
#define y_o_ran_beamforming_N_band_number (const xmlChar *)"band-number"
#define y_o_ran_beamforming_N_beam_group_id (const xmlChar *)"beam-group-id"
#define y_o_ran_beamforming_N_beam_id (const xmlChar *)"beam-id"
#define y_o_ran_beamforming_N_beam_information (const xmlChar *)"beam-information"
#define y_o_ran_beamforming_N_beam_space_compression (const xmlChar *)"beam-space-compression"
#define y_o_ran_beamforming_N_beam_type (const xmlChar *)"beam-type"
#define y_o_ran_beamforming_N_beamforming_config (const xmlChar *)"beamforming-config"
#define y_o_ran_beamforming_N_beamforming_config_file (const xmlChar *)"beamforming-config-file"
#define y_o_ran_beamforming_N_beamforming_information_update (const xmlChar *)"beamforming-information-update"
#define y_o_ran_beamforming_N_beamforming_properties (const xmlChar *)"beamforming-properties"
#define y_o_ran_beamforming_N_beamforming_property (const xmlChar *)"beamforming-property"
#define y_o_ran_beamforming_N_beamforming_trough_attributes_supported (const xmlChar *)"beamforming-trough-attributes-supported"
#define y_o_ran_beamforming_N_beamforming_trough_ue_channel_info_supported (const xmlChar *)"beamforming-trough-ue-channel-info-supported"
#define y_o_ran_beamforming_N_beamforming_type (const xmlChar *)"beamforming-type"
#define y_o_ran_beamforming_N_bitwidth (const xmlChar *)"bitwidth"
#define y_o_ran_beamforming_N_block_floating_point (const xmlChar *)"block-floating-point"
#define y_o_ran_beamforming_N_block_scalar (const xmlChar *)"block-scalar"
#define y_o_ran_beamforming_N_block_scaler (const xmlChar *)"block-scaler"
#define y_o_ran_beamforming_N_block_scaling (const xmlChar *)"block-scaling"
#define y_o_ran_beamforming_N_coarse_fine_beam_relation (const xmlChar *)"coarse-fine-beam-relation"
#define y_o_ran_beamforming_N_comp_bit_width (const xmlChar *)"comp-bit-width"
#define y_o_ran_beamforming_N_comp_shift (const xmlChar *)"comp-shift"
#define y_o_ran_beamforming_N_compression_format (const xmlChar *)"compression-format"
#define y_o_ran_beamforming_N_compression_type (const xmlChar *)"compression-type"
#define y_o_ran_beamforming_N_csf (const xmlChar *)"csf"
#define y_o_ran_beamforming_N_error_message (const xmlChar *)"error-message"
#define y_o_ran_beamforming_N_exponent (const xmlChar *)"exponent"
#define y_o_ran_beamforming_N_frequency (const xmlChar *)"frequency"
#define y_o_ran_beamforming_N_frequency_domain_beams (const xmlChar *)"frequency-domain-beams"
#define y_o_ran_beamforming_N_frequency_granularity (const xmlChar *)"frequency-granularity"
#define y_o_ran_beamforming_N_hybrid (const xmlChar *)"hybrid"
#define y_o_ran_beamforming_N_hybrid_beams (const xmlChar *)"hybrid-beams"
#define y_o_ran_beamforming_N_initial_beam_id (const xmlChar *)"initial-beam-id"
#define y_o_ran_beamforming_N_max_number_of_beam_ids (const xmlChar *)"max-number-of-beam-ids"
#define y_o_ran_beamforming_N_max_number_of_ues (const xmlChar *)"max-number-of-ues"
#define y_o_ran_beamforming_N_mod_comp_scaler (const xmlChar *)"mod-comp-scaler"
#define y_o_ran_beamforming_N_modulation_compression (const xmlChar *)"modulation-compression"
#define y_o_ran_beamforming_N_neighbour_beams (const xmlChar *)"neighbour-beams"
#define y_o_ran_beamforming_N_no_compresison (const xmlChar *)"no-compresison"
#define y_o_ran_beamforming_N_number_of_beamforming_properties (const xmlChar *)"number-of-beamforming-properties"
#define y_o_ran_beamforming_N_number_of_beams (const xmlChar *)"number-of-beams"
#define y_o_ran_beamforming_N_number_of_writeable_beamforming_files (const xmlChar *)"number-of-writeable-beamforming-files"
#define y_o_ran_beamforming_N_operational_properties (const xmlChar *)"operational-properties"
#define y_o_ran_beamforming_N_per_band_config (const xmlChar *)"per-band-config"
#define y_o_ran_beamforming_N_persistent_bf_files (const xmlChar *)"persistent-bf-files"
#define y_o_ran_beamforming_N_rt_bf_weights_update_support (const xmlChar *)"rt-bf-weights-update-support"
#define y_o_ran_beamforming_N_rx_array (const xmlChar *)"rx-array"
#define y_o_ran_beamforming_N_static_properties (const xmlChar *)"static-properties"
#define y_o_ran_beamforming_N_status (const xmlChar *)"status"
#define y_o_ran_beamforming_N_time (const xmlChar *)"time"
#define y_o_ran_beamforming_N_time_domain_beams (const xmlChar *)"time-domain-beams"
#define y_o_ran_beamforming_N_time_granularity (const xmlChar *)"time-granularity"
#define y_o_ran_beamforming_N_tx_array (const xmlChar *)"tx-array"
#define y_o_ran_beamforming_N_u_law (const xmlChar *)"u-law"
#define y_o_ran_beamforming_N_ue_specific_beamforming (const xmlChar *)"ue-specific-beamforming"
#define y_o_ran_beamforming_N_update_bf_non_delete (const xmlChar *)"update-bf-non-delete"


/********************************************************************
* FUNCTION y_o_ran_beamforming_init
*
* initialize the o-ran-beamforming server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_o_ran_beamforming_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_o_ran_beamforming_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_o_ran_beamforming_init2 (void);

/********************************************************************
* FUNCTION y_o_ran_beamforming_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void y_o_ran_beamforming_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
