
#ifndef _H_y_o_ran_module_cap
#define _H_y_o_ran_module_cap
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    YumaPro SIL-SA header
    bundle o-ran_all
    module o-ran-module-cap
    revision 2019-02-04
    namespace urn:o-ran:module-cap:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:30Z
    CLI parameters:
        defnames true
        format yh
        indent 4
        module ietf-yang-types
        module ietf-inet-types
        module ietf-interfaces
        module iana-if-type
        module ietf-ip
        module iana-hardware
        module ietf-hardware
        module ietf-netconf-acm
        module o-ran-hardware
        module o-ran-software-management
        module o-ran-interfaces
        module o-ran-transceiver
        module o-ran-mplane-int
        module o-ran-dhcp
        module o-ran-compression-factors
        module o-ran-uplane-conf
        module o-ran-module-cap
        module o-ran-processing-element
        module o-ran-performance-management
        module o-ran-fm
        module o-ran-lbm
        module o-ran-supervision
        module o-ran-beamforming
        module o-ran-operations
        module o-ran-usermgmt
        module o-ran-sync
        sil-bundle o-ran_all
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_o_ran_module_cap_M_o_ran_module_cap (const xmlChar *)"o-ran-module-cap"

#define y_o_ran_module_cap_R_o_ran_module_cap (const xmlChar *)"2019-02-04"

#define y_o_ran_module_cap_N_active_beam_space_coeficient_mask (const xmlChar *)"active-beam-space-coeficient-mask"
#define y_o_ran_module_cap_N_band_capabilities (const xmlChar *)"band-capabilities"
#define y_o_ran_module_cap_N_band_number (const xmlChar *)"band-number"
#define y_o_ran_module_cap_N_beam_space_compression (const xmlChar *)"beam-space-compression"
#define y_o_ran_module_cap_N_bitwidth (const xmlChar *)"bitwidth"
#define y_o_ran_module_cap_N_block_floating_point (const xmlChar *)"block-floating-point"
#define y_o_ran_module_cap_N_block_scalar (const xmlChar *)"block-scalar"
#define y_o_ran_module_cap_N_block_scaler (const xmlChar *)"block-scaler"
#define y_o_ran_module_cap_N_block_scaling (const xmlChar *)"block-scaling"
#define y_o_ran_module_cap_N_codebook_configuration_n1 (const xmlChar *)"codebook-configuration_n1"
#define y_o_ran_module_cap_N_codebook_configuration_n2 (const xmlChar *)"codebook-configuration_n2"
#define y_o_ran_module_cap_N_codebook_configuration_ng (const xmlChar *)"codebook-configuration_ng"
#define y_o_ran_module_cap_N_comp_bit_width (const xmlChar *)"comp-bit-width"
#define y_o_ran_module_cap_N_comp_shift (const xmlChar *)"comp-shift"
#define y_o_ran_module_cap_N_compression_format (const xmlChar *)"compression-format"
#define y_o_ran_module_cap_N_compression_method_supported (const xmlChar *)"compression-method-supported"
#define y_o_ran_module_cap_N_compression_type (const xmlChar *)"compression-type"
#define y_o_ran_module_cap_N_csf (const xmlChar *)"csf"
#define y_o_ran_module_cap_N_dl_mixed_num_required_guard_rbs (const xmlChar *)"dl-mixed-num-required-guard-rbs"
#define y_o_ran_module_cap_N_dynamic_compression_supported (const xmlChar *)"dynamic-compression-supported"
#define y_o_ran_module_cap_N_dynamic_transport_delay_management_supported (const xmlChar *)"dynamic-transport-delay-management-supported"
#define y_o_ran_module_cap_N_energy_saving_by_transmission_blanks (const xmlChar *)"energy-saving-by-transmission-blanks"
#define y_o_ran_module_cap_N_exponent (const xmlChar *)"exponent"
#define y_o_ran_module_cap_N_format_of_iq_sample (const xmlChar *)"format-of-iq-sample"
#define y_o_ran_module_cap_N_fronthaul_split_option (const xmlChar *)"fronthaul-split-option"
#define y_o_ran_module_cap_N_max_carrier_bandwidth_dl (const xmlChar *)"max-carrier-bandwidth-dl"
#define y_o_ran_module_cap_N_max_carrier_bandwidth_ul (const xmlChar *)"max-carrier-bandwidth-ul"
#define y_o_ran_module_cap_N_max_num_bands (const xmlChar *)"max-num-bands"
#define y_o_ran_module_cap_N_max_num_carriers_dl (const xmlChar *)"max-num-carriers-dl"
#define y_o_ran_module_cap_N_max_num_carriers_ul (const xmlChar *)"max-num-carriers-ul"
#define y_o_ran_module_cap_N_max_num_component_carriers (const xmlChar *)"max-num-component-carriers"
#define y_o_ran_module_cap_N_max_num_sectors (const xmlChar *)"max-num-sectors"
#define y_o_ran_module_cap_N_max_power_per_antenna (const xmlChar *)"max-power-per-antenna"
#define y_o_ran_module_cap_N_max_power_per_pa_antenna (const xmlChar *)"max-power-per-pa-antenna"
#define y_o_ran_module_cap_N_max_supported_bandwidth_dl (const xmlChar *)"max-supported-bandwidth-dl"
#define y_o_ran_module_cap_N_max_supported_bandwidth_ul (const xmlChar *)"max-supported-bandwidth-ul"
#define y_o_ran_module_cap_N_max_supported_frequency_dl (const xmlChar *)"max-supported-frequency-dl"
#define y_o_ran_module_cap_N_max_supported_frequency_ul (const xmlChar *)"max-supported-frequency-ul"
#define y_o_ran_module_cap_N_maximum_laa_buffer_size (const xmlChar *)"maximum-laa-buffer-size"
#define y_o_ran_module_cap_N_maximum_processing_time (const xmlChar *)"maximum-processing-time"
#define y_o_ran_module_cap_N_min_carrier_bandwidth_dl (const xmlChar *)"min-carrier-bandwidth-dl"
#define y_o_ran_module_cap_N_min_carrier_bandwidth_ul (const xmlChar *)"min-carrier-bandwidth-ul"
#define y_o_ran_module_cap_N_min_power_per_antenna (const xmlChar *)"min-power-per-antenna"
#define y_o_ran_module_cap_N_min_power_per_pa_antenna (const xmlChar *)"min-power-per-pa-antenna"
#define y_o_ran_module_cap_N_min_supported_frequency_dl (const xmlChar *)"min-supported-frequency-dl"
#define y_o_ran_module_cap_N_min_supported_frequency_ul (const xmlChar *)"min-supported-frequency-ul"
#define y_o_ran_module_cap_N_mod_comp_scaler (const xmlChar *)"mod-comp-scaler"
#define y_o_ran_module_cap_N_modulation_compression (const xmlChar *)"modulation-compression"
#define y_o_ran_module_cap_N_module_capability (const xmlChar *)"module-capability"
#define y_o_ran_module_cap_N_no_compresison (const xmlChar *)"no-compresison"
#define y_o_ran_module_cap_N_number_of_guard_rbs_dl (const xmlChar *)"number-of-guard-rbs-dl"
#define y_o_ran_module_cap_N_number_of_guard_rbs_ul (const xmlChar *)"number-of-guard-rbs-ul"
#define y_o_ran_module_cap_N_number_of_laa_scarriers (const xmlChar *)"number-of-laa-scarriers"
#define y_o_ran_module_cap_N_number_of_ru_ports (const xmlChar *)"number-of-ru-ports"
#define y_o_ran_module_cap_N_number_of_spatial_streams (const xmlChar *)"number-of-spatial-streams"
#define y_o_ran_module_cap_N_realtime_variable_bit_width_supported (const xmlChar *)"realtime-variable-bit-width-supported"
#define y_o_ran_module_cap_N_ru_capabilities (const xmlChar *)"ru-capabilities"
#define y_o_ran_module_cap_N_ru_supported_category (const xmlChar *)"ru-supported-category"
#define y_o_ran_module_cap_N_scs_a (const xmlChar *)"scs-a"
#define y_o_ran_module_cap_N_scs_b (const xmlChar *)"scs-b"
#define y_o_ran_module_cap_N_self_configure (const xmlChar *)"self-configure"
#define y_o_ran_module_cap_N_sub_band (const xmlChar *)"sub-band"
#define y_o_ran_module_cap_N_sub_band_frequency_ranges (const xmlChar *)"sub-band-frequency-ranges"
#define y_o_ran_module_cap_N_sub_band_info (const xmlChar *)"sub-band-info"
#define y_o_ran_module_cap_N_syminc_supported (const xmlChar *)"syminc-supported"
#define y_o_ran_module_cap_N_u_law (const xmlChar *)"u-law"
#define y_o_ran_module_cap_N_ul_mixed_num_required_guard_rbs (const xmlChar *)"ul-mixed-num-required-guard-rbs"
#define y_o_ran_module_cap_N_variable_bit_width_per_channel_supported (const xmlChar *)"variable-bit-width-per-channel-supported"


/********************************************************************
* FUNCTION y_o_ran_module_cap_init
*
* initialize the o-ran-module-cap server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_o_ran_module_cap_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_o_ran_module_cap_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t y_o_ran_module_cap_init2 (void);

/********************************************************************
* FUNCTION y_o_ran_module_cap_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void y_o_ran_module_cap_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
