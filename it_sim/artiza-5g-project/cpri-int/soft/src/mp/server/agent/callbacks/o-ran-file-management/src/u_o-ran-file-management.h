
#ifndef _H_u_o_ran_file_management
#define _H_u_o_ran_file_management
/*
 * Copyright (c) 2008 - 2012, Andy Bierman, All Rights Reserved.
 * Copyright (c) 2012 - 2019, YumaWorks, Inc., All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump-sdk 18.10-15

    User SIL-SA header
    module o-ran-file-management
    revision 2019-02-04
    namespace urn:o-ran:file-management:1.0
    organization O-RAN Alliance
    Created: 2019-12-20T02:20:28Z
    CLI parameters:
        format uh
        indent 4
        module o-ran-file-management
        output u_o-ran-file-management.h
        sil-get2
        sil-sa
        unified true

 */

#include <xmlstring.h>

#include "agt.h"
#include "agt_cb.h"
#include "agt_not.h"
#include "agt_rpc.h"
#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "rpc.h"
#include "ses.h"
#include "status.h"
#include "val.h"
#include "y_o-ran-file-management.h"

#ifdef __cplusplus
extern "C" {
#endif

/* container /file-upload/input/credentials/password/password */
typedef struct y_o_ran_file_management_T_file_upload_input_credentials_password_password_ {
    xmlChar *v_password;
} y_o_ran_file_management_T_file_upload_input_credentials_password_password;

/* case /file-upload/input/credentials/password */
typedef struct y_o_ran_file_management_T_file_upload_input_credentials_password_ {
    y_o_ran_file_management_T_file_upload_input_credentials_password_password v_password;
} y_o_ran_file_management_T_file_upload_input_credentials_password;

/* container /file-upload/input/credentials/certificate/certificate */
typedef struct y_o_ran_file_management_T_file_upload_input_credentials_certificate_certificate_ {
} y_o_ran_file_management_T_file_upload_input_credentials_certificate_certificate;

/* case /file-upload/input/credentials/certificate */
typedef struct y_o_ran_file_management_T_file_upload_input_credentials_certificate_ {
    y_o_ran_file_management_T_file_upload_input_credentials_certificate_certificate v_certificate;
} y_o_ran_file_management_T_file_upload_input_credentials_certificate;

/* choice /file-upload/input/credentials */
typedef union y_o_ran_file_management_T_file_upload_input_credentials_ {
    y_o_ran_file_management_T_file_upload_input_credentials_password v_password;
    y_o_ran_file_management_T_file_upload_input_credentials_certificate v_certificate;
} y_o_ran_file_management_T_file_upload_input_credentials;

/* container /file-upload/input */
typedef struct y_o_ran_file_management_T_file_upload_input_ {
    xmlChar *v_local_logical_file_path;
    xmlChar *v_remote_file_path;
    y_o_ran_file_management_T_file_upload_input_credentials v_credentials;
} y_o_ran_file_management_T_file_upload_input;

/* container /file-upload/output */
typedef struct y_o_ran_file_management_T_file_upload_output_ {
    xmlChar *v_status;
    xmlChar *v_reject_reason;
} y_o_ran_file_management_T_file_upload_output;

/* rpc /file-upload */
typedef struct y_o_ran_file_management_T_file_upload_ {
    y_o_ran_file_management_T_file_upload_input v_input;
    y_o_ran_file_management_T_file_upload_output v_output;
} y_o_ran_file_management_T_file_upload;

/* container /retrieve-file-list/input */
typedef struct y_o_ran_file_management_T_retrieve_file_list_input_ {
    xmlChar *v_logical_path;
    xmlChar *v_file_name_filter;
} y_o_ran_file_management_T_retrieve_file_list_input;

/* leaf-list /retrieve-file-list/output/file-list */
typedef struct y_o_ran_file_management_T_retrieve_file_list_output_file_list_ {
    dlq_hdr_t qhdr;
    xmlChar *v_file_list;
} y_o_ran_file_management_T_retrieve_file_list_output_file_list;

/* container /retrieve-file-list/output */
typedef struct y_o_ran_file_management_T_retrieve_file_list_output_ {
    xmlChar *v_status;
    xmlChar *v_reject_reason;
    dlq_hdr_t v_file_list;
} y_o_ran_file_management_T_retrieve_file_list_output;

/* rpc /retrieve-file-list */
typedef struct y_o_ran_file_management_T_retrieve_file_list_ {
    y_o_ran_file_management_T_retrieve_file_list_input v_input;
    y_o_ran_file_management_T_retrieve_file_list_output v_output;
} y_o_ran_file_management_T_retrieve_file_list;

/* notification /file-upload-notification */
typedef struct y_o_ran_file_management_T_file_upload_notification_ {
    xmlChar *v_local_logical_file_path;
    xmlChar *v_remote_file_path;
    xmlChar *v_status;
    xmlChar *v_reject_reason;
} y_o_ran_file_management_T_file_upload_notification;

/* container /file-download/input/credentials/password/password */
typedef struct y_o_ran_file_management_T_file_download_input_credentials_password_password_ {
    xmlChar *v_password;
} y_o_ran_file_management_T_file_download_input_credentials_password_password;

/* case /file-download/input/credentials/password */
typedef struct y_o_ran_file_management_T_file_download_input_credentials_password_ {
    y_o_ran_file_management_T_file_download_input_credentials_password_password v_password;
} y_o_ran_file_management_T_file_download_input_credentials_password;

/* container /file-download/input/credentials/certificate/certificate */
typedef struct y_o_ran_file_management_T_file_download_input_credentials_certificate_certificate_ {
} y_o_ran_file_management_T_file_download_input_credentials_certificate_certificate;

/* case /file-download/input/credentials/certificate */
typedef struct y_o_ran_file_management_T_file_download_input_credentials_certificate_ {
    y_o_ran_file_management_T_file_download_input_credentials_certificate_certificate v_certificate;
} y_o_ran_file_management_T_file_download_input_credentials_certificate;

/* choice /file-download/input/credentials */
typedef union y_o_ran_file_management_T_file_download_input_credentials_ {
    y_o_ran_file_management_T_file_download_input_credentials_password v_password;
    y_o_ran_file_management_T_file_download_input_credentials_certificate v_certificate;
} y_o_ran_file_management_T_file_download_input_credentials;

/* container /file-download/input */
typedef struct y_o_ran_file_management_T_file_download_input_ {
    xmlChar *v_local_logical_file_path;
    xmlChar *v_remote_file_path;
    y_o_ran_file_management_T_file_download_input_credentials v_credentials;
} y_o_ran_file_management_T_file_download_input;

/* container /file-download/output */
typedef struct y_o_ran_file_management_T_file_download_output_ {
    xmlChar *v_status;
    xmlChar *v_reject_reason;
} y_o_ran_file_management_T_file_download_output;

/* rpc /file-download */
typedef struct y_o_ran_file_management_T_file_download_ {
    y_o_ran_file_management_T_file_download_input v_input;
    y_o_ran_file_management_T_file_download_output v_output;
} y_o_ran_file_management_T_file_download;

/* notification /file-download-event */
typedef struct y_o_ran_file_management_T_file_download_event_ {
    xmlChar *v_local_logical_file_path;
    xmlChar *v_remote_file_path;
    xmlChar *v_status;
    xmlChar *v_reject_reason;
} y_o_ran_file_management_T_file_download_event;


/********************************************************************
* FUNCTION u_o_ran_file_management_file_upload_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_file_management_file_upload_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_file_management_file_upload_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_file_management_file_upload_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_file_management_retrieve_file_list_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_file_management_retrieve_file_list_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_file_management_retrieve_file_list_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_file_management_retrieve_file_list_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_file_management_file_download_validate
*
* RPC validation phase
* All YANG constraints have passed at this point.
* Add description-stmt checks in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_file_management_file_download_validate (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_file_management_file_download_invoke
*
* RPC invocation phase
* All constraints have passed at this point.
* Call device instrumentation code in this function.
*
* INPUTS:
*     see agt/agt_rpc.h for details
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_file_management_file_download_invoke (
    ses_cb_t *scb,
    rpc_msg_t *msg,
    xml_node_t *methnode);


/********************************************************************
* FUNCTION u_o_ran_file_management_file_upload_notification_send
*
* Send a u_o_ran_file_management_file_upload_notification notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_file_management_file_upload_notification_send (
    const xmlChar *v_local_logical_file_path,
    const xmlChar *v_remote_file_path,
    const xmlChar *v_status,
    const xmlChar *v_reject_reason);


/********************************************************************
* FUNCTION u_o_ran_file_management_file_download_event_send
*
* Send a u_o_ran_file_management_file_download_event notification
* Called by your code when notification event occurs
*
********************************************************************/
extern void u_o_ran_file_management_file_download_event_send (
    const xmlChar *v_local_logical_file_path,
    const xmlChar *v_remote_file_path,
    const xmlChar *v_status,
    const xmlChar *v_reject_reason);

/********************************************************************
* FUNCTION u_o_ran_file_management_init
*
* initialize the o-ran-file-management server instrumentation library
*
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_file_management_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION u_o_ran_file_management_init2
*
* SIL init phase 2: non-config data structures
* Called after running config is loaded
*
* RETURNS:
*     error status
********************************************************************/
extern status_t u_o_ran_file_management_init2 (void);

/********************************************************************
* FUNCTION u_o_ran_file_management_cleanup
*    cleanup the server instrumentation library
*
********************************************************************/
extern void u_o_ran_file_management_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
