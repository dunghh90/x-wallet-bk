

Rrh.require("./verbose")
Rrh.require("./input_check")
Rrh.require("./z_global")
Rrh.require("./tpshm_access")


# usage
if ARGV.length < 2 then
	puts "usage:"+$0+" <ant/all> <dat>",
	"(m):<ant/all> is ant num (0~3 or all)",
	"(m):<dat>     is write data(0x000~0x3FF)"
	exit(1)
end

ant_s = ARGV[0]
tmp_data_s = ARGV[1]
case tmp_data_s.length 
	when 1 then
		data_s = "000" + tmp_data_s
	when 2 then
		data_s = "00" + tmp_data_s
	when 3 then
		data_s = "0" + tmp_data_s
	else
		data_s = tmp_data_s
end

if !Rrh.input_check(data_s,4) then
 puts "Input value is incorrect : <data>"
 exit(1)
end


Rrh.assign()

addr_eep = 64
if !res = Rrh.eepread(addr_eep.to_i(16)) then
 puts "eep read error"
else

 case res
 
 when "13"
  kind = "BPF_HM_DEVC_SUB6"

 when "14"
  kind = "BPF_HM_DEVC_MMW"
 
 
 else
  puts "kind num error"
  exit(1)
 end

end

#mmW 0~1 sub6 0~3

MAX = 3

if kind == "BPF_HM_DEVC_MMW" then
	MAX = 1
end

if kind == "BPF_HM_DEVC_SUB6" then
	#SUB6
	vattdac = 0x0e
	if ant_s == "all" then
		for ant in 0..MAX
			if !res = Rrh.stxvwrite( ant , data_s.to_i(16) ) then
				puts "error"
				exit(1)
			end
			data1 = data_s[0..1]
			addr = vattdac + ( ant.to_i(16) * 0x80 )
			if !res = Rrh.tpshmwrite("apde2pTX_vt","",addr.to_s(16),data1) then
				puts "error No.1"
				exit(1)
			end
			addr = addr + 1
			data2 = data_s[2..3]
			if !res = Rrh.tpshmwrite("apde2pTX_vt","",addr.to_s(16),data2) then
				puts "error No.2"
				exit(1)
			end
		end
		puts "complete"

	else
		if ant_s.to_i > MAX then
			puts "Input value is incorrect : <ant>"
			exit(1)
		end
		if !res = Rrh.stxvwrite( ant_s , data_s.to_i(16) ) then
			puts "error"
		else
			addr = vattdac + ( ant_s.to_i(16) * 0x80 )
			data1 = data_s[0..1]
			if !res = Rrh.tpshmwrite("apde2pTX_vt","",addr.to_s(16),data1) then
				puts "error No.1"
				exit(1)
			end
			addr = addr + 1
			data2 = data_s[2..3]
			if !res = Rrh.tpshmwrite("apde2pTX_vt","",addr.to_s(16),data2) then
				puts "error No.2"
				exit(1)
			end
		end
	puts "complete"
	end

else
	#MMW
	txvattv  = 0x24
	if ant_s == "all" then
		for ant in 0..MAX
			if !res = Rrh.stxvwrite( ant , data_s.to_i(16) ) then
				puts "error"
				exit(1)
			end
			#mode:Normal
			addr1 = txvattv + ant
			if !res = Rrh.tpshmwrite("apde2pTX_vt","",addr1.to_s(16),data_s) then
				puts "error No.1"
				exit(1)
			end
		end
		puts "complete"
	else
		if ant_s.to_i > MAX then
			puts "Input value is incorrect : <ant>"
			exit(1)
		end

		if !res = Rrh.stxvwrite( ant_s , data_s.to_i(16) ) then
			puts "error"
		else
			#mode:Normal
			addr1 = txvattv + ant_s.to_i(16)
			if !res = Rrh.tpshmwrite("apde2pTX_vt","",addr1.to_s(16),data_s) then
				puts "error No.1"
				exit(1)
			end
		end
	puts "complete"
	end
end

Rrh.unassign()
