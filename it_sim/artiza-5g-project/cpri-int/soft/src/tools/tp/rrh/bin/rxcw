Rrh.require("./verbose")
Rrh.require("./define_5glls")
Rrh.require("./comfunc_5glls")

device_type = Rrh.get_shmcm("device_type")
if device_type == "00000013" then
	if ARGV.length < 6 then
		puts "usage:"+$0+" <p1> <p2> <p3> <p4> <p5> <p6>",
			"(m):<p1> is below .",
			"        Bit[3]=AntD",
			"        Bit[2]=AntC",
			"        Bit[1]=AntB",
			"        Bit[0]=AntA",
			"(m):<p2> is below .",
			"        0 : Cr0",
			"        1 : Cr1",
			"(m):<p3> is Frequency.",
			"        3.7G:3,577,120 ~ 3,822,880(kHz)",
			"        4.5G:4,677,120 ~ 4,922,880(kHz)",
			"(m):<p4> is below .",
			"        9 : 100M",
			"(m):<p5> is ul-fft-sampling-offset.0~72(0~2.344usec)",
			"(m):<p6> is ta offset.13792(7.015usec)~25600(13.02usec)"
		Rrh.exit(1)
	end
elsif device_type == "00000014"then
	if ARGV.length < 6 then
		puts "usage:"+$0+" <p1> <p2> <p3> <p4> <p5> <p6>",
			"(m):<p1> is below .",
			"        Bit[1]=AntB",
			"        Bit[0]=AntA",
			"(m):<p2> is below .",
			"        0 : Cr0",
			"        1 : Cr1",
			"        2 : Cr2",
			"        3 : Cr3",
			"(m):<p3> is Frequency.",
			"        27,508,480 ~ 28,491,520(kHz)",
			"(m):<p4> is below .",
			"        9 : 100M",
			"(m):<p5> is ul-fft-sampling-offset.0~18(0~0.586usec)",
			"(m):<p6> is ta offset.13792(7.015usec)~25600(13.02usec)"
		Rrh.exit(1)
	end
else
	puts DuCode::ERR_DESCRIPTION[3]
	Rrh.exit(1)
end


ant = ARGV[0]
ant_i = Rrh.hex_check(ant)

if ant_i == false then
	puts DuCode::ERR_DESCRIPTION[1]
	Rrh.exit(1)
else
	if device_type == "00000013" then
		if ant_i > 0xF || ant_i < 1 then
			puts DuCode::ERR_DESCRIPTION[2]
			Rrh.exit(1)
		end
	else
		if ant_i > 0x03 || ant_i < 1 then
			puts DuCode::ERR_DESCRIPTION[2]
			Rrh.exit(1)
		end
	end
end


cr = ARGV[1]
cr_i = Rrh.hex_check(cr)

if cr_i == false then
	puts DuCode::ERR_DESCRIPTION[1]
	Rrh.exit(1)
else
	if device_type == "00000013" then
		case cr_i
			when 0 then
			when 1 then
			else
				puts DuCode::ERR_DESCRIPTION[2]
				Rrh.exit(1)
		end
	else
		if cr_i > 3 || cr_i < 0 then
			puts DuCode::ERR_DESCRIPTION[2]
			Rrh.exit(1)
		end
	end
end


freq = ARGV[2]
freq_i = Rrh.hex_check(freq)
if freq_i == false then
	puts DuCode::ERR_DESCRIPTION[1]
	Rrh.exit(1)
end

bw = ARGV[3]
bw_i = Rrh.hex_check(bw)

if bw_i == false then
	puts DuCode::ERR_DESCRIPTION[1]
	Rrh.exit(1)
else
	if bw_i.to_i(10) != 9 then
		puts DuCode::ERR_DESCRIPTION[2]
		Rrh.exit(1)
	end
end

fft = ARGV[4]
fft_i = Rrh.hex_check(fft)

if fft_i == false then
	puts DuCode::ERR_DESCRIPTION[1]
	Rrh.exit(1)
else
	if device_type == "00000013" then
		if fft_i.to_i(10) > 72 || fft_i.to_i(10) < 0 then
			puts DuCode::ERR_DESCRIPTION[2]
			Rrh.exit(1)
		end
	else
		if fft_i.to_i(10) > 18 || fft_i.to_i(10) < 0 then
			puts DuCode::ERR_DESCRIPTION[2]
			Rrh.exit(1)
		end
	end
end

ta = ARGV[5]
ta_i = Rrh.hex_check(ta)
if ta_i == false then
	puts DuCode::ERR_DESCRIPTION[1]
	Rrh.exit(1)
else
	if ta_i.to_i(10) > 25600 || ta_i.to_i(10) < 13792 then
		puts DuCode::ERR_DESCRIPTION[2]
		Rrh.exit(1)
	end
end


mask = ["00000001","00000002","00000004","00000008","00000010","00000020","00000040","00000080"]
antname = ["a","b","c","d","e","f","g","h"]

for cnt in 0..3 do
	if mask[cnt] == Rrh.calc(mask[cnt],"&",ant) then
		CC_no = cr + "_cc"
		ANT_no = antname[cnt] + "_array"

		if device_type == "00000013" then

			#sampling-offsetÅF
			#[ULF]0xA220_4080[6:0]
			#sub6:ê›íËílÅ~(122.88*10^6)/(1.96608*10^9)Çê›íË
			#sub6:ê›íËílÅ~0.0625ÅÀê›íËíl/16

			fft_set = fft_i * 4
			Rrh.regwrite("a2204080",fft_set.to_i(16).to_s(16))

			Rrh.set_shmrx(CC_no,ANT_no,"ul_fft_smpl_ofs",fft)

			#ta offset
			#[TCX]0xB100_1000[15:0]
			#[TCX]0xB300_1000[15:0]
			#[TCB]0xA200_0040[15:0]
			#ê›íËílÅ~(491.52*10^6)/(1.96608*10^9)Çê›íË
			#ê›íËílÅ~0.25ÅÀê›íËíl/4
			ta_set = ta_i / 4
			ta_set = Rrh.calc(ta_set.to_i(16).to_s(16), "&", "0000ffff")
			Rrh.regwrite("b1001000",ta_set.to_s(16))
			Rrh.regwrite("a2000040",ta_set.to_s(16))
			Rrh.set_shmrx(CC_no,ANT_no,"ta_offset",ta)
			#sub6 scs = 30kHz
			scsv = 1

		else
			if cnt > 1 then
				break
			else

				#mmW:ê›íËílÅ~(122.88*10^6)/(1.96608*10^9)Çê›íË
				#mmW:ê›íËílÅ~0.0625ÅÀê›íËíl/16

				fft_set = fft_i * 4
				Rrh.regwrite("a2204080",fft_set.to_i(16).to_s(16))
				Rrh.set_shmrx(CC_no,ANT_no,"ul_fft_smpl_ofs",fft)

				#ta offset
				#[TCX]0xB100_1000[15:0]
				#[TCX]0xB300_1000[15:0]
				#[TCB]0xA200_0040[15:0]
				#ê›íËílÅ~(491.52*10^6)/(1.96608*10^9)Çê›íË
				#ê›íËílÅ~0.25
				ta_set = ta_i / 4
				ta_set = Rrh.calc(ta_set.to_i(16).to_s(16), "&", "0000ffff")
				Rrh.regwrite("b1001000",ta_set)
				Rrh.regwrite("a2000040",ta_set)
				Rrh.set_shmrx(CC_no,ANT_no,"ta_offset",ta)
				#mmw scs = 120kHz
				scsv = 3

			end
		end
		Rrh.set_shmrx(CC_no,ANT_no,"nr_bandwidth",bw)
		Rrh.set_shmrx(CC_no,ANT_no,"nr_freq",freq)
		Rrh.set_shmrx(CC_no,ANT_no,"ul_fft_smpl_ofs",fft)
		Rrh.set_shmrx(CC_no,ANT_no,"ta_offset",ta)
		Rrh.set_shmrx(CC_no,ANT_no,"nr_scs",scsv)
	end
end

puts DuCode::ERR_DESCRIPTION[0]

