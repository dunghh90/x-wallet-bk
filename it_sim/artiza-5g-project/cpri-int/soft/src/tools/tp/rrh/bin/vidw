#
# vid  write
# rrh -vidw <fh>
#
Rrh.require("./verbose")
Rrh.require("./input_check")

# usage
if ARGV.length < 3 then
	puts "usage:"+$0+" <fh><vid><dlul><num>",
	"(m):<fh>    is FH(1-3)",
	"(m):<vid>    is VID(0x0-FFF)",
	"(m):<dlul>    is DL/UL(0-2)",
	"(m):<num>    is Set number(1-14)"
	exit(1)
elsif ARGV.length == 3 then
	fh_s  = ARGV[0]
	fh_i  = fh_s.to_i(10)
	vid_s  = ARGV[1]
	vid_i  = vid_s.to_i(16)
	dlul_s  = ARGV[2]
	dlul_i  = dlul_s.to_i(10)
else
	fh_s  = ARGV[0]
	fh_i  = fh_s.to_i(10)
	vid_s  = ARGV[1]
	vid_i  = vid_s.to_i(16)
	dlul_s  = ARGV[2]
	dlul_i  = dlul_s.to_i(10)
	num_s  = ARGV[3]
	num_i  = num_s.to_i(10)
end
if dlul_i == 0 || dlul_i == 1then
	if ARGV.length == 3 then
		puts "usage:"+$0+" <fh><vid><dlul><num>",
		"(m):<fh>    is FH(1-3)",
		"(m):<vid>    is VID(0x0-FFF)",
		"(m):<dlul>    is DL/UL(0-2)",
		"(m):<num>    is Set number(1-14)"
		exit(1)
	end
end


if (fh_i<1 or fh_i>3)then
 puts "Input value is incorrect((1-3)) : <fh>"
 exit(1)
end
if (vid_i<0 or vid_i>0xfff)then
 puts "Input value is incorrect((0x0-FFF)) : <vid>"
 exit(1)
end
if (dlul_i<0 or dlul_i>2)then
 puts "Input value is incorrect((0-2)) : <dlul>"
 exit(1)
end
if dlul_i == 0 || dlul_i == 1then
	if (num_i<1 or num_i>14)then
	 puts "Input value is incorrect((1-14)) : <num>"
	 exit(1)
	end
end

Rrh.assign()
# reg  write
data_e = 0x00010000
mask = 0xfffff000

data_s = Rrh.calc(vid_s.to_s(16),"|",data_e.to_s(16))

val1 = Rrh.regread("A1000494")
val1 = Rrh.calc(val1,"&",mask.to_s(16))
val2 = Rrh.regread("A1001494")
val2 = Rrh.calc(val2,"&",mask.to_s(16))
data_1 = Rrh.calc(val1,"|",vid_s.to_s(16))
data_2 = Rrh.calc(val2,"|",vid_s.to_s(16))

if fh_i == 1 then
	addr_s = Rrh.calc("A1000300","+",((num_i - 1) * 0x4).to_s(16))
	if dlul_i == 1 then
		Rrh.regwrite(addr_s,data_s)
	elsif dlul_i == 2 then
		Rrh.regwrite("A1000494",data_1)
	else
		Rrh.regwrite(addr_s,data_s)
		Rrh.regwrite("A1000494",data_1)
	end

elsif fh_i == 2 then
	addr_s = Rrh.calc("A1001300","+",((num_i - 1) * 0x4).to_s(16))
	if dlul_i == 1 then
		Rrh.regwrite(addr_s,data_s)
	elsif dlul_i == 2 then
		Rrh.regwrite("A1001494",data_2)
	else
		Rrh.regwrite(addr_s,data_s)
		Rrh.regwrite("A1001494",data_2)
	end

else
	if dlul_i == 1 then
		addr_s = Rrh.calc("A1000300","+",((num_i - 1) * 0x4).to_s(16))
		Rrh.regwrite(addr_s,data_s)

		addr_s = Rrh.calc("A1001300","+",((num_i - 1) * 0x4).to_s(16))
		Rrh.regwrite(addr_s,data_s)
	elsif dlul_i == 2 then
		Rrh.regwrite("A1000494",data_1)
		Rrh.regwrite("A1001494",data_2)
	else
		addr_s = Rrh.calc("A1000300","+",((num_i - 1) * 0x4).to_s(16))
		Rrh.regwrite(addr_s,data_s)
		Rrh.regwrite("A1000494",data_1)

		addr_s = Rrh.calc("A1001300","+",((num_i - 1) * 0x4).to_s(16))
		Rrh.regwrite(addr_s,data_s)
		Rrh.regwrite("A1001494",data_2)
	end
	
end


Rrh.unassign()
